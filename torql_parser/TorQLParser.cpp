
// Generated from TorQLParser.g4 by ANTLR 4.13.2


#include "TorQLParserVisitor.h"

#include "TorQLParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct TorQLParserStaticData final {
  TorQLParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  TorQLParserStaticData(const TorQLParserStaticData&) = delete;
  TorQLParserStaticData(TorQLParserStaticData&&) = delete;
  TorQLParserStaticData& operator=(const TorQLParserStaticData&) = delete;
  TorQLParserStaticData& operator=(TorQLParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag torqlparserParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<TorQLParserStaticData> torqlparserParserStaticData = nullptr;

void torqlparserParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (torqlparserParserStaticData != nullptr) {
    return;
  }
#else
  assert(torqlparserParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<TorQLParserStaticData>(
    std::vector<std::string>{
      "program", "declaration", "expression", "varDecl", "identifierList", 
      "statement", "returnStmt", "throwStmt", "catchBlock", "tryCatchStmt", 
      "ifStmt", "whileStmt", "forStmt", "forInStmt", "funcStmt", "varAssignment", 
      "exprStmt", "emptyStmt", "block", "kvPair", "kvPairList", "select", 
      "selectUnionStmt", "selectStmtWithParens", "selectStmt", "withClause", 
      "topClause", "fromClause", "arrayJoinClause", "windowClause", "prewhereClause", 
      "whereClause", "groupByClause", "havingClause", "orderByClause", "projectionOrderByClause", 
      "limitAndOffsetClause", "offsetOnlyClause", "settingsClause", "joinExpr", 
      "joinOp", "joinOpCross", "joinConstraintClause", "sampleClause", "orderExprList", 
      "orderExpr", "ratioExpr", "settingExprList", "settingExpr", "windowExpr", 
      "winPartitionByClause", "winOrderByClause", "winFrameClause", "winFrameExtend", 
      "winFrameBound", "expr", "columnTypeExpr", "columnExprList", "columnExpr", 
      "columnLambdaExpr", "torqlxTagElement", "torqlxTagAttribute", "withExprList",
      "withExpr", "columnIdentifier", "nestedIdentifier", "tableExpr", "tableFunctionExpr", 
      "tableIdentifier", "tableArgList", "databaseIdentifier", "floatingLiteral", 
      "numberLiteral", "literal", "interval", "keyword", "keywordForAlias", 
      "alias", "identifier", "enumValue", "placeholder", "string", "templateString", 
      "stringContents", "fullTemplateString", "stringContentsFull"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "'->'", "'*'", "'`'", "'\\'", 
      "':'", "','", "'||'", "'-'", "'$'", "'.'", "'=='", "'='", "'>='", 
      "'>'", "'#'", "'~*'", "'=~*'", "'{'", "'['", "'('", "'<='", "'<'", 
      "", "'!~*'", "'!~'", "'\\u003F.'", "'\\u003F\\u003F'", "'%'", "'+'", 
      "'\\u003F'", "'\"'", "'f''", "'F''", "'''", "'~'", "'=~'", "'}'", 
      "']'", "')'", "';'", "'/'", "'_'"
    },
    std::vector<std::string>{
      "", "ALL", "AND", "ANTI", "ANY", "ARRAY", "AS", "ASCENDING", "ASOF", 
      "BETWEEN", "BOTH", "BY", "CASE", "CAST", "CATCH", "COHORT", "COLLATE", 
      "CROSS", "CUBE", "CURRENT", "DATE", "DAY", "DESC", "DESCENDING", "DISTINCT", 
      "ELSE", "END", "EXTRACT", "FINAL", "FINALLY", "FIRST", "FN", "FOLLOWING", 
      "FOR", "FROM", "FULL", "FUN", "GROUP", "HAVING", "HOUR", "ID", "IF", 
      "ILIKE", "IN", "INF", "INNER", "INTERVAL", "IS", "JOIN", "KEY", "LAST", 
      "LEADING", "LEFT", "LET", "LIKE", "LIMIT", "MINUTE", "MONTH", "NAN_SQL", 
      "NOT", "NULL_SQL", "NULLS", "OFFSET", "ON", "OR", "ORDER", "OUTER", 
      "OVER", "PARTITION", "PRECEDING", "PREWHERE", "QUARTER", "RANGE", 
      "RETURN", "RIGHT", "ROLLUP", "ROW", "ROWS", "SAMPLE", "SECOND", "SELECT", 
      "SEMI", "SETTINGS", "SUBSTRING", "THEN", "THROW", "TIES", "TIMESTAMP", 
      "TO", "TOP", "TOTALS", "TRAILING", "TRIM", "TRUNCATE", "TRY", "UNBOUNDED", 
      "UNION", "USING", "WEEK", "WHEN", "WHERE", "WHILE", "WINDOW", "WITH", 
      "YEAR", "ESCAPE_CHAR_COMMON", "IDENTIFIER", "FLOATING_LITERAL", "OCTAL_LITERAL", 
      "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", "STRING_LITERAL", "ARROW", 
      "ASTERISK", "BACKQUOTE", "BACKSLASH", "COLON", "COMMA", "CONCAT", 
      "DASH", "DOLLAR", "DOT", "EQ_DOUBLE", "EQ_SINGLE", "GT_EQ", "GT", 
      "HASH", "IREGEX_SINGLE", "IREGEX_DOUBLE", "LBRACE", "LBRACKET", "LPAREN", 
      "LT_EQ", "LT", "NOT_EQ", "NOT_IREGEX", "NOT_REGEX", "NULL_PROPERTY", 
      "NULLISH", "PERCENT", "PLUS", "QUERY", "QUOTE_DOUBLE", "QUOTE_SINGLE_TEMPLATE", 
      "QUOTE_SINGLE_TEMPLATE_FULL", "QUOTE_SINGLE", "REGEX_SINGLE", "REGEX_DOUBLE", 
      "RBRACE", "RBRACKET", "RPAREN", "SEMICOLON", "SLASH", "UNDERSCORE", 
      "MULTI_LINE_COMMENT", "SINGLE_LINE_COMMENT", "WHITESPACE", "STRING_TEXT", 
      "STRING_ESCAPE_TRIGGER", "FULL_STRING_TEXT", "FULL_STRING_ESCAPE_TRIGGER"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,160,1303,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,1,0,5,0,174,8,0,10,0,12,0,177,9,0,1,0,1,0,1,1,1,1,3,1,
  	183,8,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,3,3,192,8,3,1,4,1,4,1,4,5,4,197,8,
  	4,10,4,12,4,200,9,4,1,4,3,4,203,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
  	5,1,5,1,5,1,5,3,5,217,8,5,1,6,1,6,3,6,221,8,6,1,6,3,6,224,8,6,1,7,1,7,
  	3,7,228,8,7,1,7,3,7,231,8,7,1,8,1,8,1,8,1,8,1,8,3,8,238,8,8,1,8,1,8,3,
  	8,242,8,8,1,8,1,8,1,9,1,9,1,9,5,9,249,8,9,10,9,12,9,252,9,9,1,9,1,9,3,
  	9,256,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,265,8,10,1,11,1,11,
  	1,11,1,11,1,11,1,11,3,11,273,8,11,1,12,1,12,1,12,1,12,1,12,3,12,280,8,
  	12,1,12,1,12,3,12,284,8,12,1,12,1,12,1,12,1,12,3,12,290,8,12,1,12,1,12,
  	1,12,3,12,295,8,12,1,13,1,13,1,13,1,13,1,13,1,13,3,13,303,8,13,1,13,1,
  	13,1,13,1,13,1,13,3,13,310,8,13,1,14,1,14,1,14,1,14,3,14,316,8,14,1,14,
  	1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,3,16,328,8,16,1,17,1,17,
  	1,18,1,18,5,18,334,8,18,10,18,12,18,337,9,18,1,18,1,18,1,19,1,19,1,19,
  	1,19,1,20,1,20,1,20,5,20,348,8,20,10,20,12,20,351,9,20,1,20,3,20,354,
  	8,20,1,21,1,21,1,21,3,21,359,8,21,1,21,1,21,1,22,1,22,1,22,1,22,5,22,
  	367,8,22,10,22,12,22,370,9,22,1,23,1,23,1,23,1,23,1,23,1,23,3,23,378,
  	8,23,1,24,3,24,381,8,24,1,24,1,24,3,24,385,8,24,1,24,3,24,388,8,24,1,
  	24,1,24,3,24,392,8,24,1,24,3,24,395,8,24,1,24,3,24,398,8,24,1,24,3,24,
  	401,8,24,1,24,3,24,404,8,24,1,24,1,24,3,24,408,8,24,1,24,1,24,3,24,412,
  	8,24,1,24,3,24,415,8,24,1,24,3,24,418,8,24,1,24,3,24,421,8,24,1,24,1,
  	24,3,24,425,8,24,1,24,3,24,428,8,24,1,25,1,25,1,25,1,26,1,26,1,26,1,26,
  	3,26,437,8,26,1,27,1,27,1,27,1,28,3,28,443,8,28,1,28,1,28,1,28,1,28,1,
  	29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,5,29,462,
  	8,29,10,29,12,29,465,9,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,
  	1,32,1,32,1,32,1,32,1,32,3,32,481,8,32,1,33,1,33,1,33,1,34,1,34,1,34,
  	1,34,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,3,36,498,8,36,1,36,1,36,
  	1,36,1,36,3,36,504,8,36,1,36,1,36,1,36,1,36,3,36,510,8,36,1,36,1,36,1,
  	36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,521,8,36,3,36,523,8,36,1,37,1,37,
  	1,37,1,38,1,38,1,38,1,39,1,39,1,39,3,39,534,8,39,1,39,3,39,537,8,39,1,
  	39,1,39,1,39,1,39,3,39,543,8,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,551,
  	8,39,1,39,1,39,1,39,1,39,5,39,557,8,39,10,39,12,39,560,9,39,1,40,3,40,
  	563,8,40,1,40,1,40,1,40,3,40,568,8,40,1,40,3,40,571,8,40,1,40,3,40,574,
  	8,40,1,40,1,40,3,40,578,8,40,1,40,1,40,3,40,582,8,40,1,40,3,40,585,8,
  	40,3,40,587,8,40,1,40,3,40,590,8,40,1,40,1,40,3,40,594,8,40,1,40,1,40,
  	3,40,598,8,40,1,40,3,40,601,8,40,3,40,603,8,40,3,40,605,8,40,1,41,1,41,
  	1,41,3,41,610,8,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,
  	621,8,42,1,43,1,43,1,43,1,43,3,43,627,8,43,1,44,1,44,1,44,5,44,632,8,
  	44,10,44,12,44,635,9,44,1,45,1,45,3,45,639,8,45,1,45,1,45,3,45,643,8,
  	45,1,45,1,45,3,45,647,8,45,1,46,1,46,1,46,1,46,3,46,653,8,46,3,46,655,
  	8,46,1,47,1,47,1,47,5,47,660,8,47,10,47,12,47,663,9,47,1,48,1,48,1,48,
  	1,48,1,49,3,49,670,8,49,1,49,3,49,673,8,49,1,49,3,49,676,8,49,1,50,1,
  	50,1,50,1,50,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,
  	53,1,53,3,53,695,8,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,
  	54,1,54,1,54,3,54,709,8,54,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,
  	56,1,56,1,56,1,56,5,56,723,8,56,10,56,12,56,726,9,56,1,56,3,56,729,8,
  	56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,5,56,738,8,56,10,56,12,56,741,9,
  	56,1,56,3,56,744,8,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,5,56,753,8,56,
  	10,56,12,56,756,9,56,1,56,3,56,759,8,56,1,56,1,56,1,56,1,56,1,56,3,56,
  	766,8,56,1,56,1,56,3,56,770,8,56,1,57,1,57,1,57,5,57,775,8,57,10,57,12,
  	57,778,9,57,1,57,3,57,781,8,57,1,58,1,58,1,58,3,58,786,8,58,1,58,1,58,
  	1,58,1,58,1,58,4,58,793,8,58,11,58,12,58,794,1,58,1,58,3,58,799,8,58,
  	1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,
  	1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,3,58,823,8,58,1,58,1,58,1,58,
  	1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,3,58,840,
  	8,58,1,58,1,58,1,58,1,58,3,58,846,8,58,1,58,3,58,849,8,58,1,58,3,58,852,
  	8,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,3,58,862,8,58,1,58,1,58,
  	1,58,1,58,3,58,868,8,58,1,58,3,58,871,8,58,1,58,3,58,874,8,58,1,58,1,
  	58,1,58,1,58,1,58,1,58,3,58,882,8,58,1,58,3,58,885,8,58,1,58,1,58,3,58,
  	889,8,58,1,58,3,58,892,8,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,
  	58,1,58,1,58,1,58,3,58,906,8,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,
  	58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,3,58,923,8,58,1,58,1,58,1,58,3,
  	58,928,8,58,1,58,1,58,1,58,3,58,933,8,58,1,58,1,58,1,58,1,58,3,58,939,
  	8,58,1,58,1,58,1,58,1,58,1,58,3,58,946,8,58,1,58,1,58,1,58,1,58,1,58,
  	1,58,1,58,1,58,1,58,1,58,3,58,958,8,58,1,58,1,58,3,58,962,8,58,1,58,3,
  	58,965,8,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,3,58,974,8,58,1,58,1,58,
  	1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,3,58,988,8,58,1,58,
  	1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,3,58,
  	1004,8,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,
  	1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,
  	1,58,3,58,1033,8,58,1,58,1,58,1,58,1,58,1,58,1,58,3,58,1041,8,58,5,58,
  	1043,8,58,10,58,12,58,1046,9,58,1,59,1,59,1,59,1,59,5,59,1052,8,59,10,
  	59,12,59,1055,9,59,1,59,3,59,1058,8,59,1,59,1,59,1,59,1,59,1,59,5,59,
  	1065,8,59,10,59,12,59,1068,9,59,1,59,3,59,1071,8,59,1,59,1,59,3,59,1075,
  	8,59,1,59,1,59,1,59,3,59,1080,8,59,1,60,1,60,1,60,5,60,1085,8,60,10,60,
  	12,60,1088,9,60,1,60,1,60,1,60,1,60,1,60,1,60,5,60,1096,8,60,10,60,12,
  	60,1099,9,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,1107,8,60,1,60,1,60,1,
  	60,1,60,1,60,3,60,1114,8,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,
  	61,1,61,1,61,3,61,1127,8,61,1,62,1,62,1,62,5,62,1132,8,62,10,62,12,62,
  	1135,9,62,1,62,3,62,1138,8,62,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,
  	1,63,1,63,3,63,1150,8,63,1,64,1,64,1,64,1,64,3,64,1156,8,64,1,64,3,64,
  	1159,8,64,1,65,1,65,1,65,5,65,1164,8,65,10,65,12,65,1167,9,65,1,66,1,
  	66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,3,66,1178,8,66,1,66,1,66,1,66,1,
  	66,3,66,1184,8,66,5,66,1186,8,66,10,66,12,66,1189,9,66,1,67,1,67,1,67,
  	3,67,1194,8,67,1,67,1,67,1,68,1,68,1,68,3,68,1201,8,68,1,68,1,68,1,69,
  	1,69,1,69,5,69,1208,8,69,10,69,12,69,1211,9,69,1,69,3,69,1214,8,69,1,
  	70,1,70,1,71,1,71,1,71,1,71,1,71,1,71,3,71,1224,8,71,3,71,1226,8,71,1,
  	72,3,72,1229,8,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,1237,8,72,1,73,1,
  	73,1,73,3,73,1242,8,73,1,74,1,74,1,75,1,75,1,76,1,76,1,77,1,77,3,77,1252,
  	8,77,1,78,1,78,1,78,3,78,1257,8,78,1,79,1,79,1,79,1,79,1,80,1,80,1,80,
  	1,80,1,81,1,81,3,81,1269,8,81,1,82,1,82,5,82,1273,8,82,10,82,12,82,1276,
  	9,82,1,82,1,82,1,83,1,83,1,83,1,83,1,83,3,83,1285,8,83,1,84,1,84,5,84,
  	1289,8,84,10,84,12,84,1292,9,84,1,84,1,84,1,85,1,85,1,85,1,85,1,85,3,
  	85,1301,8,85,1,85,0,3,78,116,132,86,0,2,4,6,8,10,12,14,16,18,20,22,24,
  	26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,
  	72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
  	114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,
  	150,152,154,156,158,160,162,164,166,168,170,0,17,2,0,31,31,36,36,2,0,
  	18,18,75,75,2,0,45,45,52,52,3,0,1,1,4,4,8,8,4,0,1,1,3,4,8,8,81,81,2,0,
  	52,52,74,74,2,0,1,1,4,4,2,0,7,7,22,23,2,0,30,30,50,50,2,0,72,72,77,77,
  	3,0,10,10,51,51,91,91,2,0,42,42,54,54,1,0,108,109,2,0,119,119,140,140,
  	7,0,21,21,39,39,56,57,71,71,79,79,98,98,104,104,17,0,1,13,15,20,22,28,
  	30,30,32,35,37,38,40,43,45,52,54,55,59,59,61,70,72,78,80,84,86,93,95,
  	97,99,100,102,103,4,0,20,20,30,30,40,40,49,49,1475,0,175,1,0,0,0,2,182,
  	1,0,0,0,4,184,1,0,0,0,6,186,1,0,0,0,8,193,1,0,0,0,10,216,1,0,0,0,12,218,
  	1,0,0,0,14,225,1,0,0,0,16,232,1,0,0,0,18,245,1,0,0,0,20,257,1,0,0,0,22,
  	266,1,0,0,0,24,274,1,0,0,0,26,296,1,0,0,0,28,311,1,0,0,0,30,320,1,0,0,
  	0,32,325,1,0,0,0,34,329,1,0,0,0,36,331,1,0,0,0,38,340,1,0,0,0,40,344,
  	1,0,0,0,42,358,1,0,0,0,44,362,1,0,0,0,46,377,1,0,0,0,48,380,1,0,0,0,50,
  	429,1,0,0,0,52,432,1,0,0,0,54,438,1,0,0,0,56,442,1,0,0,0,58,448,1,0,0,
  	0,60,466,1,0,0,0,62,469,1,0,0,0,64,472,1,0,0,0,66,482,1,0,0,0,68,485,
  	1,0,0,0,70,489,1,0,0,0,72,522,1,0,0,0,74,524,1,0,0,0,76,527,1,0,0,0,78,
  	542,1,0,0,0,80,604,1,0,0,0,82,609,1,0,0,0,84,620,1,0,0,0,86,622,1,0,0,
  	0,88,628,1,0,0,0,90,636,1,0,0,0,92,654,1,0,0,0,94,656,1,0,0,0,96,664,
  	1,0,0,0,98,669,1,0,0,0,100,677,1,0,0,0,102,681,1,0,0,0,104,685,1,0,0,
  	0,106,694,1,0,0,0,108,708,1,0,0,0,110,710,1,0,0,0,112,769,1,0,0,0,114,
  	771,1,0,0,0,116,932,1,0,0,0,118,1074,1,0,0,0,120,1113,1,0,0,0,122,1126,
  	1,0,0,0,124,1128,1,0,0,0,126,1149,1,0,0,0,128,1158,1,0,0,0,130,1160,1,
  	0,0,0,132,1177,1,0,0,0,134,1190,1,0,0,0,136,1200,1,0,0,0,138,1204,1,0,
  	0,0,140,1215,1,0,0,0,142,1225,1,0,0,0,144,1228,1,0,0,0,146,1241,1,0,0,
  	0,148,1243,1,0,0,0,150,1245,1,0,0,0,152,1247,1,0,0,0,154,1251,1,0,0,0,
  	156,1256,1,0,0,0,158,1258,1,0,0,0,160,1262,1,0,0,0,162,1268,1,0,0,0,164,
  	1270,1,0,0,0,166,1284,1,0,0,0,168,1286,1,0,0,0,170,1300,1,0,0,0,172,174,
  	3,2,1,0,173,172,1,0,0,0,174,177,1,0,0,0,175,173,1,0,0,0,175,176,1,0,0,
  	0,176,178,1,0,0,0,177,175,1,0,0,0,178,179,5,0,0,1,179,1,1,0,0,0,180,183,
  	3,6,3,0,181,183,3,10,5,0,182,180,1,0,0,0,182,181,1,0,0,0,183,3,1,0,0,
  	0,184,185,3,116,58,0,185,5,1,0,0,0,186,187,5,53,0,0,187,191,3,156,78,
  	0,188,189,5,116,0,0,189,190,5,123,0,0,190,192,3,4,2,0,191,188,1,0,0,0,
  	191,192,1,0,0,0,192,7,1,0,0,0,193,198,3,156,78,0,194,195,5,117,0,0,195,
  	197,3,156,78,0,196,194,1,0,0,0,197,200,1,0,0,0,198,196,1,0,0,0,198,199,
  	1,0,0,0,199,202,1,0,0,0,200,198,1,0,0,0,201,203,5,117,0,0,202,201,1,0,
  	0,0,202,203,1,0,0,0,203,9,1,0,0,0,204,217,3,12,6,0,205,217,3,14,7,0,206,
  	217,3,18,9,0,207,217,3,20,10,0,208,217,3,22,11,0,209,217,3,26,13,0,210,
  	217,3,24,12,0,211,217,3,28,14,0,212,217,3,30,15,0,213,217,3,36,18,0,214,
  	217,3,32,16,0,215,217,3,34,17,0,216,204,1,0,0,0,216,205,1,0,0,0,216,206,
  	1,0,0,0,216,207,1,0,0,0,216,208,1,0,0,0,216,209,1,0,0,0,216,210,1,0,0,
  	0,216,211,1,0,0,0,216,212,1,0,0,0,216,213,1,0,0,0,216,214,1,0,0,0,216,
  	215,1,0,0,0,217,11,1,0,0,0,218,220,5,73,0,0,219,221,3,4,2,0,220,219,1,
  	0,0,0,220,221,1,0,0,0,221,223,1,0,0,0,222,224,5,151,0,0,223,222,1,0,0,
  	0,223,224,1,0,0,0,224,13,1,0,0,0,225,227,5,85,0,0,226,228,3,4,2,0,227,
  	226,1,0,0,0,227,228,1,0,0,0,228,230,1,0,0,0,229,231,5,151,0,0,230,229,
  	1,0,0,0,230,231,1,0,0,0,231,15,1,0,0,0,232,241,5,14,0,0,233,234,5,131,
  	0,0,234,237,3,156,78,0,235,236,5,116,0,0,236,238,3,156,78,0,237,235,1,
  	0,0,0,237,238,1,0,0,0,238,239,1,0,0,0,239,240,5,150,0,0,240,242,1,0,0,
  	0,241,233,1,0,0,0,241,242,1,0,0,0,242,243,1,0,0,0,243,244,3,36,18,0,244,
  	17,1,0,0,0,245,246,5,94,0,0,246,250,3,36,18,0,247,249,3,16,8,0,248,247,
  	1,0,0,0,249,252,1,0,0,0,250,248,1,0,0,0,250,251,1,0,0,0,251,255,1,0,0,
  	0,252,250,1,0,0,0,253,254,5,29,0,0,254,256,3,36,18,0,255,253,1,0,0,0,
  	255,256,1,0,0,0,256,19,1,0,0,0,257,258,5,41,0,0,258,259,5,131,0,0,259,
  	260,3,4,2,0,260,261,5,150,0,0,261,264,3,10,5,0,262,263,5,25,0,0,263,265,
  	3,10,5,0,264,262,1,0,0,0,264,265,1,0,0,0,265,21,1,0,0,0,266,267,5,101,
  	0,0,267,268,5,131,0,0,268,269,3,4,2,0,269,270,5,150,0,0,270,272,3,10,
  	5,0,271,273,5,151,0,0,272,271,1,0,0,0,272,273,1,0,0,0,273,23,1,0,0,0,
  	274,275,5,33,0,0,275,279,5,131,0,0,276,280,3,6,3,0,277,280,3,30,15,0,
  	278,280,3,4,2,0,279,276,1,0,0,0,279,277,1,0,0,0,279,278,1,0,0,0,279,280,
  	1,0,0,0,280,281,1,0,0,0,281,283,5,151,0,0,282,284,3,4,2,0,283,282,1,0,
  	0,0,283,284,1,0,0,0,284,285,1,0,0,0,285,289,5,151,0,0,286,290,3,6,3,0,
  	287,290,3,30,15,0,288,290,3,4,2,0,289,286,1,0,0,0,289,287,1,0,0,0,289,
  	288,1,0,0,0,289,290,1,0,0,0,290,291,1,0,0,0,291,292,5,150,0,0,292,294,
  	3,10,5,0,293,295,5,151,0,0,294,293,1,0,0,0,294,295,1,0,0,0,295,25,1,0,
  	0,0,296,297,5,33,0,0,297,298,5,131,0,0,298,299,5,53,0,0,299,302,3,156,
  	78,0,300,301,5,117,0,0,301,303,3,156,78,0,302,300,1,0,0,0,302,303,1,0,
  	0,0,303,304,1,0,0,0,304,305,5,43,0,0,305,306,3,4,2,0,306,307,5,150,0,
  	0,307,309,3,10,5,0,308,310,5,151,0,0,309,308,1,0,0,0,309,310,1,0,0,0,
  	310,27,1,0,0,0,311,312,7,0,0,0,312,313,3,156,78,0,313,315,5,131,0,0,314,
  	316,3,8,4,0,315,314,1,0,0,0,315,316,1,0,0,0,316,317,1,0,0,0,317,318,5,
  	150,0,0,318,319,3,36,18,0,319,29,1,0,0,0,320,321,3,4,2,0,321,322,5,116,
  	0,0,322,323,5,123,0,0,323,324,3,4,2,0,324,31,1,0,0,0,325,327,3,4,2,0,
  	326,328,5,151,0,0,327,326,1,0,0,0,327,328,1,0,0,0,328,33,1,0,0,0,329,
  	330,5,151,0,0,330,35,1,0,0,0,331,335,5,129,0,0,332,334,3,2,1,0,333,332,
  	1,0,0,0,334,337,1,0,0,0,335,333,1,0,0,0,335,336,1,0,0,0,336,338,1,0,0,
  	0,337,335,1,0,0,0,338,339,5,148,0,0,339,37,1,0,0,0,340,341,3,4,2,0,341,
  	342,5,116,0,0,342,343,3,4,2,0,343,39,1,0,0,0,344,349,3,38,19,0,345,346,
  	5,117,0,0,346,348,3,38,19,0,347,345,1,0,0,0,348,351,1,0,0,0,349,347,1,
  	0,0,0,349,350,1,0,0,0,350,353,1,0,0,0,351,349,1,0,0,0,352,354,5,117,0,
  	0,353,352,1,0,0,0,353,354,1,0,0,0,354,41,1,0,0,0,355,359,3,44,22,0,356,
  	359,3,48,24,0,357,359,3,120,60,0,358,355,1,0,0,0,358,356,1,0,0,0,358,
  	357,1,0,0,0,359,360,1,0,0,0,360,361,5,0,0,1,361,43,1,0,0,0,362,368,3,
  	46,23,0,363,364,5,96,0,0,364,365,5,1,0,0,365,367,3,46,23,0,366,363,1,
  	0,0,0,367,370,1,0,0,0,368,366,1,0,0,0,368,369,1,0,0,0,369,45,1,0,0,0,
  	370,368,1,0,0,0,371,378,3,48,24,0,372,373,5,131,0,0,373,374,3,44,22,0,
  	374,375,5,150,0,0,375,378,1,0,0,0,376,378,3,160,80,0,377,371,1,0,0,0,
  	377,372,1,0,0,0,377,376,1,0,0,0,378,47,1,0,0,0,379,381,3,50,25,0,380,
  	379,1,0,0,0,380,381,1,0,0,0,381,382,1,0,0,0,382,384,5,80,0,0,383,385,
  	5,24,0,0,384,383,1,0,0,0,384,385,1,0,0,0,385,387,1,0,0,0,386,388,3,52,
  	26,0,387,386,1,0,0,0,387,388,1,0,0,0,388,389,1,0,0,0,389,391,3,114,57,
  	0,390,392,3,54,27,0,391,390,1,0,0,0,391,392,1,0,0,0,392,394,1,0,0,0,393,
  	395,3,56,28,0,394,393,1,0,0,0,394,395,1,0,0,0,395,397,1,0,0,0,396,398,
  	3,60,30,0,397,396,1,0,0,0,397,398,1,0,0,0,398,400,1,0,0,0,399,401,3,62,
  	31,0,400,399,1,0,0,0,400,401,1,0,0,0,401,403,1,0,0,0,402,404,3,64,32,
  	0,403,402,1,0,0,0,403,404,1,0,0,0,404,407,1,0,0,0,405,406,5,103,0,0,406,
  	408,7,1,0,0,407,405,1,0,0,0,407,408,1,0,0,0,408,411,1,0,0,0,409,410,5,
  	103,0,0,410,412,5,90,0,0,411,409,1,0,0,0,411,412,1,0,0,0,412,414,1,0,
  	0,0,413,415,3,66,33,0,414,413,1,0,0,0,414,415,1,0,0,0,415,417,1,0,0,0,
  	416,418,3,58,29,0,417,416,1,0,0,0,417,418,1,0,0,0,418,420,1,0,0,0,419,
  	421,3,68,34,0,420,419,1,0,0,0,420,421,1,0,0,0,421,424,1,0,0,0,422,425,
  	3,72,36,0,423,425,3,74,37,0,424,422,1,0,0,0,424,423,1,0,0,0,424,425,1,
  	0,0,0,425,427,1,0,0,0,426,428,3,76,38,0,427,426,1,0,0,0,427,428,1,0,0,
  	0,428,49,1,0,0,0,429,430,5,103,0,0,430,431,3,124,62,0,431,51,1,0,0,0,
  	432,433,5,89,0,0,433,436,5,109,0,0,434,435,5,103,0,0,435,437,5,86,0,0,
  	436,434,1,0,0,0,436,437,1,0,0,0,437,53,1,0,0,0,438,439,5,34,0,0,439,440,
  	3,78,39,0,440,55,1,0,0,0,441,443,7,2,0,0,442,441,1,0,0,0,442,443,1,0,
  	0,0,443,444,1,0,0,0,444,445,5,5,0,0,445,446,5,48,0,0,446,447,3,114,57,
  	0,447,57,1,0,0,0,448,449,5,102,0,0,449,450,3,156,78,0,450,451,5,6,0,0,
  	451,452,5,131,0,0,452,453,3,98,49,0,453,463,5,150,0,0,454,455,5,117,0,
  	0,455,456,3,156,78,0,456,457,5,6,0,0,457,458,5,131,0,0,458,459,3,98,49,
  	0,459,460,5,150,0,0,460,462,1,0,0,0,461,454,1,0,0,0,462,465,1,0,0,0,463,
  	461,1,0,0,0,463,464,1,0,0,0,464,59,1,0,0,0,465,463,1,0,0,0,466,467,5,
  	70,0,0,467,468,3,116,58,0,468,61,1,0,0,0,469,470,5,100,0,0,470,471,3,
  	116,58,0,471,63,1,0,0,0,472,473,5,37,0,0,473,480,5,11,0,0,474,475,7,1,
  	0,0,475,476,5,131,0,0,476,477,3,114,57,0,477,478,5,150,0,0,478,481,1,
  	0,0,0,479,481,3,114,57,0,480,474,1,0,0,0,480,479,1,0,0,0,481,65,1,0,0,
  	0,482,483,5,38,0,0,483,484,3,116,58,0,484,67,1,0,0,0,485,486,5,65,0,0,
  	486,487,5,11,0,0,487,488,3,88,44,0,488,69,1,0,0,0,489,490,5,65,0,0,490,
  	491,5,11,0,0,491,492,3,114,57,0,492,71,1,0,0,0,493,494,5,55,0,0,494,497,
  	3,116,58,0,495,496,5,117,0,0,496,498,3,116,58,0,497,495,1,0,0,0,497,498,
  	1,0,0,0,498,503,1,0,0,0,499,500,5,103,0,0,500,504,5,86,0,0,501,502,5,
  	11,0,0,502,504,3,114,57,0,503,499,1,0,0,0,503,501,1,0,0,0,503,504,1,0,
  	0,0,504,523,1,0,0,0,505,506,5,55,0,0,506,509,3,116,58,0,507,508,5,103,
  	0,0,508,510,5,86,0,0,509,507,1,0,0,0,509,510,1,0,0,0,510,511,1,0,0,0,
  	511,512,5,62,0,0,512,513,3,116,58,0,513,523,1,0,0,0,514,515,5,55,0,0,
  	515,516,3,116,58,0,516,517,5,62,0,0,517,520,3,116,58,0,518,519,5,11,0,
  	0,519,521,3,114,57,0,520,518,1,0,0,0,520,521,1,0,0,0,521,523,1,0,0,0,
  	522,493,1,0,0,0,522,505,1,0,0,0,522,514,1,0,0,0,523,73,1,0,0,0,524,525,
  	5,62,0,0,525,526,3,116,58,0,526,75,1,0,0,0,527,528,5,82,0,0,528,529,3,
  	94,47,0,529,77,1,0,0,0,530,531,6,39,-1,0,531,533,3,132,66,0,532,534,5,
  	28,0,0,533,532,1,0,0,0,533,534,1,0,0,0,534,536,1,0,0,0,535,537,3,86,43,
  	0,536,535,1,0,0,0,536,537,1,0,0,0,537,543,1,0,0,0,538,539,5,131,0,0,539,
  	540,3,78,39,0,540,541,5,150,0,0,541,543,1,0,0,0,542,530,1,0,0,0,542,538,
  	1,0,0,0,543,558,1,0,0,0,544,545,10,3,0,0,545,546,3,82,41,0,546,547,3,
  	78,39,4,547,557,1,0,0,0,548,550,10,4,0,0,549,551,3,80,40,0,550,549,1,
  	0,0,0,550,551,1,0,0,0,551,552,1,0,0,0,552,553,5,48,0,0,553,554,3,78,39,
  	0,554,555,3,84,42,0,555,557,1,0,0,0,556,544,1,0,0,0,556,548,1,0,0,0,557,
  	560,1,0,0,0,558,556,1,0,0,0,558,559,1,0,0,0,559,79,1,0,0,0,560,558,1,
  	0,0,0,561,563,7,3,0,0,562,561,1,0,0,0,562,563,1,0,0,0,563,564,1,0,0,0,
  	564,571,5,45,0,0,565,567,5,45,0,0,566,568,7,3,0,0,567,566,1,0,0,0,567,
  	568,1,0,0,0,568,571,1,0,0,0,569,571,7,3,0,0,570,562,1,0,0,0,570,565,1,
  	0,0,0,570,569,1,0,0,0,571,605,1,0,0,0,572,574,7,4,0,0,573,572,1,0,0,0,
  	573,574,1,0,0,0,574,575,1,0,0,0,575,577,7,5,0,0,576,578,5,66,0,0,577,
  	576,1,0,0,0,577,578,1,0,0,0,578,587,1,0,0,0,579,581,7,5,0,0,580,582,5,
  	66,0,0,581,580,1,0,0,0,581,582,1,0,0,0,582,584,1,0,0,0,583,585,7,4,0,
  	0,584,583,1,0,0,0,584,585,1,0,0,0,585,587,1,0,0,0,586,573,1,0,0,0,586,
  	579,1,0,0,0,587,605,1,0,0,0,588,590,7,6,0,0,589,588,1,0,0,0,589,590,1,
  	0,0,0,590,591,1,0,0,0,591,593,5,35,0,0,592,594,5,66,0,0,593,592,1,0,0,
  	0,593,594,1,0,0,0,594,603,1,0,0,0,595,597,5,35,0,0,596,598,5,66,0,0,597,
  	596,1,0,0,0,597,598,1,0,0,0,598,600,1,0,0,0,599,601,7,6,0,0,600,599,1,
  	0,0,0,600,601,1,0,0,0,601,603,1,0,0,0,602,589,1,0,0,0,602,595,1,0,0,0,
  	603,605,1,0,0,0,604,570,1,0,0,0,604,586,1,0,0,0,604,602,1,0,0,0,605,81,
  	1,0,0,0,606,607,5,17,0,0,607,610,5,48,0,0,608,610,5,117,0,0,609,606,1,
  	0,0,0,609,608,1,0,0,0,610,83,1,0,0,0,611,612,5,63,0,0,612,621,3,114,57,
  	0,613,614,5,97,0,0,614,615,5,131,0,0,615,616,3,114,57,0,616,617,5,150,
  	0,0,617,621,1,0,0,0,618,619,5,97,0,0,619,621,3,114,57,0,620,611,1,0,0,
  	0,620,613,1,0,0,0,620,618,1,0,0,0,621,85,1,0,0,0,622,623,5,78,0,0,623,
  	626,3,92,46,0,624,625,5,62,0,0,625,627,3,92,46,0,626,624,1,0,0,0,626,
  	627,1,0,0,0,627,87,1,0,0,0,628,633,3,90,45,0,629,630,5,117,0,0,630,632,
  	3,90,45,0,631,629,1,0,0,0,632,635,1,0,0,0,633,631,1,0,0,0,633,634,1,0,
  	0,0,634,89,1,0,0,0,635,633,1,0,0,0,636,638,3,116,58,0,637,639,7,7,0,0,
  	638,637,1,0,0,0,638,639,1,0,0,0,639,642,1,0,0,0,640,641,5,61,0,0,641,
  	643,7,8,0,0,642,640,1,0,0,0,642,643,1,0,0,0,643,646,1,0,0,0,644,645,5,
  	16,0,0,645,647,5,111,0,0,646,644,1,0,0,0,646,647,1,0,0,0,647,91,1,0,0,
  	0,648,655,3,160,80,0,649,652,3,144,72,0,650,651,5,152,0,0,651,653,3,144,
  	72,0,652,650,1,0,0,0,652,653,1,0,0,0,653,655,1,0,0,0,654,648,1,0,0,0,
  	654,649,1,0,0,0,655,93,1,0,0,0,656,661,3,96,48,0,657,658,5,117,0,0,658,
  	660,3,96,48,0,659,657,1,0,0,0,660,663,1,0,0,0,661,659,1,0,0,0,661,662,
  	1,0,0,0,662,95,1,0,0,0,663,661,1,0,0,0,664,665,3,156,78,0,665,666,5,123,
  	0,0,666,667,3,146,73,0,667,97,1,0,0,0,668,670,3,100,50,0,669,668,1,0,
  	0,0,669,670,1,0,0,0,670,672,1,0,0,0,671,673,3,102,51,0,672,671,1,0,0,
  	0,672,673,1,0,0,0,673,675,1,0,0,0,674,676,3,104,52,0,675,674,1,0,0,0,
  	675,676,1,0,0,0,676,99,1,0,0,0,677,678,5,68,0,0,678,679,5,11,0,0,679,
  	680,3,114,57,0,680,101,1,0,0,0,681,682,5,65,0,0,682,683,5,11,0,0,683,
  	684,3,88,44,0,684,103,1,0,0,0,685,686,7,9,0,0,686,687,3,106,53,0,687,
  	105,1,0,0,0,688,695,3,108,54,0,689,690,5,9,0,0,690,691,3,108,54,0,691,
  	692,5,2,0,0,692,693,3,108,54,0,693,695,1,0,0,0,694,688,1,0,0,0,694,689,
  	1,0,0,0,695,107,1,0,0,0,696,697,5,19,0,0,697,709,5,76,0,0,698,699,5,95,
  	0,0,699,709,5,69,0,0,700,701,5,95,0,0,701,709,5,32,0,0,702,703,3,144,
  	72,0,703,704,5,69,0,0,704,709,1,0,0,0,705,706,3,144,72,0,706,707,5,32,
  	0,0,707,709,1,0,0,0,708,696,1,0,0,0,708,698,1,0,0,0,708,700,1,0,0,0,708,
  	702,1,0,0,0,708,705,1,0,0,0,709,109,1,0,0,0,710,711,3,116,58,0,711,712,
  	5,0,0,1,712,111,1,0,0,0,713,770,3,156,78,0,714,715,3,156,78,0,715,716,
  	5,131,0,0,716,717,3,156,78,0,717,724,3,112,56,0,718,719,5,117,0,0,719,
  	720,3,156,78,0,720,721,3,112,56,0,721,723,1,0,0,0,722,718,1,0,0,0,723,
  	726,1,0,0,0,724,722,1,0,0,0,724,725,1,0,0,0,725,728,1,0,0,0,726,724,1,
  	0,0,0,727,729,5,117,0,0,728,727,1,0,0,0,728,729,1,0,0,0,729,730,1,0,0,
  	0,730,731,5,150,0,0,731,770,1,0,0,0,732,733,3,156,78,0,733,734,5,131,
  	0,0,734,739,3,158,79,0,735,736,5,117,0,0,736,738,3,158,79,0,737,735,1,
  	0,0,0,738,741,1,0,0,0,739,737,1,0,0,0,739,740,1,0,0,0,740,743,1,0,0,0,
  	741,739,1,0,0,0,742,744,5,117,0,0,743,742,1,0,0,0,743,744,1,0,0,0,744,
  	745,1,0,0,0,745,746,5,150,0,0,746,770,1,0,0,0,747,748,3,156,78,0,748,
  	749,5,131,0,0,749,754,3,112,56,0,750,751,5,117,0,0,751,753,3,112,56,0,
  	752,750,1,0,0,0,753,756,1,0,0,0,754,752,1,0,0,0,754,755,1,0,0,0,755,758,
  	1,0,0,0,756,754,1,0,0,0,757,759,5,117,0,0,758,757,1,0,0,0,758,759,1,0,
  	0,0,759,760,1,0,0,0,760,761,5,150,0,0,761,770,1,0,0,0,762,763,3,156,78,
  	0,763,765,5,131,0,0,764,766,3,114,57,0,765,764,1,0,0,0,765,766,1,0,0,
  	0,766,767,1,0,0,0,767,768,5,150,0,0,768,770,1,0,0,0,769,713,1,0,0,0,769,
  	714,1,0,0,0,769,732,1,0,0,0,769,747,1,0,0,0,769,762,1,0,0,0,770,113,1,
  	0,0,0,771,776,3,116,58,0,772,773,5,117,0,0,773,775,3,116,58,0,774,772,
  	1,0,0,0,775,778,1,0,0,0,776,774,1,0,0,0,776,777,1,0,0,0,777,780,1,0,0,
  	0,778,776,1,0,0,0,779,781,5,117,0,0,780,779,1,0,0,0,780,781,1,0,0,0,781,
  	115,1,0,0,0,782,783,6,58,-1,0,783,785,5,12,0,0,784,786,3,116,58,0,785,
  	784,1,0,0,0,785,786,1,0,0,0,786,792,1,0,0,0,787,788,5,99,0,0,788,789,
  	3,116,58,0,789,790,5,84,0,0,790,791,3,116,58,0,791,793,1,0,0,0,792,787,
  	1,0,0,0,793,794,1,0,0,0,794,792,1,0,0,0,794,795,1,0,0,0,795,798,1,0,0,
  	0,796,797,5,25,0,0,797,799,3,116,58,0,798,796,1,0,0,0,798,799,1,0,0,0,
  	799,800,1,0,0,0,800,801,5,26,0,0,801,933,1,0,0,0,802,803,5,13,0,0,803,
  	804,5,131,0,0,804,805,3,116,58,0,805,806,5,6,0,0,806,807,3,112,56,0,807,
  	808,5,150,0,0,808,933,1,0,0,0,809,810,5,20,0,0,810,933,5,111,0,0,811,
  	812,5,46,0,0,812,813,3,116,58,0,813,814,3,148,74,0,814,933,1,0,0,0,815,
  	816,5,83,0,0,816,817,5,131,0,0,817,818,3,116,58,0,818,819,5,34,0,0,819,
  	822,3,116,58,0,820,821,5,33,0,0,821,823,3,116,58,0,822,820,1,0,0,0,822,
  	823,1,0,0,0,823,824,1,0,0,0,824,825,5,150,0,0,825,933,1,0,0,0,826,827,
  	5,87,0,0,827,933,5,111,0,0,828,829,5,92,0,0,829,830,5,131,0,0,830,831,
  	7,10,0,0,831,832,3,162,81,0,832,833,5,34,0,0,833,834,3,116,58,0,834,835,
  	5,150,0,0,835,933,1,0,0,0,836,837,3,156,78,0,837,839,5,131,0,0,838,840,
  	3,114,57,0,839,838,1,0,0,0,839,840,1,0,0,0,840,841,1,0,0,0,841,842,5,
  	150,0,0,842,851,1,0,0,0,843,845,5,131,0,0,844,846,5,24,0,0,845,844,1,
  	0,0,0,845,846,1,0,0,0,846,848,1,0,0,0,847,849,3,114,57,0,848,847,1,0,
  	0,0,848,849,1,0,0,0,849,850,1,0,0,0,850,852,5,150,0,0,851,843,1,0,0,0,
  	851,852,1,0,0,0,852,853,1,0,0,0,853,854,5,67,0,0,854,855,5,131,0,0,855,
  	856,3,98,49,0,856,857,5,150,0,0,857,933,1,0,0,0,858,859,3,156,78,0,859,
  	861,5,131,0,0,860,862,3,114,57,0,861,860,1,0,0,0,861,862,1,0,0,0,862,
  	863,1,0,0,0,863,864,5,150,0,0,864,873,1,0,0,0,865,867,5,131,0,0,866,868,
  	5,24,0,0,867,866,1,0,0,0,867,868,1,0,0,0,868,870,1,0,0,0,869,871,3,114,
  	57,0,870,869,1,0,0,0,870,871,1,0,0,0,871,872,1,0,0,0,872,874,5,150,0,
  	0,873,865,1,0,0,0,873,874,1,0,0,0,874,875,1,0,0,0,875,876,5,67,0,0,876,
  	877,3,156,78,0,877,933,1,0,0,0,878,884,3,156,78,0,879,881,5,131,0,0,880,
  	882,3,114,57,0,881,880,1,0,0,0,881,882,1,0,0,0,882,883,1,0,0,0,883,885,
  	5,150,0,0,884,879,1,0,0,0,884,885,1,0,0,0,885,886,1,0,0,0,886,888,5,131,
  	0,0,887,889,5,24,0,0,888,887,1,0,0,0,888,889,1,0,0,0,889,891,1,0,0,0,
  	890,892,3,114,57,0,891,890,1,0,0,0,891,892,1,0,0,0,892,893,1,0,0,0,893,
  	894,5,150,0,0,894,933,1,0,0,0,895,933,3,120,60,0,896,933,3,164,82,0,897,
  	933,3,146,73,0,898,899,5,119,0,0,899,933,3,116,58,20,900,901,5,59,0,0,
  	901,933,3,116,58,14,902,903,3,136,68,0,903,904,5,121,0,0,904,906,1,0,
  	0,0,905,902,1,0,0,0,905,906,1,0,0,0,906,907,1,0,0,0,907,933,5,113,0,0,
  	908,909,5,131,0,0,909,910,3,44,22,0,910,911,5,150,0,0,911,933,1,0,0,0,
  	912,913,5,131,0,0,913,914,3,116,58,0,914,915,5,150,0,0,915,933,1,0,0,
  	0,916,917,5,131,0,0,917,918,3,114,57,0,918,919,5,150,0,0,919,933,1,0,
  	0,0,920,922,5,130,0,0,921,923,3,114,57,0,922,921,1,0,0,0,922,923,1,0,
  	0,0,923,924,1,0,0,0,924,933,5,149,0,0,925,927,5,129,0,0,926,928,3,40,
  	20,0,927,926,1,0,0,0,927,928,1,0,0,0,928,929,1,0,0,0,929,933,5,148,0,
  	0,930,933,3,118,59,0,931,933,3,128,64,0,932,782,1,0,0,0,932,802,1,0,0,
  	0,932,809,1,0,0,0,932,811,1,0,0,0,932,815,1,0,0,0,932,826,1,0,0,0,932,
  	828,1,0,0,0,932,836,1,0,0,0,932,858,1,0,0,0,932,878,1,0,0,0,932,895,1,
  	0,0,0,932,896,1,0,0,0,932,897,1,0,0,0,932,898,1,0,0,0,932,900,1,0,0,0,
  	932,905,1,0,0,0,932,908,1,0,0,0,932,912,1,0,0,0,932,916,1,0,0,0,932,920,
  	1,0,0,0,932,925,1,0,0,0,932,930,1,0,0,0,932,931,1,0,0,0,933,1044,1,0,
  	0,0,934,938,10,19,0,0,935,939,5,113,0,0,936,939,5,152,0,0,937,939,5,139,
  	0,0,938,935,1,0,0,0,938,936,1,0,0,0,938,937,1,0,0,0,939,940,1,0,0,0,940,
  	1043,3,116,58,20,941,945,10,18,0,0,942,946,5,140,0,0,943,946,5,119,0,
  	0,944,946,5,118,0,0,945,942,1,0,0,0,945,943,1,0,0,0,945,944,1,0,0,0,946,
  	947,1,0,0,0,947,1043,3,116,58,19,948,973,10,17,0,0,949,974,5,122,0,0,
  	950,974,5,123,0,0,951,974,5,134,0,0,952,974,5,132,0,0,953,974,5,133,0,
  	0,954,974,5,124,0,0,955,974,5,125,0,0,956,958,5,59,0,0,957,956,1,0,0,
  	0,957,958,1,0,0,0,958,959,1,0,0,0,959,961,5,43,0,0,960,962,5,15,0,0,961,
  	960,1,0,0,0,961,962,1,0,0,0,962,974,1,0,0,0,963,965,5,59,0,0,964,963,
  	1,0,0,0,964,965,1,0,0,0,965,966,1,0,0,0,966,974,7,11,0,0,967,974,5,146,
  	0,0,968,974,5,147,0,0,969,974,5,136,0,0,970,974,5,127,0,0,971,974,5,128,
  	0,0,972,974,5,135,0,0,973,949,1,0,0,0,973,950,1,0,0,0,973,951,1,0,0,0,
  	973,952,1,0,0,0,973,953,1,0,0,0,973,954,1,0,0,0,973,955,1,0,0,0,973,957,
  	1,0,0,0,973,964,1,0,0,0,973,967,1,0,0,0,973,968,1,0,0,0,973,969,1,0,0,
  	0,973,970,1,0,0,0,973,971,1,0,0,0,973,972,1,0,0,0,974,975,1,0,0,0,975,
  	1043,3,116,58,18,976,977,10,15,0,0,977,978,5,138,0,0,978,1043,3,116,58,
  	16,979,980,10,13,0,0,980,981,5,2,0,0,981,1043,3,116,58,14,982,983,10,
  	12,0,0,983,984,5,64,0,0,984,1043,3,116,58,13,985,987,10,11,0,0,986,988,
  	5,59,0,0,987,986,1,0,0,0,987,988,1,0,0,0,988,989,1,0,0,0,989,990,5,9,
  	0,0,990,991,3,116,58,0,991,992,5,2,0,0,992,993,3,116,58,12,993,1043,1,
  	0,0,0,994,995,10,10,0,0,995,996,5,141,0,0,996,997,3,116,58,0,997,998,
  	5,116,0,0,998,999,3,116,58,10,999,1043,1,0,0,0,1000,1001,10,30,0,0,1001,
  	1003,5,131,0,0,1002,1004,3,114,57,0,1003,1002,1,0,0,0,1003,1004,1,0,0,
  	0,1004,1005,1,0,0,0,1005,1043,5,150,0,0,1006,1007,10,26,0,0,1007,1008,
  	5,130,0,0,1008,1009,3,116,58,0,1009,1010,5,149,0,0,1010,1043,1,0,0,0,
  	1011,1012,10,25,0,0,1012,1013,5,121,0,0,1013,1043,5,109,0,0,1014,1015,
  	10,24,0,0,1015,1016,5,121,0,0,1016,1043,3,156,78,0,1017,1018,10,23,0,
  	0,1018,1019,5,137,0,0,1019,1020,5,130,0,0,1020,1021,3,116,58,0,1021,1022,
  	5,149,0,0,1022,1043,1,0,0,0,1023,1024,10,22,0,0,1024,1025,5,137,0,0,1025,
  	1043,5,109,0,0,1026,1027,10,21,0,0,1027,1028,5,137,0,0,1028,1043,3,156,
  	78,0,1029,1030,10,16,0,0,1030,1032,5,47,0,0,1031,1033,5,59,0,0,1032,1031,
  	1,0,0,0,1032,1033,1,0,0,0,1033,1034,1,0,0,0,1034,1043,5,60,0,0,1035,1040,
  	10,9,0,0,1036,1037,5,6,0,0,1037,1041,3,156,78,0,1038,1039,5,6,0,0,1039,
  	1041,5,111,0,0,1040,1036,1,0,0,0,1040,1038,1,0,0,0,1041,1043,1,0,0,0,
  	1042,934,1,0,0,0,1042,941,1,0,0,0,1042,948,1,0,0,0,1042,976,1,0,0,0,1042,
  	979,1,0,0,0,1042,982,1,0,0,0,1042,985,1,0,0,0,1042,994,1,0,0,0,1042,1000,
  	1,0,0,0,1042,1006,1,0,0,0,1042,1011,1,0,0,0,1042,1014,1,0,0,0,1042,1017,
  	1,0,0,0,1042,1023,1,0,0,0,1042,1026,1,0,0,0,1042,1029,1,0,0,0,1042,1035,
  	1,0,0,0,1043,1046,1,0,0,0,1044,1042,1,0,0,0,1044,1045,1,0,0,0,1045,117,
  	1,0,0,0,1046,1044,1,0,0,0,1047,1048,5,131,0,0,1048,1053,3,156,78,0,1049,
  	1050,5,117,0,0,1050,1052,3,156,78,0,1051,1049,1,0,0,0,1052,1055,1,0,0,
  	0,1053,1051,1,0,0,0,1053,1054,1,0,0,0,1054,1057,1,0,0,0,1055,1053,1,0,
  	0,0,1056,1058,5,117,0,0,1057,1056,1,0,0,0,1057,1058,1,0,0,0,1058,1059,
  	1,0,0,0,1059,1060,5,150,0,0,1060,1075,1,0,0,0,1061,1066,3,156,78,0,1062,
  	1063,5,117,0,0,1063,1065,3,156,78,0,1064,1062,1,0,0,0,1065,1068,1,0,0,
  	0,1066,1064,1,0,0,0,1066,1067,1,0,0,0,1067,1070,1,0,0,0,1068,1066,1,0,
  	0,0,1069,1071,5,117,0,0,1070,1069,1,0,0,0,1070,1071,1,0,0,0,1071,1075,
  	1,0,0,0,1072,1073,5,131,0,0,1073,1075,5,150,0,0,1074,1047,1,0,0,0,1074,
  	1061,1,0,0,0,1074,1072,1,0,0,0,1075,1076,1,0,0,0,1076,1079,5,112,0,0,
  	1077,1080,3,116,58,0,1078,1080,3,36,18,0,1079,1077,1,0,0,0,1079,1078,
  	1,0,0,0,1080,119,1,0,0,0,1081,1082,5,133,0,0,1082,1086,3,156,78,0,1083,
  	1085,3,122,61,0,1084,1083,1,0,0,0,1085,1088,1,0,0,0,1086,1084,1,0,0,0,
  	1086,1087,1,0,0,0,1087,1089,1,0,0,0,1088,1086,1,0,0,0,1089,1090,5,152,
  	0,0,1090,1091,5,125,0,0,1091,1114,1,0,0,0,1092,1093,5,133,0,0,1093,1097,
  	3,156,78,0,1094,1096,3,122,61,0,1095,1094,1,0,0,0,1096,1099,1,0,0,0,1097,
  	1095,1,0,0,0,1097,1098,1,0,0,0,1098,1100,1,0,0,0,1099,1097,1,0,0,0,1100,
  	1106,5,125,0,0,1101,1107,3,120,60,0,1102,1103,5,129,0,0,1103,1104,3,116,
  	58,0,1104,1105,5,148,0,0,1105,1107,1,0,0,0,1106,1101,1,0,0,0,1106,1102,
  	1,0,0,0,1106,1107,1,0,0,0,1107,1108,1,0,0,0,1108,1109,5,133,0,0,1109,
  	1110,5,152,0,0,1110,1111,3,156,78,0,1111,1112,5,125,0,0,1112,1114,1,0,
  	0,0,1113,1081,1,0,0,0,1113,1092,1,0,0,0,1114,121,1,0,0,0,1115,1116,3,
  	156,78,0,1116,1117,5,123,0,0,1117,1118,3,162,81,0,1118,1127,1,0,0,0,1119,
  	1120,3,156,78,0,1120,1121,5,123,0,0,1121,1122,5,129,0,0,1122,1123,3,116,
  	58,0,1123,1124,5,148,0,0,1124,1127,1,0,0,0,1125,1127,3,156,78,0,1126,
  	1115,1,0,0,0,1126,1119,1,0,0,0,1126,1125,1,0,0,0,1127,123,1,0,0,0,1128,
  	1133,3,126,63,0,1129,1130,5,117,0,0,1130,1132,3,126,63,0,1131,1129,1,
  	0,0,0,1132,1135,1,0,0,0,1133,1131,1,0,0,0,1133,1134,1,0,0,0,1134,1137,
  	1,0,0,0,1135,1133,1,0,0,0,1136,1138,5,117,0,0,1137,1136,1,0,0,0,1137,
  	1138,1,0,0,0,1138,125,1,0,0,0,1139,1140,3,156,78,0,1140,1141,5,6,0,0,
  	1141,1142,5,131,0,0,1142,1143,3,44,22,0,1143,1144,5,150,0,0,1144,1150,
  	1,0,0,0,1145,1146,3,116,58,0,1146,1147,5,6,0,0,1147,1148,3,156,78,0,1148,
  	1150,1,0,0,0,1149,1139,1,0,0,0,1149,1145,1,0,0,0,1150,127,1,0,0,0,1151,
  	1159,3,160,80,0,1152,1153,3,136,68,0,1153,1154,5,121,0,0,1154,1156,1,
  	0,0,0,1155,1152,1,0,0,0,1155,1156,1,0,0,0,1156,1157,1,0,0,0,1157,1159,
  	3,130,65,0,1158,1151,1,0,0,0,1158,1155,1,0,0,0,1159,129,1,0,0,0,1160,
  	1165,3,156,78,0,1161,1162,5,121,0,0,1162,1164,3,156,78,0,1163,1161,1,
  	0,0,0,1164,1167,1,0,0,0,1165,1163,1,0,0,0,1165,1166,1,0,0,0,1166,131,
  	1,0,0,0,1167,1165,1,0,0,0,1168,1169,6,66,-1,0,1169,1178,3,136,68,0,1170,
  	1178,3,134,67,0,1171,1172,5,131,0,0,1172,1173,3,44,22,0,1173,1174,5,150,
  	0,0,1174,1178,1,0,0,0,1175,1178,3,120,60,0,1176,1178,3,160,80,0,1177,
  	1168,1,0,0,0,1177,1170,1,0,0,0,1177,1171,1,0,0,0,1177,1175,1,0,0,0,1177,
  	1176,1,0,0,0,1178,1187,1,0,0,0,1179,1183,10,3,0,0,1180,1184,3,154,77,
  	0,1181,1182,5,6,0,0,1182,1184,3,156,78,0,1183,1180,1,0,0,0,1183,1181,
  	1,0,0,0,1184,1186,1,0,0,0,1185,1179,1,0,0,0,1186,1189,1,0,0,0,1187,1185,
  	1,0,0,0,1187,1188,1,0,0,0,1188,133,1,0,0,0,1189,1187,1,0,0,0,1190,1191,
  	3,156,78,0,1191,1193,5,131,0,0,1192,1194,3,138,69,0,1193,1192,1,0,0,0,
  	1193,1194,1,0,0,0,1194,1195,1,0,0,0,1195,1196,5,150,0,0,1196,135,1,0,
  	0,0,1197,1198,3,140,70,0,1198,1199,5,121,0,0,1199,1201,1,0,0,0,1200,1197,
  	1,0,0,0,1200,1201,1,0,0,0,1201,1202,1,0,0,0,1202,1203,3,156,78,0,1203,
  	137,1,0,0,0,1204,1209,3,116,58,0,1205,1206,5,117,0,0,1206,1208,3,116,
  	58,0,1207,1205,1,0,0,0,1208,1211,1,0,0,0,1209,1207,1,0,0,0,1209,1210,
  	1,0,0,0,1210,1213,1,0,0,0,1211,1209,1,0,0,0,1212,1214,5,117,0,0,1213,
  	1212,1,0,0,0,1213,1214,1,0,0,0,1214,139,1,0,0,0,1215,1216,3,156,78,0,
  	1216,141,1,0,0,0,1217,1226,5,107,0,0,1218,1219,5,121,0,0,1219,1226,7,
  	12,0,0,1220,1221,5,109,0,0,1221,1223,5,121,0,0,1222,1224,7,12,0,0,1223,
  	1222,1,0,0,0,1223,1224,1,0,0,0,1224,1226,1,0,0,0,1225,1217,1,0,0,0,1225,
  	1218,1,0,0,0,1225,1220,1,0,0,0,1226,143,1,0,0,0,1227,1229,7,13,0,0,1228,
  	1227,1,0,0,0,1228,1229,1,0,0,0,1229,1236,1,0,0,0,1230,1237,3,142,71,0,
  	1231,1237,5,108,0,0,1232,1237,5,109,0,0,1233,1237,5,110,0,0,1234,1237,
  	5,44,0,0,1235,1237,5,58,0,0,1236,1230,1,0,0,0,1236,1231,1,0,0,0,1236,
  	1232,1,0,0,0,1236,1233,1,0,0,0,1236,1234,1,0,0,0,1236,1235,1,0,0,0,1237,
  	145,1,0,0,0,1238,1242,3,144,72,0,1239,1242,5,111,0,0,1240,1242,5,60,0,
  	0,1241,1238,1,0,0,0,1241,1239,1,0,0,0,1241,1240,1,0,0,0,1242,147,1,0,
  	0,0,1243,1244,7,14,0,0,1244,149,1,0,0,0,1245,1246,7,15,0,0,1246,151,1,
  	0,0,0,1247,1248,7,16,0,0,1248,153,1,0,0,0,1249,1252,5,106,0,0,1250,1252,
  	3,152,76,0,1251,1249,1,0,0,0,1251,1250,1,0,0,0,1252,155,1,0,0,0,1253,
  	1257,5,106,0,0,1254,1257,3,148,74,0,1255,1257,3,150,75,0,1256,1253,1,
  	0,0,0,1256,1254,1,0,0,0,1256,1255,1,0,0,0,1257,157,1,0,0,0,1258,1259,
  	3,162,81,0,1259,1260,5,123,0,0,1260,1261,3,144,72,0,1261,159,1,0,0,0,
  	1262,1263,5,129,0,0,1263,1264,3,116,58,0,1264,1265,5,148,0,0,1265,161,
  	1,0,0,0,1266,1269,5,111,0,0,1267,1269,3,164,82,0,1268,1266,1,0,0,0,1268,
  	1267,1,0,0,0,1269,163,1,0,0,0,1270,1274,5,143,0,0,1271,1273,3,166,83,
  	0,1272,1271,1,0,0,0,1273,1276,1,0,0,0,1274,1272,1,0,0,0,1274,1275,1,0,
  	0,0,1275,1277,1,0,0,0,1276,1274,1,0,0,0,1277,1278,5,145,0,0,1278,165,
  	1,0,0,0,1279,1280,5,158,0,0,1280,1281,3,116,58,0,1281,1282,5,148,0,0,
  	1282,1285,1,0,0,0,1283,1285,5,157,0,0,1284,1279,1,0,0,0,1284,1283,1,0,
  	0,0,1285,167,1,0,0,0,1286,1290,5,144,0,0,1287,1289,3,170,85,0,1288,1287,
  	1,0,0,0,1289,1292,1,0,0,0,1290,1288,1,0,0,0,1290,1291,1,0,0,0,1291,1293,
  	1,0,0,0,1292,1290,1,0,0,0,1293,1294,5,0,0,1,1294,169,1,0,0,0,1295,1296,
  	5,160,0,0,1296,1297,3,116,58,0,1297,1298,5,148,0,0,1298,1301,1,0,0,0,
  	1299,1301,5,159,0,0,1300,1295,1,0,0,0,1300,1299,1,0,0,0,1301,171,1,0,
  	0,0,167,175,182,191,198,202,216,220,223,227,230,237,241,250,255,264,272,
  	279,283,289,294,302,309,315,327,335,349,353,358,368,377,380,384,387,391,
  	394,397,400,403,407,411,414,417,420,424,427,436,442,463,480,497,503,509,
  	520,522,533,536,542,550,556,558,562,567,570,573,577,581,584,586,589,593,
  	597,600,602,604,609,620,626,633,638,642,646,652,654,661,669,672,675,694,
  	708,724,728,739,743,754,758,765,769,776,780,785,794,798,822,839,845,848,
  	851,861,867,870,873,881,884,888,891,905,922,927,932,938,945,957,961,964,
  	973,987,1003,1032,1040,1042,1044,1053,1057,1066,1070,1074,1079,1086,1097,
  	1106,1113,1126,1133,1137,1149,1155,1158,1165,1177,1183,1187,1193,1200,
  	1209,1213,1223,1225,1228,1236,1241,1251,1256,1268,1274,1284,1290,1300
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  torqlparserParserStaticData = std::move(staticData);
}

}

TorQLParser::TorQLParser(TokenStream *input) : TorQLParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

TorQLParser::TorQLParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  TorQLParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *torqlparserParserStaticData->atn, torqlparserParserStaticData->decisionToDFA, torqlparserParserStaticData->sharedContextCache, options);
}

TorQLParser::~TorQLParser() {
  delete _interpreter;
}

const atn::ATN& TorQLParser::getATN() const {
  return *torqlparserParserStaticData->atn;
}

std::string TorQLParser::getGrammarFileName() const {
  return "TorQLParser.g4";
}

const std::vector<std::string>& TorQLParser::getRuleNames() const {
  return torqlparserParserStaticData->ruleNames;
}

const dfa::Vocabulary& TorQLParser::getVocabulary() const {
  return torqlparserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView TorQLParser::getSerializedATN() const {
  return torqlparserParserStaticData->serializedATN;
}


//----------------- ProgramContext ------------------------------------------------------------------

TorQLParser::ProgramContext::ProgramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::ProgramContext::EOF() {
  return getToken(TorQLParser::EOF, 0);
}

std::vector<TorQLParser::DeclarationContext *> TorQLParser::ProgramContext::declaration() {
  return getRuleContexts<TorQLParser::DeclarationContext>();
}

TorQLParser::DeclarationContext* TorQLParser::ProgramContext::declaration(size_t i) {
  return getRuleContext<TorQLParser::DeclarationContext>(i);
}


size_t TorQLParser::ProgramContext::getRuleIndex() const {
  return TorQLParser::RuleProgram;
}


std::any TorQLParser::ProgramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitProgram(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::ProgramContext* TorQLParser::program() {
  ProgramContext *_localctx = _tracker.createInstance<ProgramContext>(_ctx, getState());
  enterRule(_localctx, 0, TorQLParser::RuleProgram);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(175);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -536887298) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 180986211001696255) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 4212759) != 0)) {
      setState(172);
      declaration();
      setState(177);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(178);
    match(TorQLParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclarationContext ------------------------------------------------------------------

TorQLParser::DeclarationContext::DeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

TorQLParser::VarDeclContext* TorQLParser::DeclarationContext::varDecl() {
  return getRuleContext<TorQLParser::VarDeclContext>(0);
}

TorQLParser::StatementContext* TorQLParser::DeclarationContext::statement() {
  return getRuleContext<TorQLParser::StatementContext>(0);
}


size_t TorQLParser::DeclarationContext::getRuleIndex() const {
  return TorQLParser::RuleDeclaration;
}


std::any TorQLParser::DeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitDeclaration(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::DeclarationContext* TorQLParser::declaration() {
  DeclarationContext *_localctx = _tracker.createInstance<DeclarationContext>(_ctx, getState());
  enterRule(_localctx, 2, TorQLParser::RuleDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(182);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case TorQLParser::LET: {
        enterOuterAlt(_localctx, 1);
        setState(180);
        varDecl();
        break;
      }

      case TorQLParser::ALL:
      case TorQLParser::AND:
      case TorQLParser::ANTI:
      case TorQLParser::ANY:
      case TorQLParser::ARRAY:
      case TorQLParser::AS:
      case TorQLParser::ASCENDING:
      case TorQLParser::ASOF:
      case TorQLParser::BETWEEN:
      case TorQLParser::BOTH:
      case TorQLParser::BY:
      case TorQLParser::CASE:
      case TorQLParser::CAST:
      case TorQLParser::COHORT:
      case TorQLParser::COLLATE:
      case TorQLParser::CROSS:
      case TorQLParser::CUBE:
      case TorQLParser::CURRENT:
      case TorQLParser::DATE:
      case TorQLParser::DAY:
      case TorQLParser::DESC:
      case TorQLParser::DESCENDING:
      case TorQLParser::DISTINCT:
      case TorQLParser::ELSE:
      case TorQLParser::END:
      case TorQLParser::EXTRACT:
      case TorQLParser::FINAL:
      case TorQLParser::FIRST:
      case TorQLParser::FN:
      case TorQLParser::FOLLOWING:
      case TorQLParser::FOR:
      case TorQLParser::FROM:
      case TorQLParser::FULL:
      case TorQLParser::FUN:
      case TorQLParser::GROUP:
      case TorQLParser::HAVING:
      case TorQLParser::HOUR:
      case TorQLParser::ID:
      case TorQLParser::IF:
      case TorQLParser::ILIKE:
      case TorQLParser::IN:
      case TorQLParser::INF:
      case TorQLParser::INNER:
      case TorQLParser::INTERVAL:
      case TorQLParser::IS:
      case TorQLParser::JOIN:
      case TorQLParser::KEY:
      case TorQLParser::LAST:
      case TorQLParser::LEADING:
      case TorQLParser::LEFT:
      case TorQLParser::LIKE:
      case TorQLParser::LIMIT:
      case TorQLParser::MINUTE:
      case TorQLParser::MONTH:
      case TorQLParser::NAN_SQL:
      case TorQLParser::NOT:
      case TorQLParser::NULL_SQL:
      case TorQLParser::NULLS:
      case TorQLParser::OFFSET:
      case TorQLParser::ON:
      case TorQLParser::OR:
      case TorQLParser::ORDER:
      case TorQLParser::OUTER:
      case TorQLParser::OVER:
      case TorQLParser::PARTITION:
      case TorQLParser::PRECEDING:
      case TorQLParser::PREWHERE:
      case TorQLParser::QUARTER:
      case TorQLParser::RANGE:
      case TorQLParser::RETURN:
      case TorQLParser::RIGHT:
      case TorQLParser::ROLLUP:
      case TorQLParser::ROW:
      case TorQLParser::ROWS:
      case TorQLParser::SAMPLE:
      case TorQLParser::SECOND:
      case TorQLParser::SELECT:
      case TorQLParser::SEMI:
      case TorQLParser::SETTINGS:
      case TorQLParser::SUBSTRING:
      case TorQLParser::THEN:
      case TorQLParser::THROW:
      case TorQLParser::TIES:
      case TorQLParser::TIMESTAMP:
      case TorQLParser::TO:
      case TorQLParser::TOP:
      case TorQLParser::TOTALS:
      case TorQLParser::TRAILING:
      case TorQLParser::TRIM:
      case TorQLParser::TRUNCATE:
      case TorQLParser::TRY:
      case TorQLParser::UNBOUNDED:
      case TorQLParser::UNION:
      case TorQLParser::USING:
      case TorQLParser::WEEK:
      case TorQLParser::WHEN:
      case TorQLParser::WHERE:
      case TorQLParser::WHILE:
      case TorQLParser::WINDOW:
      case TorQLParser::WITH:
      case TorQLParser::YEAR:
      case TorQLParser::IDENTIFIER:
      case TorQLParser::FLOATING_LITERAL:
      case TorQLParser::OCTAL_LITERAL:
      case TorQLParser::DECIMAL_LITERAL:
      case TorQLParser::HEXADECIMAL_LITERAL:
      case TorQLParser::STRING_LITERAL:
      case TorQLParser::ASTERISK:
      case TorQLParser::DASH:
      case TorQLParser::DOT:
      case TorQLParser::LBRACE:
      case TorQLParser::LBRACKET:
      case TorQLParser::LPAREN:
      case TorQLParser::LT:
      case TorQLParser::PLUS:
      case TorQLParser::QUOTE_SINGLE_TEMPLATE:
      case TorQLParser::SEMICOLON: {
        enterOuterAlt(_localctx, 2);
        setState(181);
        statement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

TorQLParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

TorQLParser::ColumnExprContext* TorQLParser::ExpressionContext::columnExpr() {
  return getRuleContext<TorQLParser::ColumnExprContext>(0);
}


size_t TorQLParser::ExpressionContext::getRuleIndex() const {
  return TorQLParser::RuleExpression;
}


std::any TorQLParser::ExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitExpression(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::ExpressionContext* TorQLParser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 4, TorQLParser::RuleExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(184);
    columnExpr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VarDeclContext ------------------------------------------------------------------

TorQLParser::VarDeclContext::VarDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::VarDeclContext::LET() {
  return getToken(TorQLParser::LET, 0);
}

TorQLParser::IdentifierContext* TorQLParser::VarDeclContext::identifier() {
  return getRuleContext<TorQLParser::IdentifierContext>(0);
}

tree::TerminalNode* TorQLParser::VarDeclContext::COLON() {
  return getToken(TorQLParser::COLON, 0);
}

tree::TerminalNode* TorQLParser::VarDeclContext::EQ_SINGLE() {
  return getToken(TorQLParser::EQ_SINGLE, 0);
}

TorQLParser::ExpressionContext* TorQLParser::VarDeclContext::expression() {
  return getRuleContext<TorQLParser::ExpressionContext>(0);
}


size_t TorQLParser::VarDeclContext::getRuleIndex() const {
  return TorQLParser::RuleVarDecl;
}


std::any TorQLParser::VarDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitVarDecl(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::VarDeclContext* TorQLParser::varDecl() {
  VarDeclContext *_localctx = _tracker.createInstance<VarDeclContext>(_ctx, getState());
  enterRule(_localctx, 6, TorQLParser::RuleVarDecl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(186);
    match(TorQLParser::LET);
    setState(187);
    identifier();
    setState(191);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == TorQLParser::COLON) {
      setState(188);
      match(TorQLParser::COLON);
      setState(189);
      match(TorQLParser::EQ_SINGLE);
      setState(190);
      expression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierListContext ------------------------------------------------------------------

TorQLParser::IdentifierListContext::IdentifierListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<TorQLParser::IdentifierContext *> TorQLParser::IdentifierListContext::identifier() {
  return getRuleContexts<TorQLParser::IdentifierContext>();
}

TorQLParser::IdentifierContext* TorQLParser::IdentifierListContext::identifier(size_t i) {
  return getRuleContext<TorQLParser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> TorQLParser::IdentifierListContext::COMMA() {
  return getTokens(TorQLParser::COMMA);
}

tree::TerminalNode* TorQLParser::IdentifierListContext::COMMA(size_t i) {
  return getToken(TorQLParser::COMMA, i);
}


size_t TorQLParser::IdentifierListContext::getRuleIndex() const {
  return TorQLParser::RuleIdentifierList;
}


std::any TorQLParser::IdentifierListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitIdentifierList(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::IdentifierListContext* TorQLParser::identifierList() {
  IdentifierListContext *_localctx = _tracker.createInstance<IdentifierListContext>(_ctx, getState());
  enterRule(_localctx, 8, TorQLParser::RuleIdentifierList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(193);
    identifier();
    setState(198);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(194);
        match(TorQLParser::COMMA);
        setState(195);
        identifier(); 
      }
      setState(200);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx);
    }
    setState(202);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == TorQLParser::COMMA) {
      setState(201);
      match(TorQLParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

TorQLParser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

TorQLParser::ReturnStmtContext* TorQLParser::StatementContext::returnStmt() {
  return getRuleContext<TorQLParser::ReturnStmtContext>(0);
}

TorQLParser::ThrowStmtContext* TorQLParser::StatementContext::throwStmt() {
  return getRuleContext<TorQLParser::ThrowStmtContext>(0);
}

TorQLParser::TryCatchStmtContext* TorQLParser::StatementContext::tryCatchStmt() {
  return getRuleContext<TorQLParser::TryCatchStmtContext>(0);
}

TorQLParser::IfStmtContext* TorQLParser::StatementContext::ifStmt() {
  return getRuleContext<TorQLParser::IfStmtContext>(0);
}

TorQLParser::WhileStmtContext* TorQLParser::StatementContext::whileStmt() {
  return getRuleContext<TorQLParser::WhileStmtContext>(0);
}

TorQLParser::ForInStmtContext* TorQLParser::StatementContext::forInStmt() {
  return getRuleContext<TorQLParser::ForInStmtContext>(0);
}

TorQLParser::ForStmtContext* TorQLParser::StatementContext::forStmt() {
  return getRuleContext<TorQLParser::ForStmtContext>(0);
}

TorQLParser::FuncStmtContext* TorQLParser::StatementContext::funcStmt() {
  return getRuleContext<TorQLParser::FuncStmtContext>(0);
}

TorQLParser::VarAssignmentContext* TorQLParser::StatementContext::varAssignment() {
  return getRuleContext<TorQLParser::VarAssignmentContext>(0);
}

TorQLParser::BlockContext* TorQLParser::StatementContext::block() {
  return getRuleContext<TorQLParser::BlockContext>(0);
}

TorQLParser::ExprStmtContext* TorQLParser::StatementContext::exprStmt() {
  return getRuleContext<TorQLParser::ExprStmtContext>(0);
}

TorQLParser::EmptyStmtContext* TorQLParser::StatementContext::emptyStmt() {
  return getRuleContext<TorQLParser::EmptyStmtContext>(0);
}


size_t TorQLParser::StatementContext::getRuleIndex() const {
  return TorQLParser::RuleStatement;
}


std::any TorQLParser::StatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitStatement(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::StatementContext* TorQLParser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 10, TorQLParser::RuleStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(216);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(204);
      returnStmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(205);
      throwStmt();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(206);
      tryCatchStmt();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(207);
      ifStmt();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(208);
      whileStmt();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(209);
      forInStmt();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(210);
      forStmt();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(211);
      funcStmt();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(212);
      varAssignment();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(213);
      block();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(214);
      exprStmt();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(215);
      emptyStmt();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReturnStmtContext ------------------------------------------------------------------

TorQLParser::ReturnStmtContext::ReturnStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::ReturnStmtContext::RETURN() {
  return getToken(TorQLParser::RETURN, 0);
}

TorQLParser::ExpressionContext* TorQLParser::ReturnStmtContext::expression() {
  return getRuleContext<TorQLParser::ExpressionContext>(0);
}

tree::TerminalNode* TorQLParser::ReturnStmtContext::SEMICOLON() {
  return getToken(TorQLParser::SEMICOLON, 0);
}


size_t TorQLParser::ReturnStmtContext::getRuleIndex() const {
  return TorQLParser::RuleReturnStmt;
}


std::any TorQLParser::ReturnStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitReturnStmt(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::ReturnStmtContext* TorQLParser::returnStmt() {
  ReturnStmtContext *_localctx = _tracker.createInstance<ReturnStmtContext>(_ctx, getState());
  enterRule(_localctx, 12, TorQLParser::RuleReturnStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(218);
    match(TorQLParser::RETURN);
    setState(220);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx)) {
    case 1: {
      setState(219);
      expression();
      break;
    }

    default:
      break;
    }
    setState(223);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx)) {
    case 1: {
      setState(222);
      match(TorQLParser::SEMICOLON);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ThrowStmtContext ------------------------------------------------------------------

TorQLParser::ThrowStmtContext::ThrowStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::ThrowStmtContext::THROW() {
  return getToken(TorQLParser::THROW, 0);
}

TorQLParser::ExpressionContext* TorQLParser::ThrowStmtContext::expression() {
  return getRuleContext<TorQLParser::ExpressionContext>(0);
}

tree::TerminalNode* TorQLParser::ThrowStmtContext::SEMICOLON() {
  return getToken(TorQLParser::SEMICOLON, 0);
}


size_t TorQLParser::ThrowStmtContext::getRuleIndex() const {
  return TorQLParser::RuleThrowStmt;
}


std::any TorQLParser::ThrowStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitThrowStmt(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::ThrowStmtContext* TorQLParser::throwStmt() {
  ThrowStmtContext *_localctx = _tracker.createInstance<ThrowStmtContext>(_ctx, getState());
  enterRule(_localctx, 14, TorQLParser::RuleThrowStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(225);
    match(TorQLParser::THROW);
    setState(227);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx)) {
    case 1: {
      setState(226);
      expression();
      break;
    }

    default:
      break;
    }
    setState(230);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx)) {
    case 1: {
      setState(229);
      match(TorQLParser::SEMICOLON);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatchBlockContext ------------------------------------------------------------------

TorQLParser::CatchBlockContext::CatchBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::CatchBlockContext::CATCH() {
  return getToken(TorQLParser::CATCH, 0);
}

TorQLParser::BlockContext* TorQLParser::CatchBlockContext::block() {
  return getRuleContext<TorQLParser::BlockContext>(0);
}

tree::TerminalNode* TorQLParser::CatchBlockContext::LPAREN() {
  return getToken(TorQLParser::LPAREN, 0);
}

tree::TerminalNode* TorQLParser::CatchBlockContext::RPAREN() {
  return getToken(TorQLParser::RPAREN, 0);
}

std::vector<TorQLParser::IdentifierContext *> TorQLParser::CatchBlockContext::identifier() {
  return getRuleContexts<TorQLParser::IdentifierContext>();
}

TorQLParser::IdentifierContext* TorQLParser::CatchBlockContext::identifier(size_t i) {
  return getRuleContext<TorQLParser::IdentifierContext>(i);
}

tree::TerminalNode* TorQLParser::CatchBlockContext::COLON() {
  return getToken(TorQLParser::COLON, 0);
}


size_t TorQLParser::CatchBlockContext::getRuleIndex() const {
  return TorQLParser::RuleCatchBlock;
}


std::any TorQLParser::CatchBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitCatchBlock(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::CatchBlockContext* TorQLParser::catchBlock() {
  CatchBlockContext *_localctx = _tracker.createInstance<CatchBlockContext>(_ctx, getState());
  enterRule(_localctx, 16, TorQLParser::RuleCatchBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(232);
    match(TorQLParser::CATCH);
    setState(241);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == TorQLParser::LPAREN) {
      setState(233);
      match(TorQLParser::LPAREN);
      setState(234);
      antlrcpp::downCast<CatchBlockContext *>(_localctx)->catchVar = identifier();
      setState(237);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == TorQLParser::COLON) {
        setState(235);
        match(TorQLParser::COLON);
        setState(236);
        antlrcpp::downCast<CatchBlockContext *>(_localctx)->catchType = identifier();
      }
      setState(239);
      match(TorQLParser::RPAREN);
    }
    setState(243);
    antlrcpp::downCast<CatchBlockContext *>(_localctx)->catchStmt = block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TryCatchStmtContext ------------------------------------------------------------------

TorQLParser::TryCatchStmtContext::TryCatchStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::TryCatchStmtContext::TRY() {
  return getToken(TorQLParser::TRY, 0);
}

std::vector<TorQLParser::BlockContext *> TorQLParser::TryCatchStmtContext::block() {
  return getRuleContexts<TorQLParser::BlockContext>();
}

TorQLParser::BlockContext* TorQLParser::TryCatchStmtContext::block(size_t i) {
  return getRuleContext<TorQLParser::BlockContext>(i);
}

std::vector<TorQLParser::CatchBlockContext *> TorQLParser::TryCatchStmtContext::catchBlock() {
  return getRuleContexts<TorQLParser::CatchBlockContext>();
}

TorQLParser::CatchBlockContext* TorQLParser::TryCatchStmtContext::catchBlock(size_t i) {
  return getRuleContext<TorQLParser::CatchBlockContext>(i);
}

tree::TerminalNode* TorQLParser::TryCatchStmtContext::FINALLY() {
  return getToken(TorQLParser::FINALLY, 0);
}


size_t TorQLParser::TryCatchStmtContext::getRuleIndex() const {
  return TorQLParser::RuleTryCatchStmt;
}


std::any TorQLParser::TryCatchStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitTryCatchStmt(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::TryCatchStmtContext* TorQLParser::tryCatchStmt() {
  TryCatchStmtContext *_localctx = _tracker.createInstance<TryCatchStmtContext>(_ctx, getState());
  enterRule(_localctx, 18, TorQLParser::RuleTryCatchStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(245);
    match(TorQLParser::TRY);
    setState(246);
    antlrcpp::downCast<TryCatchStmtContext *>(_localctx)->tryStmt = block();
    setState(250);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == TorQLParser::CATCH) {
      setState(247);
      catchBlock();
      setState(252);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(255);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == TorQLParser::FINALLY) {
      setState(253);
      match(TorQLParser::FINALLY);
      setState(254);
      antlrcpp::downCast<TryCatchStmtContext *>(_localctx)->finallyStmt = block();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfStmtContext ------------------------------------------------------------------

TorQLParser::IfStmtContext::IfStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::IfStmtContext::IF() {
  return getToken(TorQLParser::IF, 0);
}

tree::TerminalNode* TorQLParser::IfStmtContext::LPAREN() {
  return getToken(TorQLParser::LPAREN, 0);
}

TorQLParser::ExpressionContext* TorQLParser::IfStmtContext::expression() {
  return getRuleContext<TorQLParser::ExpressionContext>(0);
}

tree::TerminalNode* TorQLParser::IfStmtContext::RPAREN() {
  return getToken(TorQLParser::RPAREN, 0);
}

std::vector<TorQLParser::StatementContext *> TorQLParser::IfStmtContext::statement() {
  return getRuleContexts<TorQLParser::StatementContext>();
}

TorQLParser::StatementContext* TorQLParser::IfStmtContext::statement(size_t i) {
  return getRuleContext<TorQLParser::StatementContext>(i);
}

tree::TerminalNode* TorQLParser::IfStmtContext::ELSE() {
  return getToken(TorQLParser::ELSE, 0);
}


size_t TorQLParser::IfStmtContext::getRuleIndex() const {
  return TorQLParser::RuleIfStmt;
}


std::any TorQLParser::IfStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitIfStmt(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::IfStmtContext* TorQLParser::ifStmt() {
  IfStmtContext *_localctx = _tracker.createInstance<IfStmtContext>(_ctx, getState());
  enterRule(_localctx, 20, TorQLParser::RuleIfStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(257);
    match(TorQLParser::IF);
    setState(258);
    match(TorQLParser::LPAREN);
    setState(259);
    expression();
    setState(260);
    match(TorQLParser::RPAREN);
    setState(261);
    statement();
    setState(264);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 14, _ctx)) {
    case 1: {
      setState(262);
      match(TorQLParser::ELSE);
      setState(263);
      statement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhileStmtContext ------------------------------------------------------------------

TorQLParser::WhileStmtContext::WhileStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::WhileStmtContext::WHILE() {
  return getToken(TorQLParser::WHILE, 0);
}

tree::TerminalNode* TorQLParser::WhileStmtContext::LPAREN() {
  return getToken(TorQLParser::LPAREN, 0);
}

TorQLParser::ExpressionContext* TorQLParser::WhileStmtContext::expression() {
  return getRuleContext<TorQLParser::ExpressionContext>(0);
}

tree::TerminalNode* TorQLParser::WhileStmtContext::RPAREN() {
  return getToken(TorQLParser::RPAREN, 0);
}

TorQLParser::StatementContext* TorQLParser::WhileStmtContext::statement() {
  return getRuleContext<TorQLParser::StatementContext>(0);
}

tree::TerminalNode* TorQLParser::WhileStmtContext::SEMICOLON() {
  return getToken(TorQLParser::SEMICOLON, 0);
}


size_t TorQLParser::WhileStmtContext::getRuleIndex() const {
  return TorQLParser::RuleWhileStmt;
}


std::any TorQLParser::WhileStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitWhileStmt(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::WhileStmtContext* TorQLParser::whileStmt() {
  WhileStmtContext *_localctx = _tracker.createInstance<WhileStmtContext>(_ctx, getState());
  enterRule(_localctx, 22, TorQLParser::RuleWhileStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(266);
    match(TorQLParser::WHILE);
    setState(267);
    match(TorQLParser::LPAREN);
    setState(268);
    expression();
    setState(269);
    match(TorQLParser::RPAREN);
    setState(270);
    statement();
    setState(272);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 15, _ctx)) {
    case 1: {
      setState(271);
      match(TorQLParser::SEMICOLON);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForStmtContext ------------------------------------------------------------------

TorQLParser::ForStmtContext::ForStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::ForStmtContext::FOR() {
  return getToken(TorQLParser::FOR, 0);
}

tree::TerminalNode* TorQLParser::ForStmtContext::LPAREN() {
  return getToken(TorQLParser::LPAREN, 0);
}

std::vector<tree::TerminalNode *> TorQLParser::ForStmtContext::SEMICOLON() {
  return getTokens(TorQLParser::SEMICOLON);
}

tree::TerminalNode* TorQLParser::ForStmtContext::SEMICOLON(size_t i) {
  return getToken(TorQLParser::SEMICOLON, i);
}

tree::TerminalNode* TorQLParser::ForStmtContext::RPAREN() {
  return getToken(TorQLParser::RPAREN, 0);
}

TorQLParser::StatementContext* TorQLParser::ForStmtContext::statement() {
  return getRuleContext<TorQLParser::StatementContext>(0);
}

std::vector<TorQLParser::VarDeclContext *> TorQLParser::ForStmtContext::varDecl() {
  return getRuleContexts<TorQLParser::VarDeclContext>();
}

TorQLParser::VarDeclContext* TorQLParser::ForStmtContext::varDecl(size_t i) {
  return getRuleContext<TorQLParser::VarDeclContext>(i);
}

std::vector<TorQLParser::VarAssignmentContext *> TorQLParser::ForStmtContext::varAssignment() {
  return getRuleContexts<TorQLParser::VarAssignmentContext>();
}

TorQLParser::VarAssignmentContext* TorQLParser::ForStmtContext::varAssignment(size_t i) {
  return getRuleContext<TorQLParser::VarAssignmentContext>(i);
}

std::vector<TorQLParser::ExpressionContext *> TorQLParser::ForStmtContext::expression() {
  return getRuleContexts<TorQLParser::ExpressionContext>();
}

TorQLParser::ExpressionContext* TorQLParser::ForStmtContext::expression(size_t i) {
  return getRuleContext<TorQLParser::ExpressionContext>(i);
}


size_t TorQLParser::ForStmtContext::getRuleIndex() const {
  return TorQLParser::RuleForStmt;
}


std::any TorQLParser::ForStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitForStmt(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::ForStmtContext* TorQLParser::forStmt() {
  ForStmtContext *_localctx = _tracker.createInstance<ForStmtContext>(_ctx, getState());
  enterRule(_localctx, 24, TorQLParser::RuleForStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(274);
    match(TorQLParser::FOR);
    setState(275);
    match(TorQLParser::LPAREN);
    setState(279);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx)) {
    case 1: {
      setState(276);
      antlrcpp::downCast<ForStmtContext *>(_localctx)->initializerVarDeclr = varDecl();
      break;
    }

    case 2: {
      setState(277);
      antlrcpp::downCast<ForStmtContext *>(_localctx)->initializerVarAssignment = varAssignment();
      break;
    }

    case 3: {
      setState(278);
      antlrcpp::downCast<ForStmtContext *>(_localctx)->initializerExpression = expression();
      break;
    }

    default:
      break;
    }
    setState(281);
    match(TorQLParser::SEMICOLON);
    setState(283);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -9007270658588674) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 180986072486903807) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 18455) != 0)) {
      setState(282);
      antlrcpp::downCast<ForStmtContext *>(_localctx)->condition = expression();
    }
    setState(285);
    match(TorQLParser::SEMICOLON);
    setState(289);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 18, _ctx)) {
    case 1: {
      setState(286);
      antlrcpp::downCast<ForStmtContext *>(_localctx)->incrementVarDeclr = varDecl();
      break;
    }

    case 2: {
      setState(287);
      antlrcpp::downCast<ForStmtContext *>(_localctx)->incrementVarAssignment = varAssignment();
      break;
    }

    case 3: {
      setState(288);
      antlrcpp::downCast<ForStmtContext *>(_localctx)->incrementExpression = expression();
      break;
    }

    default:
      break;
    }
    setState(291);
    match(TorQLParser::RPAREN);
    setState(292);
    statement();
    setState(294);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx)) {
    case 1: {
      setState(293);
      match(TorQLParser::SEMICOLON);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForInStmtContext ------------------------------------------------------------------

TorQLParser::ForInStmtContext::ForInStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::ForInStmtContext::FOR() {
  return getToken(TorQLParser::FOR, 0);
}

tree::TerminalNode* TorQLParser::ForInStmtContext::LPAREN() {
  return getToken(TorQLParser::LPAREN, 0);
}

tree::TerminalNode* TorQLParser::ForInStmtContext::LET() {
  return getToken(TorQLParser::LET, 0);
}

std::vector<TorQLParser::IdentifierContext *> TorQLParser::ForInStmtContext::identifier() {
  return getRuleContexts<TorQLParser::IdentifierContext>();
}

TorQLParser::IdentifierContext* TorQLParser::ForInStmtContext::identifier(size_t i) {
  return getRuleContext<TorQLParser::IdentifierContext>(i);
}

tree::TerminalNode* TorQLParser::ForInStmtContext::IN() {
  return getToken(TorQLParser::IN, 0);
}

TorQLParser::ExpressionContext* TorQLParser::ForInStmtContext::expression() {
  return getRuleContext<TorQLParser::ExpressionContext>(0);
}

tree::TerminalNode* TorQLParser::ForInStmtContext::RPAREN() {
  return getToken(TorQLParser::RPAREN, 0);
}

TorQLParser::StatementContext* TorQLParser::ForInStmtContext::statement() {
  return getRuleContext<TorQLParser::StatementContext>(0);
}

tree::TerminalNode* TorQLParser::ForInStmtContext::COMMA() {
  return getToken(TorQLParser::COMMA, 0);
}

tree::TerminalNode* TorQLParser::ForInStmtContext::SEMICOLON() {
  return getToken(TorQLParser::SEMICOLON, 0);
}


size_t TorQLParser::ForInStmtContext::getRuleIndex() const {
  return TorQLParser::RuleForInStmt;
}


std::any TorQLParser::ForInStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitForInStmt(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::ForInStmtContext* TorQLParser::forInStmt() {
  ForInStmtContext *_localctx = _tracker.createInstance<ForInStmtContext>(_ctx, getState());
  enterRule(_localctx, 26, TorQLParser::RuleForInStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(296);
    match(TorQLParser::FOR);
    setState(297);
    match(TorQLParser::LPAREN);
    setState(298);
    match(TorQLParser::LET);
    setState(299);
    identifier();
    setState(302);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == TorQLParser::COMMA) {
      setState(300);
      match(TorQLParser::COMMA);
      setState(301);
      identifier();
    }
    setState(304);
    match(TorQLParser::IN);
    setState(305);
    expression();
    setState(306);
    match(TorQLParser::RPAREN);
    setState(307);
    statement();
    setState(309);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx)) {
    case 1: {
      setState(308);
      match(TorQLParser::SEMICOLON);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FuncStmtContext ------------------------------------------------------------------

TorQLParser::FuncStmtContext::FuncStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

TorQLParser::IdentifierContext* TorQLParser::FuncStmtContext::identifier() {
  return getRuleContext<TorQLParser::IdentifierContext>(0);
}

tree::TerminalNode* TorQLParser::FuncStmtContext::LPAREN() {
  return getToken(TorQLParser::LPAREN, 0);
}

tree::TerminalNode* TorQLParser::FuncStmtContext::RPAREN() {
  return getToken(TorQLParser::RPAREN, 0);
}

TorQLParser::BlockContext* TorQLParser::FuncStmtContext::block() {
  return getRuleContext<TorQLParser::BlockContext>(0);
}

tree::TerminalNode* TorQLParser::FuncStmtContext::FN() {
  return getToken(TorQLParser::FN, 0);
}

tree::TerminalNode* TorQLParser::FuncStmtContext::FUN() {
  return getToken(TorQLParser::FUN, 0);
}

TorQLParser::IdentifierListContext* TorQLParser::FuncStmtContext::identifierList() {
  return getRuleContext<TorQLParser::IdentifierListContext>(0);
}


size_t TorQLParser::FuncStmtContext::getRuleIndex() const {
  return TorQLParser::RuleFuncStmt;
}


std::any TorQLParser::FuncStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitFuncStmt(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::FuncStmtContext* TorQLParser::funcStmt() {
  FuncStmtContext *_localctx = _tracker.createInstance<FuncStmtContext>(_ctx, getState());
  enterRule(_localctx, 28, TorQLParser::RuleFuncStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(311);
    _la = _input->LA(1);
    if (!(_la == TorQLParser::FN

    || _la == TorQLParser::FUN)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(312);
    identifier();
    setState(313);
    match(TorQLParser::LPAREN);
    setState(315);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -1450176743603191810) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 6458554974207) != 0)) {
      setState(314);
      identifierList();
    }
    setState(317);
    match(TorQLParser::RPAREN);
    setState(318);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VarAssignmentContext ------------------------------------------------------------------

TorQLParser::VarAssignmentContext::VarAssignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<TorQLParser::ExpressionContext *> TorQLParser::VarAssignmentContext::expression() {
  return getRuleContexts<TorQLParser::ExpressionContext>();
}

TorQLParser::ExpressionContext* TorQLParser::VarAssignmentContext::expression(size_t i) {
  return getRuleContext<TorQLParser::ExpressionContext>(i);
}

tree::TerminalNode* TorQLParser::VarAssignmentContext::COLON() {
  return getToken(TorQLParser::COLON, 0);
}

tree::TerminalNode* TorQLParser::VarAssignmentContext::EQ_SINGLE() {
  return getToken(TorQLParser::EQ_SINGLE, 0);
}


size_t TorQLParser::VarAssignmentContext::getRuleIndex() const {
  return TorQLParser::RuleVarAssignment;
}


std::any TorQLParser::VarAssignmentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitVarAssignment(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::VarAssignmentContext* TorQLParser::varAssignment() {
  VarAssignmentContext *_localctx = _tracker.createInstance<VarAssignmentContext>(_ctx, getState());
  enterRule(_localctx, 30, TorQLParser::RuleVarAssignment);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(320);
    expression();
    setState(321);
    match(TorQLParser::COLON);
    setState(322);
    match(TorQLParser::EQ_SINGLE);
    setState(323);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExprStmtContext ------------------------------------------------------------------

TorQLParser::ExprStmtContext::ExprStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

TorQLParser::ExpressionContext* TorQLParser::ExprStmtContext::expression() {
  return getRuleContext<TorQLParser::ExpressionContext>(0);
}

tree::TerminalNode* TorQLParser::ExprStmtContext::SEMICOLON() {
  return getToken(TorQLParser::SEMICOLON, 0);
}


size_t TorQLParser::ExprStmtContext::getRuleIndex() const {
  return TorQLParser::RuleExprStmt;
}


std::any TorQLParser::ExprStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitExprStmt(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::ExprStmtContext* TorQLParser::exprStmt() {
  ExprStmtContext *_localctx = _tracker.createInstance<ExprStmtContext>(_ctx, getState());
  enterRule(_localctx, 32, TorQLParser::RuleExprStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(325);
    expression();
    setState(327);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 23, _ctx)) {
    case 1: {
      setState(326);
      match(TorQLParser::SEMICOLON);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EmptyStmtContext ------------------------------------------------------------------

TorQLParser::EmptyStmtContext::EmptyStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::EmptyStmtContext::SEMICOLON() {
  return getToken(TorQLParser::SEMICOLON, 0);
}


size_t TorQLParser::EmptyStmtContext::getRuleIndex() const {
  return TorQLParser::RuleEmptyStmt;
}


std::any TorQLParser::EmptyStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitEmptyStmt(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::EmptyStmtContext* TorQLParser::emptyStmt() {
  EmptyStmtContext *_localctx = _tracker.createInstance<EmptyStmtContext>(_ctx, getState());
  enterRule(_localctx, 34, TorQLParser::RuleEmptyStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(329);
    match(TorQLParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockContext ------------------------------------------------------------------

TorQLParser::BlockContext::BlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::BlockContext::LBRACE() {
  return getToken(TorQLParser::LBRACE, 0);
}

tree::TerminalNode* TorQLParser::BlockContext::RBRACE() {
  return getToken(TorQLParser::RBRACE, 0);
}

std::vector<TorQLParser::DeclarationContext *> TorQLParser::BlockContext::declaration() {
  return getRuleContexts<TorQLParser::DeclarationContext>();
}

TorQLParser::DeclarationContext* TorQLParser::BlockContext::declaration(size_t i) {
  return getRuleContext<TorQLParser::DeclarationContext>(i);
}


size_t TorQLParser::BlockContext::getRuleIndex() const {
  return TorQLParser::RuleBlock;
}


std::any TorQLParser::BlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitBlock(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::BlockContext* TorQLParser::block() {
  BlockContext *_localctx = _tracker.createInstance<BlockContext>(_ctx, getState());
  enterRule(_localctx, 36, TorQLParser::RuleBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(331);
    match(TorQLParser::LBRACE);
    setState(335);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -536887298) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 180986211001696255) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 4212759) != 0)) {
      setState(332);
      declaration();
      setState(337);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(338);
    match(TorQLParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KvPairContext ------------------------------------------------------------------

TorQLParser::KvPairContext::KvPairContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<TorQLParser::ExpressionContext *> TorQLParser::KvPairContext::expression() {
  return getRuleContexts<TorQLParser::ExpressionContext>();
}

TorQLParser::ExpressionContext* TorQLParser::KvPairContext::expression(size_t i) {
  return getRuleContext<TorQLParser::ExpressionContext>(i);
}

tree::TerminalNode* TorQLParser::KvPairContext::COLON() {
  return getToken(TorQLParser::COLON, 0);
}


size_t TorQLParser::KvPairContext::getRuleIndex() const {
  return TorQLParser::RuleKvPair;
}


std::any TorQLParser::KvPairContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitKvPair(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::KvPairContext* TorQLParser::kvPair() {
  KvPairContext *_localctx = _tracker.createInstance<KvPairContext>(_ctx, getState());
  enterRule(_localctx, 38, TorQLParser::RuleKvPair);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(340);
    expression();
    setState(341);
    match(TorQLParser::COLON);
    setState(342);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KvPairListContext ------------------------------------------------------------------

TorQLParser::KvPairListContext::KvPairListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<TorQLParser::KvPairContext *> TorQLParser::KvPairListContext::kvPair() {
  return getRuleContexts<TorQLParser::KvPairContext>();
}

TorQLParser::KvPairContext* TorQLParser::KvPairListContext::kvPair(size_t i) {
  return getRuleContext<TorQLParser::KvPairContext>(i);
}

std::vector<tree::TerminalNode *> TorQLParser::KvPairListContext::COMMA() {
  return getTokens(TorQLParser::COMMA);
}

tree::TerminalNode* TorQLParser::KvPairListContext::COMMA(size_t i) {
  return getToken(TorQLParser::COMMA, i);
}


size_t TorQLParser::KvPairListContext::getRuleIndex() const {
  return TorQLParser::RuleKvPairList;
}


std::any TorQLParser::KvPairListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitKvPairList(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::KvPairListContext* TorQLParser::kvPairList() {
  KvPairListContext *_localctx = _tracker.createInstance<KvPairListContext>(_ctx, getState());
  enterRule(_localctx, 40, TorQLParser::RuleKvPairList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(344);
    kvPair();
    setState(349);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 25, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(345);
        match(TorQLParser::COMMA);
        setState(346);
        kvPair(); 
      }
      setState(351);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 25, _ctx);
    }
    setState(353);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == TorQLParser::COMMA) {
      setState(352);
      match(TorQLParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectContext ------------------------------------------------------------------

TorQLParser::SelectContext::SelectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::SelectContext::EOF() {
  return getToken(TorQLParser::EOF, 0);
}

TorQLParser::SelectUnionStmtContext* TorQLParser::SelectContext::selectUnionStmt() {
  return getRuleContext<TorQLParser::SelectUnionStmtContext>(0);
}

TorQLParser::SelectStmtContext* TorQLParser::SelectContext::selectStmt() {
  return getRuleContext<TorQLParser::SelectStmtContext>(0);
}

TorQLParser::TorqlxTagElementContext* TorQLParser::SelectContext::torqlxTagElement() {
  return getRuleContext<TorQLParser::TorqlxTagElementContext>(0);
}


size_t TorQLParser::SelectContext::getRuleIndex() const {
  return TorQLParser::RuleSelect;
}


std::any TorQLParser::SelectContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitSelect(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::SelectContext* TorQLParser::select() {
  SelectContext *_localctx = _tracker.createInstance<SelectContext>(_ctx, getState());
  enterRule(_localctx, 42, TorQLParser::RuleSelect);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(358);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx)) {
    case 1: {
      setState(355);
      selectUnionStmt();
      break;
    }

    case 2: {
      setState(356);
      selectStmt();
      break;
    }

    case 3: {
      setState(357);
      torqlxTagElement();
      break;
    }

    default:
      break;
    }
    setState(360);
    match(TorQLParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectUnionStmtContext ------------------------------------------------------------------

TorQLParser::SelectUnionStmtContext::SelectUnionStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<TorQLParser::SelectStmtWithParensContext *> TorQLParser::SelectUnionStmtContext::selectStmtWithParens() {
  return getRuleContexts<TorQLParser::SelectStmtWithParensContext>();
}

TorQLParser::SelectStmtWithParensContext* TorQLParser::SelectUnionStmtContext::selectStmtWithParens(size_t i) {
  return getRuleContext<TorQLParser::SelectStmtWithParensContext>(i);
}

std::vector<tree::TerminalNode *> TorQLParser::SelectUnionStmtContext::UNION() {
  return getTokens(TorQLParser::UNION);
}

tree::TerminalNode* TorQLParser::SelectUnionStmtContext::UNION(size_t i) {
  return getToken(TorQLParser::UNION, i);
}

std::vector<tree::TerminalNode *> TorQLParser::SelectUnionStmtContext::ALL() {
  return getTokens(TorQLParser::ALL);
}

tree::TerminalNode* TorQLParser::SelectUnionStmtContext::ALL(size_t i) {
  return getToken(TorQLParser::ALL, i);
}


size_t TorQLParser::SelectUnionStmtContext::getRuleIndex() const {
  return TorQLParser::RuleSelectUnionStmt;
}


std::any TorQLParser::SelectUnionStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitSelectUnionStmt(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::SelectUnionStmtContext* TorQLParser::selectUnionStmt() {
  SelectUnionStmtContext *_localctx = _tracker.createInstance<SelectUnionStmtContext>(_ctx, getState());
  enterRule(_localctx, 44, TorQLParser::RuleSelectUnionStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(362);
    selectStmtWithParens();
    setState(368);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == TorQLParser::UNION) {
      setState(363);
      match(TorQLParser::UNION);
      setState(364);
      match(TorQLParser::ALL);
      setState(365);
      selectStmtWithParens();
      setState(370);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectStmtWithParensContext ------------------------------------------------------------------

TorQLParser::SelectStmtWithParensContext::SelectStmtWithParensContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

TorQLParser::SelectStmtContext* TorQLParser::SelectStmtWithParensContext::selectStmt() {
  return getRuleContext<TorQLParser::SelectStmtContext>(0);
}

tree::TerminalNode* TorQLParser::SelectStmtWithParensContext::LPAREN() {
  return getToken(TorQLParser::LPAREN, 0);
}

TorQLParser::SelectUnionStmtContext* TorQLParser::SelectStmtWithParensContext::selectUnionStmt() {
  return getRuleContext<TorQLParser::SelectUnionStmtContext>(0);
}

tree::TerminalNode* TorQLParser::SelectStmtWithParensContext::RPAREN() {
  return getToken(TorQLParser::RPAREN, 0);
}

TorQLParser::PlaceholderContext* TorQLParser::SelectStmtWithParensContext::placeholder() {
  return getRuleContext<TorQLParser::PlaceholderContext>(0);
}


size_t TorQLParser::SelectStmtWithParensContext::getRuleIndex() const {
  return TorQLParser::RuleSelectStmtWithParens;
}


std::any TorQLParser::SelectStmtWithParensContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitSelectStmtWithParens(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::SelectStmtWithParensContext* TorQLParser::selectStmtWithParens() {
  SelectStmtWithParensContext *_localctx = _tracker.createInstance<SelectStmtWithParensContext>(_ctx, getState());
  enterRule(_localctx, 46, TorQLParser::RuleSelectStmtWithParens);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(377);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case TorQLParser::SELECT:
      case TorQLParser::WITH: {
        enterOuterAlt(_localctx, 1);
        setState(371);
        selectStmt();
        break;
      }

      case TorQLParser::LPAREN: {
        enterOuterAlt(_localctx, 2);
        setState(372);
        match(TorQLParser::LPAREN);
        setState(373);
        selectUnionStmt();
        setState(374);
        match(TorQLParser::RPAREN);
        break;
      }

      case TorQLParser::LBRACE: {
        enterOuterAlt(_localctx, 3);
        setState(376);
        placeholder();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectStmtContext ------------------------------------------------------------------

TorQLParser::SelectStmtContext::SelectStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::SelectStmtContext::SELECT() {
  return getToken(TorQLParser::SELECT, 0);
}

TorQLParser::ColumnExprListContext* TorQLParser::SelectStmtContext::columnExprList() {
  return getRuleContext<TorQLParser::ColumnExprListContext>(0);
}

tree::TerminalNode* TorQLParser::SelectStmtContext::DISTINCT() {
  return getToken(TorQLParser::DISTINCT, 0);
}

TorQLParser::TopClauseContext* TorQLParser::SelectStmtContext::topClause() {
  return getRuleContext<TorQLParser::TopClauseContext>(0);
}

TorQLParser::ArrayJoinClauseContext* TorQLParser::SelectStmtContext::arrayJoinClause() {
  return getRuleContext<TorQLParser::ArrayJoinClauseContext>(0);
}

TorQLParser::PrewhereClauseContext* TorQLParser::SelectStmtContext::prewhereClause() {
  return getRuleContext<TorQLParser::PrewhereClauseContext>(0);
}

TorQLParser::GroupByClauseContext* TorQLParser::SelectStmtContext::groupByClause() {
  return getRuleContext<TorQLParser::GroupByClauseContext>(0);
}

std::vector<tree::TerminalNode *> TorQLParser::SelectStmtContext::WITH() {
  return getTokens(TorQLParser::WITH);
}

tree::TerminalNode* TorQLParser::SelectStmtContext::WITH(size_t i) {
  return getToken(TorQLParser::WITH, i);
}

tree::TerminalNode* TorQLParser::SelectStmtContext::TOTALS() {
  return getToken(TorQLParser::TOTALS, 0);
}

TorQLParser::HavingClauseContext* TorQLParser::SelectStmtContext::havingClause() {
  return getRuleContext<TorQLParser::HavingClauseContext>(0);
}

TorQLParser::WindowClauseContext* TorQLParser::SelectStmtContext::windowClause() {
  return getRuleContext<TorQLParser::WindowClauseContext>(0);
}

TorQLParser::OrderByClauseContext* TorQLParser::SelectStmtContext::orderByClause() {
  return getRuleContext<TorQLParser::OrderByClauseContext>(0);
}

TorQLParser::LimitAndOffsetClauseContext* TorQLParser::SelectStmtContext::limitAndOffsetClause() {
  return getRuleContext<TorQLParser::LimitAndOffsetClauseContext>(0);
}

TorQLParser::OffsetOnlyClauseContext* TorQLParser::SelectStmtContext::offsetOnlyClause() {
  return getRuleContext<TorQLParser::OffsetOnlyClauseContext>(0);
}

TorQLParser::SettingsClauseContext* TorQLParser::SelectStmtContext::settingsClause() {
  return getRuleContext<TorQLParser::SettingsClauseContext>(0);
}

TorQLParser::WithClauseContext* TorQLParser::SelectStmtContext::withClause() {
  return getRuleContext<TorQLParser::WithClauseContext>(0);
}

TorQLParser::FromClauseContext* TorQLParser::SelectStmtContext::fromClause() {
  return getRuleContext<TorQLParser::FromClauseContext>(0);
}

TorQLParser::WhereClauseContext* TorQLParser::SelectStmtContext::whereClause() {
  return getRuleContext<TorQLParser::WhereClauseContext>(0);
}

tree::TerminalNode* TorQLParser::SelectStmtContext::CUBE() {
  return getToken(TorQLParser::CUBE, 0);
}

tree::TerminalNode* TorQLParser::SelectStmtContext::ROLLUP() {
  return getToken(TorQLParser::ROLLUP, 0);
}


size_t TorQLParser::SelectStmtContext::getRuleIndex() const {
  return TorQLParser::RuleSelectStmt;
}


std::any TorQLParser::SelectStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitSelectStmt(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::SelectStmtContext* TorQLParser::selectStmt() {
  SelectStmtContext *_localctx = _tracker.createInstance<SelectStmtContext>(_ctx, getState());
  enterRule(_localctx, 48, TorQLParser::RuleSelectStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(380);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == TorQLParser::WITH) {
      setState(379);
      antlrcpp::downCast<SelectStmtContext *>(_localctx)->with = withClause();
    }
    setState(382);
    match(TorQLParser::SELECT);
    setState(384);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx)) {
    case 1: {
      setState(383);
      match(TorQLParser::DISTINCT);
      break;
    }

    default:
      break;
    }
    setState(387);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx)) {
    case 1: {
      setState(386);
      topClause();
      break;
    }

    default:
      break;
    }
    setState(389);
    antlrcpp::downCast<SelectStmtContext *>(_localctx)->columns = columnExprList();
    setState(391);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == TorQLParser::FROM) {
      setState(390);
      antlrcpp::downCast<SelectStmtContext *>(_localctx)->from = fromClause();
    }
    setState(394);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4538783999459360) != 0)) {
      setState(393);
      arrayJoinClause();
    }
    setState(397);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == TorQLParser::PREWHERE) {
      setState(396);
      prewhereClause();
    }
    setState(400);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == TorQLParser::WHERE) {
      setState(399);
      antlrcpp::downCast<SelectStmtContext *>(_localctx)->where = whereClause();
    }
    setState(403);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == TorQLParser::GROUP) {
      setState(402);
      groupByClause();
    }
    setState(407);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 38, _ctx)) {
    case 1: {
      setState(405);
      match(TorQLParser::WITH);
      setState(406);
      _la = _input->LA(1);
      if (!(_la == TorQLParser::CUBE

      || _la == TorQLParser::ROLLUP)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
    setState(411);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == TorQLParser::WITH) {
      setState(409);
      match(TorQLParser::WITH);
      setState(410);
      match(TorQLParser::TOTALS);
    }
    setState(414);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == TorQLParser::HAVING) {
      setState(413);
      havingClause();
    }
    setState(417);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == TorQLParser::WINDOW) {
      setState(416);
      windowClause();
    }
    setState(420);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == TorQLParser::ORDER) {
      setState(419);
      orderByClause();
    }
    setState(424);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case TorQLParser::LIMIT: {
        setState(422);
        limitAndOffsetClause();
        break;
      }

      case TorQLParser::OFFSET: {
        setState(423);
        offsetOnlyClause();
        break;
      }

      case TorQLParser::EOF:
      case TorQLParser::SETTINGS:
      case TorQLParser::UNION:
      case TorQLParser::RPAREN: {
        break;
      }

    default:
      break;
    }
    setState(427);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == TorQLParser::SETTINGS) {
      setState(426);
      settingsClause();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WithClauseContext ------------------------------------------------------------------

TorQLParser::WithClauseContext::WithClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::WithClauseContext::WITH() {
  return getToken(TorQLParser::WITH, 0);
}

TorQLParser::WithExprListContext* TorQLParser::WithClauseContext::withExprList() {
  return getRuleContext<TorQLParser::WithExprListContext>(0);
}


size_t TorQLParser::WithClauseContext::getRuleIndex() const {
  return TorQLParser::RuleWithClause;
}


std::any TorQLParser::WithClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitWithClause(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::WithClauseContext* TorQLParser::withClause() {
  WithClauseContext *_localctx = _tracker.createInstance<WithClauseContext>(_ctx, getState());
  enterRule(_localctx, 50, TorQLParser::RuleWithClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(429);
    match(TorQLParser::WITH);
    setState(430);
    withExprList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TopClauseContext ------------------------------------------------------------------

TorQLParser::TopClauseContext::TopClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::TopClauseContext::TOP() {
  return getToken(TorQLParser::TOP, 0);
}

tree::TerminalNode* TorQLParser::TopClauseContext::DECIMAL_LITERAL() {
  return getToken(TorQLParser::DECIMAL_LITERAL, 0);
}

tree::TerminalNode* TorQLParser::TopClauseContext::WITH() {
  return getToken(TorQLParser::WITH, 0);
}

tree::TerminalNode* TorQLParser::TopClauseContext::TIES() {
  return getToken(TorQLParser::TIES, 0);
}


size_t TorQLParser::TopClauseContext::getRuleIndex() const {
  return TorQLParser::RuleTopClause;
}


std::any TorQLParser::TopClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitTopClause(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::TopClauseContext* TorQLParser::topClause() {
  TopClauseContext *_localctx = _tracker.createInstance<TopClauseContext>(_ctx, getState());
  enterRule(_localctx, 52, TorQLParser::RuleTopClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(432);
    match(TorQLParser::TOP);
    setState(433);
    match(TorQLParser::DECIMAL_LITERAL);
    setState(436);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 45, _ctx)) {
    case 1: {
      setState(434);
      match(TorQLParser::WITH);
      setState(435);
      match(TorQLParser::TIES);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FromClauseContext ------------------------------------------------------------------

TorQLParser::FromClauseContext::FromClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::FromClauseContext::FROM() {
  return getToken(TorQLParser::FROM, 0);
}

TorQLParser::JoinExprContext* TorQLParser::FromClauseContext::joinExpr() {
  return getRuleContext<TorQLParser::JoinExprContext>(0);
}


size_t TorQLParser::FromClauseContext::getRuleIndex() const {
  return TorQLParser::RuleFromClause;
}


std::any TorQLParser::FromClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitFromClause(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::FromClauseContext* TorQLParser::fromClause() {
  FromClauseContext *_localctx = _tracker.createInstance<FromClauseContext>(_ctx, getState());
  enterRule(_localctx, 54, TorQLParser::RuleFromClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(438);
    match(TorQLParser::FROM);
    setState(439);
    joinExpr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayJoinClauseContext ------------------------------------------------------------------

TorQLParser::ArrayJoinClauseContext::ArrayJoinClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::ArrayJoinClauseContext::ARRAY() {
  return getToken(TorQLParser::ARRAY, 0);
}

tree::TerminalNode* TorQLParser::ArrayJoinClauseContext::JOIN() {
  return getToken(TorQLParser::JOIN, 0);
}

TorQLParser::ColumnExprListContext* TorQLParser::ArrayJoinClauseContext::columnExprList() {
  return getRuleContext<TorQLParser::ColumnExprListContext>(0);
}

tree::TerminalNode* TorQLParser::ArrayJoinClauseContext::LEFT() {
  return getToken(TorQLParser::LEFT, 0);
}

tree::TerminalNode* TorQLParser::ArrayJoinClauseContext::INNER() {
  return getToken(TorQLParser::INNER, 0);
}


size_t TorQLParser::ArrayJoinClauseContext::getRuleIndex() const {
  return TorQLParser::RuleArrayJoinClause;
}


std::any TorQLParser::ArrayJoinClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitArrayJoinClause(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::ArrayJoinClauseContext* TorQLParser::arrayJoinClause() {
  ArrayJoinClauseContext *_localctx = _tracker.createInstance<ArrayJoinClauseContext>(_ctx, getState());
  enterRule(_localctx, 56, TorQLParser::RuleArrayJoinClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(442);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == TorQLParser::INNER

    || _la == TorQLParser::LEFT) {
      setState(441);
      _la = _input->LA(1);
      if (!(_la == TorQLParser::INNER

      || _la == TorQLParser::LEFT)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(444);
    match(TorQLParser::ARRAY);
    setState(445);
    match(TorQLParser::JOIN);
    setState(446);
    columnExprList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WindowClauseContext ------------------------------------------------------------------

TorQLParser::WindowClauseContext::WindowClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::WindowClauseContext::WINDOW() {
  return getToken(TorQLParser::WINDOW, 0);
}

std::vector<TorQLParser::IdentifierContext *> TorQLParser::WindowClauseContext::identifier() {
  return getRuleContexts<TorQLParser::IdentifierContext>();
}

TorQLParser::IdentifierContext* TorQLParser::WindowClauseContext::identifier(size_t i) {
  return getRuleContext<TorQLParser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> TorQLParser::WindowClauseContext::AS() {
  return getTokens(TorQLParser::AS);
}

tree::TerminalNode* TorQLParser::WindowClauseContext::AS(size_t i) {
  return getToken(TorQLParser::AS, i);
}

std::vector<tree::TerminalNode *> TorQLParser::WindowClauseContext::LPAREN() {
  return getTokens(TorQLParser::LPAREN);
}

tree::TerminalNode* TorQLParser::WindowClauseContext::LPAREN(size_t i) {
  return getToken(TorQLParser::LPAREN, i);
}

std::vector<TorQLParser::WindowExprContext *> TorQLParser::WindowClauseContext::windowExpr() {
  return getRuleContexts<TorQLParser::WindowExprContext>();
}

TorQLParser::WindowExprContext* TorQLParser::WindowClauseContext::windowExpr(size_t i) {
  return getRuleContext<TorQLParser::WindowExprContext>(i);
}

std::vector<tree::TerminalNode *> TorQLParser::WindowClauseContext::RPAREN() {
  return getTokens(TorQLParser::RPAREN);
}

tree::TerminalNode* TorQLParser::WindowClauseContext::RPAREN(size_t i) {
  return getToken(TorQLParser::RPAREN, i);
}

std::vector<tree::TerminalNode *> TorQLParser::WindowClauseContext::COMMA() {
  return getTokens(TorQLParser::COMMA);
}

tree::TerminalNode* TorQLParser::WindowClauseContext::COMMA(size_t i) {
  return getToken(TorQLParser::COMMA, i);
}


size_t TorQLParser::WindowClauseContext::getRuleIndex() const {
  return TorQLParser::RuleWindowClause;
}


std::any TorQLParser::WindowClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitWindowClause(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::WindowClauseContext* TorQLParser::windowClause() {
  WindowClauseContext *_localctx = _tracker.createInstance<WindowClauseContext>(_ctx, getState());
  enterRule(_localctx, 58, TorQLParser::RuleWindowClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(448);
    match(TorQLParser::WINDOW);
    setState(449);
    identifier();
    setState(450);
    match(TorQLParser::AS);
    setState(451);
    match(TorQLParser::LPAREN);
    setState(452);
    windowExpr();
    setState(453);
    match(TorQLParser::RPAREN);
    setState(463);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == TorQLParser::COMMA) {
      setState(454);
      match(TorQLParser::COMMA);
      setState(455);
      identifier();
      setState(456);
      match(TorQLParser::AS);
      setState(457);
      match(TorQLParser::LPAREN);
      setState(458);
      windowExpr();
      setState(459);
      match(TorQLParser::RPAREN);
      setState(465);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrewhereClauseContext ------------------------------------------------------------------

TorQLParser::PrewhereClauseContext::PrewhereClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::PrewhereClauseContext::PREWHERE() {
  return getToken(TorQLParser::PREWHERE, 0);
}

TorQLParser::ColumnExprContext* TorQLParser::PrewhereClauseContext::columnExpr() {
  return getRuleContext<TorQLParser::ColumnExprContext>(0);
}


size_t TorQLParser::PrewhereClauseContext::getRuleIndex() const {
  return TorQLParser::RulePrewhereClause;
}


std::any TorQLParser::PrewhereClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitPrewhereClause(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::PrewhereClauseContext* TorQLParser::prewhereClause() {
  PrewhereClauseContext *_localctx = _tracker.createInstance<PrewhereClauseContext>(_ctx, getState());
  enterRule(_localctx, 60, TorQLParser::RulePrewhereClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(466);
    match(TorQLParser::PREWHERE);
    setState(467);
    columnExpr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhereClauseContext ------------------------------------------------------------------

TorQLParser::WhereClauseContext::WhereClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::WhereClauseContext::WHERE() {
  return getToken(TorQLParser::WHERE, 0);
}

TorQLParser::ColumnExprContext* TorQLParser::WhereClauseContext::columnExpr() {
  return getRuleContext<TorQLParser::ColumnExprContext>(0);
}


size_t TorQLParser::WhereClauseContext::getRuleIndex() const {
  return TorQLParser::RuleWhereClause;
}


std::any TorQLParser::WhereClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitWhereClause(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::WhereClauseContext* TorQLParser::whereClause() {
  WhereClauseContext *_localctx = _tracker.createInstance<WhereClauseContext>(_ctx, getState());
  enterRule(_localctx, 62, TorQLParser::RuleWhereClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(469);
    match(TorQLParser::WHERE);
    setState(470);
    columnExpr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GroupByClauseContext ------------------------------------------------------------------

TorQLParser::GroupByClauseContext::GroupByClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::GroupByClauseContext::GROUP() {
  return getToken(TorQLParser::GROUP, 0);
}

tree::TerminalNode* TorQLParser::GroupByClauseContext::BY() {
  return getToken(TorQLParser::BY, 0);
}

tree::TerminalNode* TorQLParser::GroupByClauseContext::LPAREN() {
  return getToken(TorQLParser::LPAREN, 0);
}

TorQLParser::ColumnExprListContext* TorQLParser::GroupByClauseContext::columnExprList() {
  return getRuleContext<TorQLParser::ColumnExprListContext>(0);
}

tree::TerminalNode* TorQLParser::GroupByClauseContext::RPAREN() {
  return getToken(TorQLParser::RPAREN, 0);
}

tree::TerminalNode* TorQLParser::GroupByClauseContext::CUBE() {
  return getToken(TorQLParser::CUBE, 0);
}

tree::TerminalNode* TorQLParser::GroupByClauseContext::ROLLUP() {
  return getToken(TorQLParser::ROLLUP, 0);
}


size_t TorQLParser::GroupByClauseContext::getRuleIndex() const {
  return TorQLParser::RuleGroupByClause;
}


std::any TorQLParser::GroupByClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitGroupByClause(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::GroupByClauseContext* TorQLParser::groupByClause() {
  GroupByClauseContext *_localctx = _tracker.createInstance<GroupByClauseContext>(_ctx, getState());
  enterRule(_localctx, 64, TorQLParser::RuleGroupByClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(472);
    match(TorQLParser::GROUP);
    setState(473);
    match(TorQLParser::BY);
    setState(480);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 48, _ctx)) {
    case 1: {
      setState(474);
      _la = _input->LA(1);
      if (!(_la == TorQLParser::CUBE

      || _la == TorQLParser::ROLLUP)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(475);
      match(TorQLParser::LPAREN);
      setState(476);
      columnExprList();
      setState(477);
      match(TorQLParser::RPAREN);
      break;
    }

    case 2: {
      setState(479);
      columnExprList();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HavingClauseContext ------------------------------------------------------------------

TorQLParser::HavingClauseContext::HavingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::HavingClauseContext::HAVING() {
  return getToken(TorQLParser::HAVING, 0);
}

TorQLParser::ColumnExprContext* TorQLParser::HavingClauseContext::columnExpr() {
  return getRuleContext<TorQLParser::ColumnExprContext>(0);
}


size_t TorQLParser::HavingClauseContext::getRuleIndex() const {
  return TorQLParser::RuleHavingClause;
}


std::any TorQLParser::HavingClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitHavingClause(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::HavingClauseContext* TorQLParser::havingClause() {
  HavingClauseContext *_localctx = _tracker.createInstance<HavingClauseContext>(_ctx, getState());
  enterRule(_localctx, 66, TorQLParser::RuleHavingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(482);
    match(TorQLParser::HAVING);
    setState(483);
    columnExpr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrderByClauseContext ------------------------------------------------------------------

TorQLParser::OrderByClauseContext::OrderByClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::OrderByClauseContext::ORDER() {
  return getToken(TorQLParser::ORDER, 0);
}

tree::TerminalNode* TorQLParser::OrderByClauseContext::BY() {
  return getToken(TorQLParser::BY, 0);
}

TorQLParser::OrderExprListContext* TorQLParser::OrderByClauseContext::orderExprList() {
  return getRuleContext<TorQLParser::OrderExprListContext>(0);
}


size_t TorQLParser::OrderByClauseContext::getRuleIndex() const {
  return TorQLParser::RuleOrderByClause;
}


std::any TorQLParser::OrderByClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitOrderByClause(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::OrderByClauseContext* TorQLParser::orderByClause() {
  OrderByClauseContext *_localctx = _tracker.createInstance<OrderByClauseContext>(_ctx, getState());
  enterRule(_localctx, 68, TorQLParser::RuleOrderByClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(485);
    match(TorQLParser::ORDER);
    setState(486);
    match(TorQLParser::BY);
    setState(487);
    orderExprList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProjectionOrderByClauseContext ------------------------------------------------------------------

TorQLParser::ProjectionOrderByClauseContext::ProjectionOrderByClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::ProjectionOrderByClauseContext::ORDER() {
  return getToken(TorQLParser::ORDER, 0);
}

tree::TerminalNode* TorQLParser::ProjectionOrderByClauseContext::BY() {
  return getToken(TorQLParser::BY, 0);
}

TorQLParser::ColumnExprListContext* TorQLParser::ProjectionOrderByClauseContext::columnExprList() {
  return getRuleContext<TorQLParser::ColumnExprListContext>(0);
}


size_t TorQLParser::ProjectionOrderByClauseContext::getRuleIndex() const {
  return TorQLParser::RuleProjectionOrderByClause;
}


std::any TorQLParser::ProjectionOrderByClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitProjectionOrderByClause(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::ProjectionOrderByClauseContext* TorQLParser::projectionOrderByClause() {
  ProjectionOrderByClauseContext *_localctx = _tracker.createInstance<ProjectionOrderByClauseContext>(_ctx, getState());
  enterRule(_localctx, 70, TorQLParser::RuleProjectionOrderByClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(489);
    match(TorQLParser::ORDER);
    setState(490);
    match(TorQLParser::BY);
    setState(491);
    columnExprList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LimitAndOffsetClauseContext ------------------------------------------------------------------

TorQLParser::LimitAndOffsetClauseContext::LimitAndOffsetClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::LimitAndOffsetClauseContext::LIMIT() {
  return getToken(TorQLParser::LIMIT, 0);
}

std::vector<TorQLParser::ColumnExprContext *> TorQLParser::LimitAndOffsetClauseContext::columnExpr() {
  return getRuleContexts<TorQLParser::ColumnExprContext>();
}

TorQLParser::ColumnExprContext* TorQLParser::LimitAndOffsetClauseContext::columnExpr(size_t i) {
  return getRuleContext<TorQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* TorQLParser::LimitAndOffsetClauseContext::COMMA() {
  return getToken(TorQLParser::COMMA, 0);
}

tree::TerminalNode* TorQLParser::LimitAndOffsetClauseContext::BY() {
  return getToken(TorQLParser::BY, 0);
}

TorQLParser::ColumnExprListContext* TorQLParser::LimitAndOffsetClauseContext::columnExprList() {
  return getRuleContext<TorQLParser::ColumnExprListContext>(0);
}

tree::TerminalNode* TorQLParser::LimitAndOffsetClauseContext::WITH() {
  return getToken(TorQLParser::WITH, 0);
}

tree::TerminalNode* TorQLParser::LimitAndOffsetClauseContext::TIES() {
  return getToken(TorQLParser::TIES, 0);
}

tree::TerminalNode* TorQLParser::LimitAndOffsetClauseContext::OFFSET() {
  return getToken(TorQLParser::OFFSET, 0);
}


size_t TorQLParser::LimitAndOffsetClauseContext::getRuleIndex() const {
  return TorQLParser::RuleLimitAndOffsetClause;
}


std::any TorQLParser::LimitAndOffsetClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitLimitAndOffsetClause(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::LimitAndOffsetClauseContext* TorQLParser::limitAndOffsetClause() {
  LimitAndOffsetClauseContext *_localctx = _tracker.createInstance<LimitAndOffsetClauseContext>(_ctx, getState());
  enterRule(_localctx, 72, TorQLParser::RuleLimitAndOffsetClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(522);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(493);
      match(TorQLParser::LIMIT);
      setState(494);
      columnExpr(0);
      setState(497);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == TorQLParser::COMMA) {
        setState(495);
        match(TorQLParser::COMMA);
        setState(496);
        columnExpr(0);
      }
      setState(503);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case TorQLParser::WITH: {
          setState(499);
          match(TorQLParser::WITH);
          setState(500);
          match(TorQLParser::TIES);
          break;
        }

        case TorQLParser::BY: {
          setState(501);
          match(TorQLParser::BY);
          setState(502);
          columnExprList();
          break;
        }

        case TorQLParser::EOF:
        case TorQLParser::SETTINGS:
        case TorQLParser::UNION:
        case TorQLParser::RPAREN: {
          break;
        }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(505);
      match(TorQLParser::LIMIT);
      setState(506);
      columnExpr(0);
      setState(509);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == TorQLParser::WITH) {
        setState(507);
        match(TorQLParser::WITH);
        setState(508);
        match(TorQLParser::TIES);
      }
      setState(511);
      match(TorQLParser::OFFSET);
      setState(512);
      columnExpr(0);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(514);
      match(TorQLParser::LIMIT);
      setState(515);
      columnExpr(0);
      setState(516);
      match(TorQLParser::OFFSET);
      setState(517);
      columnExpr(0);
      setState(520);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == TorQLParser::BY) {
        setState(518);
        match(TorQLParser::BY);
        setState(519);
        columnExprList();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OffsetOnlyClauseContext ------------------------------------------------------------------

TorQLParser::OffsetOnlyClauseContext::OffsetOnlyClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::OffsetOnlyClauseContext::OFFSET() {
  return getToken(TorQLParser::OFFSET, 0);
}

TorQLParser::ColumnExprContext* TorQLParser::OffsetOnlyClauseContext::columnExpr() {
  return getRuleContext<TorQLParser::ColumnExprContext>(0);
}


size_t TorQLParser::OffsetOnlyClauseContext::getRuleIndex() const {
  return TorQLParser::RuleOffsetOnlyClause;
}


std::any TorQLParser::OffsetOnlyClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitOffsetOnlyClause(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::OffsetOnlyClauseContext* TorQLParser::offsetOnlyClause() {
  OffsetOnlyClauseContext *_localctx = _tracker.createInstance<OffsetOnlyClauseContext>(_ctx, getState());
  enterRule(_localctx, 74, TorQLParser::RuleOffsetOnlyClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(524);
    match(TorQLParser::OFFSET);
    setState(525);
    columnExpr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SettingsClauseContext ------------------------------------------------------------------

TorQLParser::SettingsClauseContext::SettingsClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::SettingsClauseContext::SETTINGS() {
  return getToken(TorQLParser::SETTINGS, 0);
}

TorQLParser::SettingExprListContext* TorQLParser::SettingsClauseContext::settingExprList() {
  return getRuleContext<TorQLParser::SettingExprListContext>(0);
}


size_t TorQLParser::SettingsClauseContext::getRuleIndex() const {
  return TorQLParser::RuleSettingsClause;
}


std::any TorQLParser::SettingsClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitSettingsClause(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::SettingsClauseContext* TorQLParser::settingsClause() {
  SettingsClauseContext *_localctx = _tracker.createInstance<SettingsClauseContext>(_ctx, getState());
  enterRule(_localctx, 76, TorQLParser::RuleSettingsClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(527);
    match(TorQLParser::SETTINGS);
    setState(528);
    settingExprList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- JoinExprContext ------------------------------------------------------------------

TorQLParser::JoinExprContext::JoinExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t TorQLParser::JoinExprContext::getRuleIndex() const {
  return TorQLParser::RuleJoinExpr;
}

void TorQLParser::JoinExprContext::copyFrom(JoinExprContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- JoinExprOpContext ------------------------------------------------------------------

std::vector<TorQLParser::JoinExprContext *> TorQLParser::JoinExprOpContext::joinExpr() {
  return getRuleContexts<TorQLParser::JoinExprContext>();
}

TorQLParser::JoinExprContext* TorQLParser::JoinExprOpContext::joinExpr(size_t i) {
  return getRuleContext<TorQLParser::JoinExprContext>(i);
}

tree::TerminalNode* TorQLParser::JoinExprOpContext::JOIN() {
  return getToken(TorQLParser::JOIN, 0);
}

TorQLParser::JoinConstraintClauseContext* TorQLParser::JoinExprOpContext::joinConstraintClause() {
  return getRuleContext<TorQLParser::JoinConstraintClauseContext>(0);
}

TorQLParser::JoinOpContext* TorQLParser::JoinExprOpContext::joinOp() {
  return getRuleContext<TorQLParser::JoinOpContext>(0);
}

TorQLParser::JoinExprOpContext::JoinExprOpContext(JoinExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::JoinExprOpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinExprOp(this);
  else
    return visitor->visitChildren(this);
}
//----------------- JoinExprTableContext ------------------------------------------------------------------

TorQLParser::TableExprContext* TorQLParser::JoinExprTableContext::tableExpr() {
  return getRuleContext<TorQLParser::TableExprContext>(0);
}

tree::TerminalNode* TorQLParser::JoinExprTableContext::FINAL() {
  return getToken(TorQLParser::FINAL, 0);
}

TorQLParser::SampleClauseContext* TorQLParser::JoinExprTableContext::sampleClause() {
  return getRuleContext<TorQLParser::SampleClauseContext>(0);
}

TorQLParser::JoinExprTableContext::JoinExprTableContext(JoinExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::JoinExprTableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinExprTable(this);
  else
    return visitor->visitChildren(this);
}
//----------------- JoinExprParensContext ------------------------------------------------------------------

tree::TerminalNode* TorQLParser::JoinExprParensContext::LPAREN() {
  return getToken(TorQLParser::LPAREN, 0);
}

TorQLParser::JoinExprContext* TorQLParser::JoinExprParensContext::joinExpr() {
  return getRuleContext<TorQLParser::JoinExprContext>(0);
}

tree::TerminalNode* TorQLParser::JoinExprParensContext::RPAREN() {
  return getToken(TorQLParser::RPAREN, 0);
}

TorQLParser::JoinExprParensContext::JoinExprParensContext(JoinExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::JoinExprParensContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinExprParens(this);
  else
    return visitor->visitChildren(this);
}
//----------------- JoinExprCrossOpContext ------------------------------------------------------------------

std::vector<TorQLParser::JoinExprContext *> TorQLParser::JoinExprCrossOpContext::joinExpr() {
  return getRuleContexts<TorQLParser::JoinExprContext>();
}

TorQLParser::JoinExprContext* TorQLParser::JoinExprCrossOpContext::joinExpr(size_t i) {
  return getRuleContext<TorQLParser::JoinExprContext>(i);
}

TorQLParser::JoinOpCrossContext* TorQLParser::JoinExprCrossOpContext::joinOpCross() {
  return getRuleContext<TorQLParser::JoinOpCrossContext>(0);
}

TorQLParser::JoinExprCrossOpContext::JoinExprCrossOpContext(JoinExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::JoinExprCrossOpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinExprCrossOp(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::JoinExprContext* TorQLParser::joinExpr() {
   return joinExpr(0);
}

TorQLParser::JoinExprContext* TorQLParser::joinExpr(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  TorQLParser::JoinExprContext *_localctx = _tracker.createInstance<JoinExprContext>(_ctx, parentState);
  TorQLParser::JoinExprContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 78;
  enterRecursionRule(_localctx, 78, TorQLParser::RuleJoinExpr, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(542);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 56, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<JoinExprTableContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(531);
      tableExpr(0);
      setState(533);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 54, _ctx)) {
      case 1: {
        setState(532);
        match(TorQLParser::FINAL);
        break;
      }

      default:
        break;
      }
      setState(536);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 55, _ctx)) {
      case 1: {
        setState(535);
        sampleClause();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<JoinExprParensContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(538);
      match(TorQLParser::LPAREN);
      setState(539);
      joinExpr(0);
      setState(540);
      match(TorQLParser::RPAREN);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(558);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(556);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<JoinExprCrossOpContext>(_tracker.createInstance<JoinExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleJoinExpr);
          setState(544);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(545);
          joinOpCross();
          setState(546);
          joinExpr(4);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<JoinExprOpContext>(_tracker.createInstance<JoinExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleJoinExpr);
          setState(548);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(550);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 4538818359197978) != 0) || _la == TorQLParser::RIGHT

          || _la == TorQLParser::SEMI) {
            setState(549);
            joinOp();
          }
          setState(552);
          match(TorQLParser::JOIN);
          setState(553);
          joinExpr(0);
          setState(554);
          joinConstraintClause();
          break;
        }

        default:
          break;
        } 
      }
      setState(560);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- JoinOpContext ------------------------------------------------------------------

TorQLParser::JoinOpContext::JoinOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t TorQLParser::JoinOpContext::getRuleIndex() const {
  return TorQLParser::RuleJoinOp;
}

void TorQLParser::JoinOpContext::copyFrom(JoinOpContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- JoinOpFullContext ------------------------------------------------------------------

tree::TerminalNode* TorQLParser::JoinOpFullContext::FULL() {
  return getToken(TorQLParser::FULL, 0);
}

tree::TerminalNode* TorQLParser::JoinOpFullContext::OUTER() {
  return getToken(TorQLParser::OUTER, 0);
}

tree::TerminalNode* TorQLParser::JoinOpFullContext::ALL() {
  return getToken(TorQLParser::ALL, 0);
}

tree::TerminalNode* TorQLParser::JoinOpFullContext::ANY() {
  return getToken(TorQLParser::ANY, 0);
}

TorQLParser::JoinOpFullContext::JoinOpFullContext(JoinOpContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::JoinOpFullContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinOpFull(this);
  else
    return visitor->visitChildren(this);
}
//----------------- JoinOpInnerContext ------------------------------------------------------------------

tree::TerminalNode* TorQLParser::JoinOpInnerContext::INNER() {
  return getToken(TorQLParser::INNER, 0);
}

tree::TerminalNode* TorQLParser::JoinOpInnerContext::ALL() {
  return getToken(TorQLParser::ALL, 0);
}

tree::TerminalNode* TorQLParser::JoinOpInnerContext::ANY() {
  return getToken(TorQLParser::ANY, 0);
}

tree::TerminalNode* TorQLParser::JoinOpInnerContext::ASOF() {
  return getToken(TorQLParser::ASOF, 0);
}

TorQLParser::JoinOpInnerContext::JoinOpInnerContext(JoinOpContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::JoinOpInnerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinOpInner(this);
  else
    return visitor->visitChildren(this);
}
//----------------- JoinOpLeftRightContext ------------------------------------------------------------------

tree::TerminalNode* TorQLParser::JoinOpLeftRightContext::LEFT() {
  return getToken(TorQLParser::LEFT, 0);
}

tree::TerminalNode* TorQLParser::JoinOpLeftRightContext::RIGHT() {
  return getToken(TorQLParser::RIGHT, 0);
}

tree::TerminalNode* TorQLParser::JoinOpLeftRightContext::OUTER() {
  return getToken(TorQLParser::OUTER, 0);
}

tree::TerminalNode* TorQLParser::JoinOpLeftRightContext::SEMI() {
  return getToken(TorQLParser::SEMI, 0);
}

tree::TerminalNode* TorQLParser::JoinOpLeftRightContext::ALL() {
  return getToken(TorQLParser::ALL, 0);
}

tree::TerminalNode* TorQLParser::JoinOpLeftRightContext::ANTI() {
  return getToken(TorQLParser::ANTI, 0);
}

tree::TerminalNode* TorQLParser::JoinOpLeftRightContext::ANY() {
  return getToken(TorQLParser::ANY, 0);
}

tree::TerminalNode* TorQLParser::JoinOpLeftRightContext::ASOF() {
  return getToken(TorQLParser::ASOF, 0);
}

TorQLParser::JoinOpLeftRightContext::JoinOpLeftRightContext(JoinOpContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::JoinOpLeftRightContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinOpLeftRight(this);
  else
    return visitor->visitChildren(this);
}
TorQLParser::JoinOpContext* TorQLParser::joinOp() {
  JoinOpContext *_localctx = _tracker.createInstance<JoinOpContext>(_ctx, getState());
  enterRule(_localctx, 80, TorQLParser::RuleJoinOp);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(604);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 73, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<TorQLParser::JoinOpInnerContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(570);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx)) {
      case 1: {
        setState(562);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 274) != 0)) {
          setState(561);
          _la = _input->LA(1);
          if (!((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 274) != 0))) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        setState(564);
        match(TorQLParser::INNER);
        break;
      }

      case 2: {
        setState(565);
        match(TorQLParser::INNER);
        setState(567);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 274) != 0)) {
          setState(566);
          _la = _input->LA(1);
          if (!((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 274) != 0))) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        break;
      }

      case 3: {
        setState(569);
        _la = _input->LA(1);
        if (!((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 274) != 0))) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<TorQLParser::JoinOpLeftRightContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(586);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx)) {
      case 1: {
        setState(573);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 282) != 0) || _la == TorQLParser::SEMI) {
          setState(572);
          _la = _input->LA(1);
          if (!((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 282) != 0) || _la == TorQLParser::SEMI)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        setState(575);
        _la = _input->LA(1);
        if (!(_la == TorQLParser::LEFT

        || _la == TorQLParser::RIGHT)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(577);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == TorQLParser::OUTER) {
          setState(576);
          match(TorQLParser::OUTER);
        }
        break;
      }

      case 2: {
        setState(579);
        _la = _input->LA(1);
        if (!(_la == TorQLParser::LEFT

        || _la == TorQLParser::RIGHT)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(581);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == TorQLParser::OUTER) {
          setState(580);
          match(TorQLParser::OUTER);
        }
        setState(584);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 282) != 0) || _la == TorQLParser::SEMI) {
          setState(583);
          _la = _input->LA(1);
          if (!((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 282) != 0) || _la == TorQLParser::SEMI)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        break;
      }

      default:
        break;
      }
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<TorQLParser::JoinOpFullContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(602);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 72, _ctx)) {
      case 1: {
        setState(589);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == TorQLParser::ALL

        || _la == TorQLParser::ANY) {
          setState(588);
          _la = _input->LA(1);
          if (!(_la == TorQLParser::ALL

          || _la == TorQLParser::ANY)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        setState(591);
        match(TorQLParser::FULL);
        setState(593);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == TorQLParser::OUTER) {
          setState(592);
          match(TorQLParser::OUTER);
        }
        break;
      }

      case 2: {
        setState(595);
        match(TorQLParser::FULL);
        setState(597);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == TorQLParser::OUTER) {
          setState(596);
          match(TorQLParser::OUTER);
        }
        setState(600);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == TorQLParser::ALL

        || _la == TorQLParser::ANY) {
          setState(599);
          _la = _input->LA(1);
          if (!(_la == TorQLParser::ALL

          || _la == TorQLParser::ANY)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- JoinOpCrossContext ------------------------------------------------------------------

TorQLParser::JoinOpCrossContext::JoinOpCrossContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::JoinOpCrossContext::CROSS() {
  return getToken(TorQLParser::CROSS, 0);
}

tree::TerminalNode* TorQLParser::JoinOpCrossContext::JOIN() {
  return getToken(TorQLParser::JOIN, 0);
}

tree::TerminalNode* TorQLParser::JoinOpCrossContext::COMMA() {
  return getToken(TorQLParser::COMMA, 0);
}


size_t TorQLParser::JoinOpCrossContext::getRuleIndex() const {
  return TorQLParser::RuleJoinOpCross;
}


std::any TorQLParser::JoinOpCrossContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinOpCross(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::JoinOpCrossContext* TorQLParser::joinOpCross() {
  JoinOpCrossContext *_localctx = _tracker.createInstance<JoinOpCrossContext>(_ctx, getState());
  enterRule(_localctx, 82, TorQLParser::RuleJoinOpCross);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(609);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case TorQLParser::CROSS: {
        enterOuterAlt(_localctx, 1);
        setState(606);
        match(TorQLParser::CROSS);
        setState(607);
        match(TorQLParser::JOIN);
        break;
      }

      case TorQLParser::COMMA: {
        enterOuterAlt(_localctx, 2);
        setState(608);
        match(TorQLParser::COMMA);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- JoinConstraintClauseContext ------------------------------------------------------------------

TorQLParser::JoinConstraintClauseContext::JoinConstraintClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::JoinConstraintClauseContext::ON() {
  return getToken(TorQLParser::ON, 0);
}

TorQLParser::ColumnExprListContext* TorQLParser::JoinConstraintClauseContext::columnExprList() {
  return getRuleContext<TorQLParser::ColumnExprListContext>(0);
}

tree::TerminalNode* TorQLParser::JoinConstraintClauseContext::USING() {
  return getToken(TorQLParser::USING, 0);
}

tree::TerminalNode* TorQLParser::JoinConstraintClauseContext::LPAREN() {
  return getToken(TorQLParser::LPAREN, 0);
}

tree::TerminalNode* TorQLParser::JoinConstraintClauseContext::RPAREN() {
  return getToken(TorQLParser::RPAREN, 0);
}


size_t TorQLParser::JoinConstraintClauseContext::getRuleIndex() const {
  return TorQLParser::RuleJoinConstraintClause;
}


std::any TorQLParser::JoinConstraintClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitJoinConstraintClause(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::JoinConstraintClauseContext* TorQLParser::joinConstraintClause() {
  JoinConstraintClauseContext *_localctx = _tracker.createInstance<JoinConstraintClauseContext>(_ctx, getState());
  enterRule(_localctx, 84, TorQLParser::RuleJoinConstraintClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(620);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(611);
      match(TorQLParser::ON);
      setState(612);
      columnExprList();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(613);
      match(TorQLParser::USING);
      setState(614);
      match(TorQLParser::LPAREN);
      setState(615);
      columnExprList();
      setState(616);
      match(TorQLParser::RPAREN);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(618);
      match(TorQLParser::USING);
      setState(619);
      columnExprList();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SampleClauseContext ------------------------------------------------------------------

TorQLParser::SampleClauseContext::SampleClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::SampleClauseContext::SAMPLE() {
  return getToken(TorQLParser::SAMPLE, 0);
}

std::vector<TorQLParser::RatioExprContext *> TorQLParser::SampleClauseContext::ratioExpr() {
  return getRuleContexts<TorQLParser::RatioExprContext>();
}

TorQLParser::RatioExprContext* TorQLParser::SampleClauseContext::ratioExpr(size_t i) {
  return getRuleContext<TorQLParser::RatioExprContext>(i);
}

tree::TerminalNode* TorQLParser::SampleClauseContext::OFFSET() {
  return getToken(TorQLParser::OFFSET, 0);
}


size_t TorQLParser::SampleClauseContext::getRuleIndex() const {
  return TorQLParser::RuleSampleClause;
}


std::any TorQLParser::SampleClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitSampleClause(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::SampleClauseContext* TorQLParser::sampleClause() {
  SampleClauseContext *_localctx = _tracker.createInstance<SampleClauseContext>(_ctx, getState());
  enterRule(_localctx, 86, TorQLParser::RuleSampleClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(622);
    match(TorQLParser::SAMPLE);
    setState(623);
    ratioExpr();
    setState(626);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx)) {
    case 1: {
      setState(624);
      match(TorQLParser::OFFSET);
      setState(625);
      ratioExpr();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrderExprListContext ------------------------------------------------------------------

TorQLParser::OrderExprListContext::OrderExprListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<TorQLParser::OrderExprContext *> TorQLParser::OrderExprListContext::orderExpr() {
  return getRuleContexts<TorQLParser::OrderExprContext>();
}

TorQLParser::OrderExprContext* TorQLParser::OrderExprListContext::orderExpr(size_t i) {
  return getRuleContext<TorQLParser::OrderExprContext>(i);
}

std::vector<tree::TerminalNode *> TorQLParser::OrderExprListContext::COMMA() {
  return getTokens(TorQLParser::COMMA);
}

tree::TerminalNode* TorQLParser::OrderExprListContext::COMMA(size_t i) {
  return getToken(TorQLParser::COMMA, i);
}


size_t TorQLParser::OrderExprListContext::getRuleIndex() const {
  return TorQLParser::RuleOrderExprList;
}


std::any TorQLParser::OrderExprListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitOrderExprList(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::OrderExprListContext* TorQLParser::orderExprList() {
  OrderExprListContext *_localctx = _tracker.createInstance<OrderExprListContext>(_ctx, getState());
  enterRule(_localctx, 88, TorQLParser::RuleOrderExprList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(628);
    orderExpr();
    setState(633);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == TorQLParser::COMMA) {
      setState(629);
      match(TorQLParser::COMMA);
      setState(630);
      orderExpr();
      setState(635);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrderExprContext ------------------------------------------------------------------

TorQLParser::OrderExprContext::OrderExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

TorQLParser::ColumnExprContext* TorQLParser::OrderExprContext::columnExpr() {
  return getRuleContext<TorQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* TorQLParser::OrderExprContext::NULLS() {
  return getToken(TorQLParser::NULLS, 0);
}

tree::TerminalNode* TorQLParser::OrderExprContext::COLLATE() {
  return getToken(TorQLParser::COLLATE, 0);
}

tree::TerminalNode* TorQLParser::OrderExprContext::STRING_LITERAL() {
  return getToken(TorQLParser::STRING_LITERAL, 0);
}

tree::TerminalNode* TorQLParser::OrderExprContext::ASCENDING() {
  return getToken(TorQLParser::ASCENDING, 0);
}

tree::TerminalNode* TorQLParser::OrderExprContext::DESCENDING() {
  return getToken(TorQLParser::DESCENDING, 0);
}

tree::TerminalNode* TorQLParser::OrderExprContext::DESC() {
  return getToken(TorQLParser::DESC, 0);
}

tree::TerminalNode* TorQLParser::OrderExprContext::FIRST() {
  return getToken(TorQLParser::FIRST, 0);
}

tree::TerminalNode* TorQLParser::OrderExprContext::LAST() {
  return getToken(TorQLParser::LAST, 0);
}


size_t TorQLParser::OrderExprContext::getRuleIndex() const {
  return TorQLParser::RuleOrderExpr;
}


std::any TorQLParser::OrderExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitOrderExpr(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::OrderExprContext* TorQLParser::orderExpr() {
  OrderExprContext *_localctx = _tracker.createInstance<OrderExprContext>(_ctx, getState());
  enterRule(_localctx, 90, TorQLParser::RuleOrderExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(636);
    columnExpr(0);
    setState(638);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 12583040) != 0)) {
      setState(637);
      _la = _input->LA(1);
      if (!((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 12583040) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(642);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == TorQLParser::NULLS) {
      setState(640);
      match(TorQLParser::NULLS);
      setState(641);
      _la = _input->LA(1);
      if (!(_la == TorQLParser::FIRST

      || _la == TorQLParser::LAST)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(646);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == TorQLParser::COLLATE) {
      setState(644);
      match(TorQLParser::COLLATE);
      setState(645);
      match(TorQLParser::STRING_LITERAL);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RatioExprContext ------------------------------------------------------------------

TorQLParser::RatioExprContext::RatioExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

TorQLParser::PlaceholderContext* TorQLParser::RatioExprContext::placeholder() {
  return getRuleContext<TorQLParser::PlaceholderContext>(0);
}

std::vector<TorQLParser::NumberLiteralContext *> TorQLParser::RatioExprContext::numberLiteral() {
  return getRuleContexts<TorQLParser::NumberLiteralContext>();
}

TorQLParser::NumberLiteralContext* TorQLParser::RatioExprContext::numberLiteral(size_t i) {
  return getRuleContext<TorQLParser::NumberLiteralContext>(i);
}

tree::TerminalNode* TorQLParser::RatioExprContext::SLASH() {
  return getToken(TorQLParser::SLASH, 0);
}


size_t TorQLParser::RatioExprContext::getRuleIndex() const {
  return TorQLParser::RuleRatioExpr;
}


std::any TorQLParser::RatioExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitRatioExpr(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::RatioExprContext* TorQLParser::ratioExpr() {
  RatioExprContext *_localctx = _tracker.createInstance<RatioExprContext>(_ctx, getState());
  enterRule(_localctx, 92, TorQLParser::RuleRatioExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(654);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case TorQLParser::LBRACE: {
        enterOuterAlt(_localctx, 1);
        setState(648);
        placeholder();
        break;
      }

      case TorQLParser::INF:
      case TorQLParser::NAN_SQL:
      case TorQLParser::FLOATING_LITERAL:
      case TorQLParser::OCTAL_LITERAL:
      case TorQLParser::DECIMAL_LITERAL:
      case TorQLParser::HEXADECIMAL_LITERAL:
      case TorQLParser::DASH:
      case TorQLParser::DOT:
      case TorQLParser::PLUS: {
        enterOuterAlt(_localctx, 2);
        setState(649);
        numberLiteral();
        setState(652);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 81, _ctx)) {
        case 1: {
          setState(650);
          match(TorQLParser::SLASH);
          setState(651);
          numberLiteral();
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SettingExprListContext ------------------------------------------------------------------

TorQLParser::SettingExprListContext::SettingExprListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<TorQLParser::SettingExprContext *> TorQLParser::SettingExprListContext::settingExpr() {
  return getRuleContexts<TorQLParser::SettingExprContext>();
}

TorQLParser::SettingExprContext* TorQLParser::SettingExprListContext::settingExpr(size_t i) {
  return getRuleContext<TorQLParser::SettingExprContext>(i);
}

std::vector<tree::TerminalNode *> TorQLParser::SettingExprListContext::COMMA() {
  return getTokens(TorQLParser::COMMA);
}

tree::TerminalNode* TorQLParser::SettingExprListContext::COMMA(size_t i) {
  return getToken(TorQLParser::COMMA, i);
}


size_t TorQLParser::SettingExprListContext::getRuleIndex() const {
  return TorQLParser::RuleSettingExprList;
}


std::any TorQLParser::SettingExprListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitSettingExprList(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::SettingExprListContext* TorQLParser::settingExprList() {
  SettingExprListContext *_localctx = _tracker.createInstance<SettingExprListContext>(_ctx, getState());
  enterRule(_localctx, 94, TorQLParser::RuleSettingExprList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(656);
    settingExpr();
    setState(661);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == TorQLParser::COMMA) {
      setState(657);
      match(TorQLParser::COMMA);
      setState(658);
      settingExpr();
      setState(663);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SettingExprContext ------------------------------------------------------------------

TorQLParser::SettingExprContext::SettingExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

TorQLParser::IdentifierContext* TorQLParser::SettingExprContext::identifier() {
  return getRuleContext<TorQLParser::IdentifierContext>(0);
}

tree::TerminalNode* TorQLParser::SettingExprContext::EQ_SINGLE() {
  return getToken(TorQLParser::EQ_SINGLE, 0);
}

TorQLParser::LiteralContext* TorQLParser::SettingExprContext::literal() {
  return getRuleContext<TorQLParser::LiteralContext>(0);
}


size_t TorQLParser::SettingExprContext::getRuleIndex() const {
  return TorQLParser::RuleSettingExpr;
}


std::any TorQLParser::SettingExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitSettingExpr(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::SettingExprContext* TorQLParser::settingExpr() {
  SettingExprContext *_localctx = _tracker.createInstance<SettingExprContext>(_ctx, getState());
  enterRule(_localctx, 96, TorQLParser::RuleSettingExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(664);
    identifier();
    setState(665);
    match(TorQLParser::EQ_SINGLE);
    setState(666);
    literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WindowExprContext ------------------------------------------------------------------

TorQLParser::WindowExprContext::WindowExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

TorQLParser::WinPartitionByClauseContext* TorQLParser::WindowExprContext::winPartitionByClause() {
  return getRuleContext<TorQLParser::WinPartitionByClauseContext>(0);
}

TorQLParser::WinOrderByClauseContext* TorQLParser::WindowExprContext::winOrderByClause() {
  return getRuleContext<TorQLParser::WinOrderByClauseContext>(0);
}

TorQLParser::WinFrameClauseContext* TorQLParser::WindowExprContext::winFrameClause() {
  return getRuleContext<TorQLParser::WinFrameClauseContext>(0);
}


size_t TorQLParser::WindowExprContext::getRuleIndex() const {
  return TorQLParser::RuleWindowExpr;
}


std::any TorQLParser::WindowExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitWindowExpr(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::WindowExprContext* TorQLParser::windowExpr() {
  WindowExprContext *_localctx = _tracker.createInstance<WindowExprContext>(_ctx, getState());
  enterRule(_localctx, 98, TorQLParser::RuleWindowExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(669);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == TorQLParser::PARTITION) {
      setState(668);
      winPartitionByClause();
    }
    setState(672);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == TorQLParser::ORDER) {
      setState(671);
      winOrderByClause();
    }
    setState(675);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == TorQLParser::RANGE

    || _la == TorQLParser::ROWS) {
      setState(674);
      winFrameClause();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WinPartitionByClauseContext ------------------------------------------------------------------

TorQLParser::WinPartitionByClauseContext::WinPartitionByClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::WinPartitionByClauseContext::PARTITION() {
  return getToken(TorQLParser::PARTITION, 0);
}

tree::TerminalNode* TorQLParser::WinPartitionByClauseContext::BY() {
  return getToken(TorQLParser::BY, 0);
}

TorQLParser::ColumnExprListContext* TorQLParser::WinPartitionByClauseContext::columnExprList() {
  return getRuleContext<TorQLParser::ColumnExprListContext>(0);
}


size_t TorQLParser::WinPartitionByClauseContext::getRuleIndex() const {
  return TorQLParser::RuleWinPartitionByClause;
}


std::any TorQLParser::WinPartitionByClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitWinPartitionByClause(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::WinPartitionByClauseContext* TorQLParser::winPartitionByClause() {
  WinPartitionByClauseContext *_localctx = _tracker.createInstance<WinPartitionByClauseContext>(_ctx, getState());
  enterRule(_localctx, 100, TorQLParser::RuleWinPartitionByClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(677);
    match(TorQLParser::PARTITION);
    setState(678);
    match(TorQLParser::BY);
    setState(679);
    columnExprList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WinOrderByClauseContext ------------------------------------------------------------------

TorQLParser::WinOrderByClauseContext::WinOrderByClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::WinOrderByClauseContext::ORDER() {
  return getToken(TorQLParser::ORDER, 0);
}

tree::TerminalNode* TorQLParser::WinOrderByClauseContext::BY() {
  return getToken(TorQLParser::BY, 0);
}

TorQLParser::OrderExprListContext* TorQLParser::WinOrderByClauseContext::orderExprList() {
  return getRuleContext<TorQLParser::OrderExprListContext>(0);
}


size_t TorQLParser::WinOrderByClauseContext::getRuleIndex() const {
  return TorQLParser::RuleWinOrderByClause;
}


std::any TorQLParser::WinOrderByClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitWinOrderByClause(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::WinOrderByClauseContext* TorQLParser::winOrderByClause() {
  WinOrderByClauseContext *_localctx = _tracker.createInstance<WinOrderByClauseContext>(_ctx, getState());
  enterRule(_localctx, 102, TorQLParser::RuleWinOrderByClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(681);
    match(TorQLParser::ORDER);
    setState(682);
    match(TorQLParser::BY);
    setState(683);
    orderExprList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WinFrameClauseContext ------------------------------------------------------------------

TorQLParser::WinFrameClauseContext::WinFrameClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

TorQLParser::WinFrameExtendContext* TorQLParser::WinFrameClauseContext::winFrameExtend() {
  return getRuleContext<TorQLParser::WinFrameExtendContext>(0);
}

tree::TerminalNode* TorQLParser::WinFrameClauseContext::ROWS() {
  return getToken(TorQLParser::ROWS, 0);
}

tree::TerminalNode* TorQLParser::WinFrameClauseContext::RANGE() {
  return getToken(TorQLParser::RANGE, 0);
}


size_t TorQLParser::WinFrameClauseContext::getRuleIndex() const {
  return TorQLParser::RuleWinFrameClause;
}


std::any TorQLParser::WinFrameClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitWinFrameClause(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::WinFrameClauseContext* TorQLParser::winFrameClause() {
  WinFrameClauseContext *_localctx = _tracker.createInstance<WinFrameClauseContext>(_ctx, getState());
  enterRule(_localctx, 104, TorQLParser::RuleWinFrameClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(685);
    _la = _input->LA(1);
    if (!(_la == TorQLParser::RANGE

    || _la == TorQLParser::ROWS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(686);
    winFrameExtend();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WinFrameExtendContext ------------------------------------------------------------------

TorQLParser::WinFrameExtendContext::WinFrameExtendContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t TorQLParser::WinFrameExtendContext::getRuleIndex() const {
  return TorQLParser::RuleWinFrameExtend;
}

void TorQLParser::WinFrameExtendContext::copyFrom(WinFrameExtendContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- FrameStartContext ------------------------------------------------------------------

TorQLParser::WinFrameBoundContext* TorQLParser::FrameStartContext::winFrameBound() {
  return getRuleContext<TorQLParser::WinFrameBoundContext>(0);
}

TorQLParser::FrameStartContext::FrameStartContext(WinFrameExtendContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::FrameStartContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitFrameStart(this);
  else
    return visitor->visitChildren(this);
}
//----------------- FrameBetweenContext ------------------------------------------------------------------

tree::TerminalNode* TorQLParser::FrameBetweenContext::BETWEEN() {
  return getToken(TorQLParser::BETWEEN, 0);
}

std::vector<TorQLParser::WinFrameBoundContext *> TorQLParser::FrameBetweenContext::winFrameBound() {
  return getRuleContexts<TorQLParser::WinFrameBoundContext>();
}

TorQLParser::WinFrameBoundContext* TorQLParser::FrameBetweenContext::winFrameBound(size_t i) {
  return getRuleContext<TorQLParser::WinFrameBoundContext>(i);
}

tree::TerminalNode* TorQLParser::FrameBetweenContext::AND() {
  return getToken(TorQLParser::AND, 0);
}

TorQLParser::FrameBetweenContext::FrameBetweenContext(WinFrameExtendContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::FrameBetweenContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitFrameBetween(this);
  else
    return visitor->visitChildren(this);
}
TorQLParser::WinFrameExtendContext* TorQLParser::winFrameExtend() {
  WinFrameExtendContext *_localctx = _tracker.createInstance<WinFrameExtendContext>(_ctx, getState());
  enterRule(_localctx, 106, TorQLParser::RuleWinFrameExtend);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(694);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case TorQLParser::CURRENT:
      case TorQLParser::INF:
      case TorQLParser::NAN_SQL:
      case TorQLParser::UNBOUNDED:
      case TorQLParser::FLOATING_LITERAL:
      case TorQLParser::OCTAL_LITERAL:
      case TorQLParser::DECIMAL_LITERAL:
      case TorQLParser::HEXADECIMAL_LITERAL:
      case TorQLParser::DASH:
      case TorQLParser::DOT:
      case TorQLParser::PLUS: {
        _localctx = _tracker.createInstance<TorQLParser::FrameStartContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(688);
        winFrameBound();
        break;
      }

      case TorQLParser::BETWEEN: {
        _localctx = _tracker.createInstance<TorQLParser::FrameBetweenContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(689);
        match(TorQLParser::BETWEEN);
        setState(690);
        winFrameBound();
        setState(691);
        match(TorQLParser::AND);
        setState(692);
        winFrameBound();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WinFrameBoundContext ------------------------------------------------------------------

TorQLParser::WinFrameBoundContext::WinFrameBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::WinFrameBoundContext::CURRENT() {
  return getToken(TorQLParser::CURRENT, 0);
}

tree::TerminalNode* TorQLParser::WinFrameBoundContext::ROW() {
  return getToken(TorQLParser::ROW, 0);
}

tree::TerminalNode* TorQLParser::WinFrameBoundContext::UNBOUNDED() {
  return getToken(TorQLParser::UNBOUNDED, 0);
}

tree::TerminalNode* TorQLParser::WinFrameBoundContext::PRECEDING() {
  return getToken(TorQLParser::PRECEDING, 0);
}

tree::TerminalNode* TorQLParser::WinFrameBoundContext::FOLLOWING() {
  return getToken(TorQLParser::FOLLOWING, 0);
}

TorQLParser::NumberLiteralContext* TorQLParser::WinFrameBoundContext::numberLiteral() {
  return getRuleContext<TorQLParser::NumberLiteralContext>(0);
}


size_t TorQLParser::WinFrameBoundContext::getRuleIndex() const {
  return TorQLParser::RuleWinFrameBound;
}


std::any TorQLParser::WinFrameBoundContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitWinFrameBound(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::WinFrameBoundContext* TorQLParser::winFrameBound() {
  WinFrameBoundContext *_localctx = _tracker.createInstance<WinFrameBoundContext>(_ctx, getState());
  enterRule(_localctx, 108, TorQLParser::RuleWinFrameBound);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(708);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 88, _ctx)) {
    case 1: {
      setState(696);
      match(TorQLParser::CURRENT);
      setState(697);
      match(TorQLParser::ROW);
      break;
    }

    case 2: {
      setState(698);
      match(TorQLParser::UNBOUNDED);
      setState(699);
      match(TorQLParser::PRECEDING);
      break;
    }

    case 3: {
      setState(700);
      match(TorQLParser::UNBOUNDED);
      setState(701);
      match(TorQLParser::FOLLOWING);
      break;
    }

    case 4: {
      setState(702);
      numberLiteral();
      setState(703);
      match(TorQLParser::PRECEDING);
      break;
    }

    case 5: {
      setState(705);
      numberLiteral();
      setState(706);
      match(TorQLParser::FOLLOWING);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExprContext ------------------------------------------------------------------

TorQLParser::ExprContext::ExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

TorQLParser::ColumnExprContext* TorQLParser::ExprContext::columnExpr() {
  return getRuleContext<TorQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* TorQLParser::ExprContext::EOF() {
  return getToken(TorQLParser::EOF, 0);
}


size_t TorQLParser::ExprContext::getRuleIndex() const {
  return TorQLParser::RuleExpr;
}


std::any TorQLParser::ExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitExpr(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::ExprContext* TorQLParser::expr() {
  ExprContext *_localctx = _tracker.createInstance<ExprContext>(_ctx, getState());
  enterRule(_localctx, 110, TorQLParser::RuleExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(710);
    columnExpr(0);
    setState(711);
    match(TorQLParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ColumnTypeExprContext ------------------------------------------------------------------

TorQLParser::ColumnTypeExprContext::ColumnTypeExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t TorQLParser::ColumnTypeExprContext::getRuleIndex() const {
  return TorQLParser::RuleColumnTypeExpr;
}

void TorQLParser::ColumnTypeExprContext::copyFrom(ColumnTypeExprContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ColumnTypeExprNestedContext ------------------------------------------------------------------

std::vector<TorQLParser::IdentifierContext *> TorQLParser::ColumnTypeExprNestedContext::identifier() {
  return getRuleContexts<TorQLParser::IdentifierContext>();
}

TorQLParser::IdentifierContext* TorQLParser::ColumnTypeExprNestedContext::identifier(size_t i) {
  return getRuleContext<TorQLParser::IdentifierContext>(i);
}

tree::TerminalNode* TorQLParser::ColumnTypeExprNestedContext::LPAREN() {
  return getToken(TorQLParser::LPAREN, 0);
}

std::vector<TorQLParser::ColumnTypeExprContext *> TorQLParser::ColumnTypeExprNestedContext::columnTypeExpr() {
  return getRuleContexts<TorQLParser::ColumnTypeExprContext>();
}

TorQLParser::ColumnTypeExprContext* TorQLParser::ColumnTypeExprNestedContext::columnTypeExpr(size_t i) {
  return getRuleContext<TorQLParser::ColumnTypeExprContext>(i);
}

tree::TerminalNode* TorQLParser::ColumnTypeExprNestedContext::RPAREN() {
  return getToken(TorQLParser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> TorQLParser::ColumnTypeExprNestedContext::COMMA() {
  return getTokens(TorQLParser::COMMA);
}

tree::TerminalNode* TorQLParser::ColumnTypeExprNestedContext::COMMA(size_t i) {
  return getToken(TorQLParser::COMMA, i);
}

TorQLParser::ColumnTypeExprNestedContext::ColumnTypeExprNestedContext(ColumnTypeExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnTypeExprNestedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnTypeExprNested(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnTypeExprParamContext ------------------------------------------------------------------

TorQLParser::IdentifierContext* TorQLParser::ColumnTypeExprParamContext::identifier() {
  return getRuleContext<TorQLParser::IdentifierContext>(0);
}

tree::TerminalNode* TorQLParser::ColumnTypeExprParamContext::LPAREN() {
  return getToken(TorQLParser::LPAREN, 0);
}

tree::TerminalNode* TorQLParser::ColumnTypeExprParamContext::RPAREN() {
  return getToken(TorQLParser::RPAREN, 0);
}

TorQLParser::ColumnExprListContext* TorQLParser::ColumnTypeExprParamContext::columnExprList() {
  return getRuleContext<TorQLParser::ColumnExprListContext>(0);
}

TorQLParser::ColumnTypeExprParamContext::ColumnTypeExprParamContext(ColumnTypeExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnTypeExprParamContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnTypeExprParam(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnTypeExprSimpleContext ------------------------------------------------------------------

TorQLParser::IdentifierContext* TorQLParser::ColumnTypeExprSimpleContext::identifier() {
  return getRuleContext<TorQLParser::IdentifierContext>(0);
}

TorQLParser::ColumnTypeExprSimpleContext::ColumnTypeExprSimpleContext(ColumnTypeExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnTypeExprSimpleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnTypeExprSimple(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnTypeExprComplexContext ------------------------------------------------------------------

TorQLParser::IdentifierContext* TorQLParser::ColumnTypeExprComplexContext::identifier() {
  return getRuleContext<TorQLParser::IdentifierContext>(0);
}

tree::TerminalNode* TorQLParser::ColumnTypeExprComplexContext::LPAREN() {
  return getToken(TorQLParser::LPAREN, 0);
}

std::vector<TorQLParser::ColumnTypeExprContext *> TorQLParser::ColumnTypeExprComplexContext::columnTypeExpr() {
  return getRuleContexts<TorQLParser::ColumnTypeExprContext>();
}

TorQLParser::ColumnTypeExprContext* TorQLParser::ColumnTypeExprComplexContext::columnTypeExpr(size_t i) {
  return getRuleContext<TorQLParser::ColumnTypeExprContext>(i);
}

tree::TerminalNode* TorQLParser::ColumnTypeExprComplexContext::RPAREN() {
  return getToken(TorQLParser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> TorQLParser::ColumnTypeExprComplexContext::COMMA() {
  return getTokens(TorQLParser::COMMA);
}

tree::TerminalNode* TorQLParser::ColumnTypeExprComplexContext::COMMA(size_t i) {
  return getToken(TorQLParser::COMMA, i);
}

TorQLParser::ColumnTypeExprComplexContext::ColumnTypeExprComplexContext(ColumnTypeExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnTypeExprComplexContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnTypeExprComplex(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnTypeExprEnumContext ------------------------------------------------------------------

TorQLParser::IdentifierContext* TorQLParser::ColumnTypeExprEnumContext::identifier() {
  return getRuleContext<TorQLParser::IdentifierContext>(0);
}

tree::TerminalNode* TorQLParser::ColumnTypeExprEnumContext::LPAREN() {
  return getToken(TorQLParser::LPAREN, 0);
}

std::vector<TorQLParser::EnumValueContext *> TorQLParser::ColumnTypeExprEnumContext::enumValue() {
  return getRuleContexts<TorQLParser::EnumValueContext>();
}

TorQLParser::EnumValueContext* TorQLParser::ColumnTypeExprEnumContext::enumValue(size_t i) {
  return getRuleContext<TorQLParser::EnumValueContext>(i);
}

tree::TerminalNode* TorQLParser::ColumnTypeExprEnumContext::RPAREN() {
  return getToken(TorQLParser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> TorQLParser::ColumnTypeExprEnumContext::COMMA() {
  return getTokens(TorQLParser::COMMA);
}

tree::TerminalNode* TorQLParser::ColumnTypeExprEnumContext::COMMA(size_t i) {
  return getToken(TorQLParser::COMMA, i);
}

TorQLParser::ColumnTypeExprEnumContext::ColumnTypeExprEnumContext(ColumnTypeExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnTypeExprEnumContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnTypeExprEnum(this);
  else
    return visitor->visitChildren(this);
}
TorQLParser::ColumnTypeExprContext* TorQLParser::columnTypeExpr() {
  ColumnTypeExprContext *_localctx = _tracker.createInstance<ColumnTypeExprContext>(_ctx, getState());
  enterRule(_localctx, 112, TorQLParser::RuleColumnTypeExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(769);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 96, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<TorQLParser::ColumnTypeExprSimpleContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(713);
      identifier();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<TorQLParser::ColumnTypeExprNestedContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(714);
      identifier();
      setState(715);
      match(TorQLParser::LPAREN);
      setState(716);
      identifier();
      setState(717);
      columnTypeExpr();
      setState(724);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 89, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(718);
          match(TorQLParser::COMMA);
          setState(719);
          identifier();
          setState(720);
          columnTypeExpr(); 
        }
        setState(726);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 89, _ctx);
      }
      setState(728);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == TorQLParser::COMMA) {
        setState(727);
        match(TorQLParser::COMMA);
      }
      setState(730);
      match(TorQLParser::RPAREN);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<TorQLParser::ColumnTypeExprEnumContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(732);
      identifier();
      setState(733);
      match(TorQLParser::LPAREN);
      setState(734);
      enumValue();
      setState(739);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(735);
          match(TorQLParser::COMMA);
          setState(736);
          enumValue(); 
        }
        setState(741);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx);
      }
      setState(743);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == TorQLParser::COMMA) {
        setState(742);
        match(TorQLParser::COMMA);
      }
      setState(745);
      match(TorQLParser::RPAREN);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<TorQLParser::ColumnTypeExprComplexContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(747);
      identifier();
      setState(748);
      match(TorQLParser::LPAREN);
      setState(749);
      columnTypeExpr();
      setState(754);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 93, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(750);
          match(TorQLParser::COMMA);
          setState(751);
          columnTypeExpr(); 
        }
        setState(756);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 93, _ctx);
      }
      setState(758);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == TorQLParser::COMMA) {
        setState(757);
        match(TorQLParser::COMMA);
      }
      setState(760);
      match(TorQLParser::RPAREN);
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<TorQLParser::ColumnTypeExprParamContext>(_localctx);
      enterOuterAlt(_localctx, 5);
      setState(762);
      identifier();
      setState(763);
      match(TorQLParser::LPAREN);
      setState(765);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -9007270658588674) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 180986072486903807) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & 18455) != 0)) {
        setState(764);
        columnExprList();
      }
      setState(767);
      match(TorQLParser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ColumnExprListContext ------------------------------------------------------------------

TorQLParser::ColumnExprListContext::ColumnExprListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<TorQLParser::ColumnExprContext *> TorQLParser::ColumnExprListContext::columnExpr() {
  return getRuleContexts<TorQLParser::ColumnExprContext>();
}

TorQLParser::ColumnExprContext* TorQLParser::ColumnExprListContext::columnExpr(size_t i) {
  return getRuleContext<TorQLParser::ColumnExprContext>(i);
}

std::vector<tree::TerminalNode *> TorQLParser::ColumnExprListContext::COMMA() {
  return getTokens(TorQLParser::COMMA);
}

tree::TerminalNode* TorQLParser::ColumnExprListContext::COMMA(size_t i) {
  return getToken(TorQLParser::COMMA, i);
}


size_t TorQLParser::ColumnExprListContext::getRuleIndex() const {
  return TorQLParser::RuleColumnExprList;
}


std::any TorQLParser::ColumnExprListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprList(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::ColumnExprListContext* TorQLParser::columnExprList() {
  ColumnExprListContext *_localctx = _tracker.createInstance<ColumnExprListContext>(_ctx, getState());
  enterRule(_localctx, 114, TorQLParser::RuleColumnExprList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(771);
    columnExpr(0);
    setState(776);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(772);
        match(TorQLParser::COMMA);
        setState(773);
        columnExpr(0); 
      }
      setState(778);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx);
    }
    setState(780);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx)) {
    case 1: {
      setState(779);
      match(TorQLParser::COMMA);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ColumnExprContext ------------------------------------------------------------------

TorQLParser::ColumnExprContext::ColumnExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t TorQLParser::ColumnExprContext::getRuleIndex() const {
  return TorQLParser::RuleColumnExpr;
}

void TorQLParser::ColumnExprContext::copyFrom(ColumnExprContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ColumnExprTernaryOpContext ------------------------------------------------------------------

std::vector<TorQLParser::ColumnExprContext *> TorQLParser::ColumnExprTernaryOpContext::columnExpr() {
  return getRuleContexts<TorQLParser::ColumnExprContext>();
}

TorQLParser::ColumnExprContext* TorQLParser::ColumnExprTernaryOpContext::columnExpr(size_t i) {
  return getRuleContext<TorQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* TorQLParser::ColumnExprTernaryOpContext::QUERY() {
  return getToken(TorQLParser::QUERY, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprTernaryOpContext::COLON() {
  return getToken(TorQLParser::COLON, 0);
}

TorQLParser::ColumnExprTernaryOpContext::ColumnExprTernaryOpContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnExprTernaryOpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprTernaryOp(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprAliasContext ------------------------------------------------------------------

TorQLParser::ColumnExprContext* TorQLParser::ColumnExprAliasContext::columnExpr() {
  return getRuleContext<TorQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* TorQLParser::ColumnExprAliasContext::AS() {
  return getToken(TorQLParser::AS, 0);
}

TorQLParser::IdentifierContext* TorQLParser::ColumnExprAliasContext::identifier() {
  return getRuleContext<TorQLParser::IdentifierContext>(0);
}

tree::TerminalNode* TorQLParser::ColumnExprAliasContext::STRING_LITERAL() {
  return getToken(TorQLParser::STRING_LITERAL, 0);
}

TorQLParser::ColumnExprAliasContext::ColumnExprAliasContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnExprAliasContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprAlias(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprNegateContext ------------------------------------------------------------------

tree::TerminalNode* TorQLParser::ColumnExprNegateContext::DASH() {
  return getToken(TorQLParser::DASH, 0);
}

TorQLParser::ColumnExprContext* TorQLParser::ColumnExprNegateContext::columnExpr() {
  return getRuleContext<TorQLParser::ColumnExprContext>(0);
}

TorQLParser::ColumnExprNegateContext::ColumnExprNegateContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnExprNegateContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprNegate(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprDictContext ------------------------------------------------------------------

tree::TerminalNode* TorQLParser::ColumnExprDictContext::LBRACE() {
  return getToken(TorQLParser::LBRACE, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprDictContext::RBRACE() {
  return getToken(TorQLParser::RBRACE, 0);
}

TorQLParser::KvPairListContext* TorQLParser::ColumnExprDictContext::kvPairList() {
  return getRuleContext<TorQLParser::KvPairListContext>(0);
}

TorQLParser::ColumnExprDictContext::ColumnExprDictContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnExprDictContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprDict(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprSubqueryContext ------------------------------------------------------------------

tree::TerminalNode* TorQLParser::ColumnExprSubqueryContext::LPAREN() {
  return getToken(TorQLParser::LPAREN, 0);
}

TorQLParser::SelectUnionStmtContext* TorQLParser::ColumnExprSubqueryContext::selectUnionStmt() {
  return getRuleContext<TorQLParser::SelectUnionStmtContext>(0);
}

tree::TerminalNode* TorQLParser::ColumnExprSubqueryContext::RPAREN() {
  return getToken(TorQLParser::RPAREN, 0);
}

TorQLParser::ColumnExprSubqueryContext::ColumnExprSubqueryContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnExprSubqueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprSubquery(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprLiteralContext ------------------------------------------------------------------

TorQLParser::LiteralContext* TorQLParser::ColumnExprLiteralContext::literal() {
  return getRuleContext<TorQLParser::LiteralContext>(0);
}

TorQLParser::ColumnExprLiteralContext::ColumnExprLiteralContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnExprLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprArrayContext ------------------------------------------------------------------

tree::TerminalNode* TorQLParser::ColumnExprArrayContext::LBRACKET() {
  return getToken(TorQLParser::LBRACKET, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprArrayContext::RBRACKET() {
  return getToken(TorQLParser::RBRACKET, 0);
}

TorQLParser::ColumnExprListContext* TorQLParser::ColumnExprArrayContext::columnExprList() {
  return getRuleContext<TorQLParser::ColumnExprListContext>(0);
}

TorQLParser::ColumnExprArrayContext::ColumnExprArrayContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnExprArrayContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprArray(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprSubstringContext ------------------------------------------------------------------

tree::TerminalNode* TorQLParser::ColumnExprSubstringContext::SUBSTRING() {
  return getToken(TorQLParser::SUBSTRING, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprSubstringContext::LPAREN() {
  return getToken(TorQLParser::LPAREN, 0);
}

std::vector<TorQLParser::ColumnExprContext *> TorQLParser::ColumnExprSubstringContext::columnExpr() {
  return getRuleContexts<TorQLParser::ColumnExprContext>();
}

TorQLParser::ColumnExprContext* TorQLParser::ColumnExprSubstringContext::columnExpr(size_t i) {
  return getRuleContext<TorQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* TorQLParser::ColumnExprSubstringContext::FROM() {
  return getToken(TorQLParser::FROM, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprSubstringContext::RPAREN() {
  return getToken(TorQLParser::RPAREN, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprSubstringContext::FOR() {
  return getToken(TorQLParser::FOR, 0);
}

TorQLParser::ColumnExprSubstringContext::ColumnExprSubstringContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnExprSubstringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprSubstring(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprCastContext ------------------------------------------------------------------

tree::TerminalNode* TorQLParser::ColumnExprCastContext::CAST() {
  return getToken(TorQLParser::CAST, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprCastContext::LPAREN() {
  return getToken(TorQLParser::LPAREN, 0);
}

TorQLParser::ColumnExprContext* TorQLParser::ColumnExprCastContext::columnExpr() {
  return getRuleContext<TorQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* TorQLParser::ColumnExprCastContext::AS() {
  return getToken(TorQLParser::AS, 0);
}

TorQLParser::ColumnTypeExprContext* TorQLParser::ColumnExprCastContext::columnTypeExpr() {
  return getRuleContext<TorQLParser::ColumnTypeExprContext>(0);
}

tree::TerminalNode* TorQLParser::ColumnExprCastContext::RPAREN() {
  return getToken(TorQLParser::RPAREN, 0);
}

TorQLParser::ColumnExprCastContext::ColumnExprCastContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnExprCastContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprCast(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprOrContext ------------------------------------------------------------------

std::vector<TorQLParser::ColumnExprContext *> TorQLParser::ColumnExprOrContext::columnExpr() {
  return getRuleContexts<TorQLParser::ColumnExprContext>();
}

TorQLParser::ColumnExprContext* TorQLParser::ColumnExprOrContext::columnExpr(size_t i) {
  return getRuleContext<TorQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* TorQLParser::ColumnExprOrContext::OR() {
  return getToken(TorQLParser::OR, 0);
}

TorQLParser::ColumnExprOrContext::ColumnExprOrContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnExprOrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprOr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprNullTupleAccessContext ------------------------------------------------------------------

TorQLParser::ColumnExprContext* TorQLParser::ColumnExprNullTupleAccessContext::columnExpr() {
  return getRuleContext<TorQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* TorQLParser::ColumnExprNullTupleAccessContext::NULL_PROPERTY() {
  return getToken(TorQLParser::NULL_PROPERTY, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprNullTupleAccessContext::DECIMAL_LITERAL() {
  return getToken(TorQLParser::DECIMAL_LITERAL, 0);
}

TorQLParser::ColumnExprNullTupleAccessContext::ColumnExprNullTupleAccessContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnExprNullTupleAccessContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprNullTupleAccess(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprPrecedence1Context ------------------------------------------------------------------

std::vector<TorQLParser::ColumnExprContext *> TorQLParser::ColumnExprPrecedence1Context::columnExpr() {
  return getRuleContexts<TorQLParser::ColumnExprContext>();
}

TorQLParser::ColumnExprContext* TorQLParser::ColumnExprPrecedence1Context::columnExpr(size_t i) {
  return getRuleContext<TorQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* TorQLParser::ColumnExprPrecedence1Context::ASTERISK() {
  return getToken(TorQLParser::ASTERISK, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprPrecedence1Context::SLASH() {
  return getToken(TorQLParser::SLASH, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprPrecedence1Context::PERCENT() {
  return getToken(TorQLParser::PERCENT, 0);
}

TorQLParser::ColumnExprPrecedence1Context::ColumnExprPrecedence1Context(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnExprPrecedence1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprPrecedence1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprPrecedence2Context ------------------------------------------------------------------

std::vector<TorQLParser::ColumnExprContext *> TorQLParser::ColumnExprPrecedence2Context::columnExpr() {
  return getRuleContexts<TorQLParser::ColumnExprContext>();
}

TorQLParser::ColumnExprContext* TorQLParser::ColumnExprPrecedence2Context::columnExpr(size_t i) {
  return getRuleContext<TorQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* TorQLParser::ColumnExprPrecedence2Context::PLUS() {
  return getToken(TorQLParser::PLUS, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprPrecedence2Context::DASH() {
  return getToken(TorQLParser::DASH, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprPrecedence2Context::CONCAT() {
  return getToken(TorQLParser::CONCAT, 0);
}

TorQLParser::ColumnExprPrecedence2Context::ColumnExprPrecedence2Context(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnExprPrecedence2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprPrecedence2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprPrecedence3Context ------------------------------------------------------------------

std::vector<TorQLParser::ColumnExprContext *> TorQLParser::ColumnExprPrecedence3Context::columnExpr() {
  return getRuleContexts<TorQLParser::ColumnExprContext>();
}

TorQLParser::ColumnExprContext* TorQLParser::ColumnExprPrecedence3Context::columnExpr(size_t i) {
  return getRuleContext<TorQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* TorQLParser::ColumnExprPrecedence3Context::IN() {
  return getToken(TorQLParser::IN, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprPrecedence3Context::EQ_DOUBLE() {
  return getToken(TorQLParser::EQ_DOUBLE, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprPrecedence3Context::EQ_SINGLE() {
  return getToken(TorQLParser::EQ_SINGLE, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprPrecedence3Context::NOT_EQ() {
  return getToken(TorQLParser::NOT_EQ, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprPrecedence3Context::LT_EQ() {
  return getToken(TorQLParser::LT_EQ, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprPrecedence3Context::LT() {
  return getToken(TorQLParser::LT, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprPrecedence3Context::GT_EQ() {
  return getToken(TorQLParser::GT_EQ, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprPrecedence3Context::GT() {
  return getToken(TorQLParser::GT, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprPrecedence3Context::LIKE() {
  return getToken(TorQLParser::LIKE, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprPrecedence3Context::ILIKE() {
  return getToken(TorQLParser::ILIKE, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprPrecedence3Context::REGEX_SINGLE() {
  return getToken(TorQLParser::REGEX_SINGLE, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprPrecedence3Context::REGEX_DOUBLE() {
  return getToken(TorQLParser::REGEX_DOUBLE, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprPrecedence3Context::NOT_REGEX() {
  return getToken(TorQLParser::NOT_REGEX, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprPrecedence3Context::IREGEX_SINGLE() {
  return getToken(TorQLParser::IREGEX_SINGLE, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprPrecedence3Context::IREGEX_DOUBLE() {
  return getToken(TorQLParser::IREGEX_DOUBLE, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprPrecedence3Context::NOT_IREGEX() {
  return getToken(TorQLParser::NOT_IREGEX, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprPrecedence3Context::COHORT() {
  return getToken(TorQLParser::COHORT, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprPrecedence3Context::NOT() {
  return getToken(TorQLParser::NOT, 0);
}

TorQLParser::ColumnExprPrecedence3Context::ColumnExprPrecedence3Context(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnExprPrecedence3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprPrecedence3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprIntervalContext ------------------------------------------------------------------

tree::TerminalNode* TorQLParser::ColumnExprIntervalContext::INTERVAL() {
  return getToken(TorQLParser::INTERVAL, 0);
}

TorQLParser::ColumnExprContext* TorQLParser::ColumnExprIntervalContext::columnExpr() {
  return getRuleContext<TorQLParser::ColumnExprContext>(0);
}

TorQLParser::IntervalContext* TorQLParser::ColumnExprIntervalContext::interval() {
  return getRuleContext<TorQLParser::IntervalContext>(0);
}

TorQLParser::ColumnExprIntervalContext::ColumnExprIntervalContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnExprIntervalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprInterval(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprIsNullContext ------------------------------------------------------------------

TorQLParser::ColumnExprContext* TorQLParser::ColumnExprIsNullContext::columnExpr() {
  return getRuleContext<TorQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* TorQLParser::ColumnExprIsNullContext::IS() {
  return getToken(TorQLParser::IS, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprIsNullContext::NULL_SQL() {
  return getToken(TorQLParser::NULL_SQL, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprIsNullContext::NOT() {
  return getToken(TorQLParser::NOT, 0);
}

TorQLParser::ColumnExprIsNullContext::ColumnExprIsNullContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnExprIsNullContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprIsNull(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprWinFunctionTargetContext ------------------------------------------------------------------

std::vector<TorQLParser::IdentifierContext *> TorQLParser::ColumnExprWinFunctionTargetContext::identifier() {
  return getRuleContexts<TorQLParser::IdentifierContext>();
}

TorQLParser::IdentifierContext* TorQLParser::ColumnExprWinFunctionTargetContext::identifier(size_t i) {
  return getRuleContext<TorQLParser::IdentifierContext>(i);
}

tree::TerminalNode* TorQLParser::ColumnExprWinFunctionTargetContext::OVER() {
  return getToken(TorQLParser::OVER, 0);
}

std::vector<tree::TerminalNode *> TorQLParser::ColumnExprWinFunctionTargetContext::LPAREN() {
  return getTokens(TorQLParser::LPAREN);
}

tree::TerminalNode* TorQLParser::ColumnExprWinFunctionTargetContext::LPAREN(size_t i) {
  return getToken(TorQLParser::LPAREN, i);
}

std::vector<tree::TerminalNode *> TorQLParser::ColumnExprWinFunctionTargetContext::RPAREN() {
  return getTokens(TorQLParser::RPAREN);
}

tree::TerminalNode* TorQLParser::ColumnExprWinFunctionTargetContext::RPAREN(size_t i) {
  return getToken(TorQLParser::RPAREN, i);
}

std::vector<TorQLParser::ColumnExprListContext *> TorQLParser::ColumnExprWinFunctionTargetContext::columnExprList() {
  return getRuleContexts<TorQLParser::ColumnExprListContext>();
}

TorQLParser::ColumnExprListContext* TorQLParser::ColumnExprWinFunctionTargetContext::columnExprList(size_t i) {
  return getRuleContext<TorQLParser::ColumnExprListContext>(i);
}

tree::TerminalNode* TorQLParser::ColumnExprWinFunctionTargetContext::DISTINCT() {
  return getToken(TorQLParser::DISTINCT, 0);
}

TorQLParser::ColumnExprWinFunctionTargetContext::ColumnExprWinFunctionTargetContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnExprWinFunctionTargetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprWinFunctionTarget(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprNullPropertyAccessContext ------------------------------------------------------------------

TorQLParser::ColumnExprContext* TorQLParser::ColumnExprNullPropertyAccessContext::columnExpr() {
  return getRuleContext<TorQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* TorQLParser::ColumnExprNullPropertyAccessContext::NULL_PROPERTY() {
  return getToken(TorQLParser::NULL_PROPERTY, 0);
}

TorQLParser::IdentifierContext* TorQLParser::ColumnExprNullPropertyAccessContext::identifier() {
  return getRuleContext<TorQLParser::IdentifierContext>(0);
}

TorQLParser::ColumnExprNullPropertyAccessContext::ColumnExprNullPropertyAccessContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnExprNullPropertyAccessContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprNullPropertyAccess(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprTrimContext ------------------------------------------------------------------

tree::TerminalNode* TorQLParser::ColumnExprTrimContext::TRIM() {
  return getToken(TorQLParser::TRIM, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprTrimContext::LPAREN() {
  return getToken(TorQLParser::LPAREN, 0);
}

TorQLParser::StringContext* TorQLParser::ColumnExprTrimContext::string() {
  return getRuleContext<TorQLParser::StringContext>(0);
}

tree::TerminalNode* TorQLParser::ColumnExprTrimContext::FROM() {
  return getToken(TorQLParser::FROM, 0);
}

TorQLParser::ColumnExprContext* TorQLParser::ColumnExprTrimContext::columnExpr() {
  return getRuleContext<TorQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* TorQLParser::ColumnExprTrimContext::RPAREN() {
  return getToken(TorQLParser::RPAREN, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprTrimContext::BOTH() {
  return getToken(TorQLParser::BOTH, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprTrimContext::LEADING() {
  return getToken(TorQLParser::LEADING, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprTrimContext::TRAILING() {
  return getToken(TorQLParser::TRAILING, 0);
}

TorQLParser::ColumnExprTrimContext::ColumnExprTrimContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnExprTrimContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprTrim(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprTagElementContext ------------------------------------------------------------------

TorQLParser::TorqlxTagElementContext* TorQLParser::ColumnExprTagElementContext::torqlxTagElement() {
  return getRuleContext<TorQLParser::TorqlxTagElementContext>(0);
}

TorQLParser::ColumnExprTagElementContext::ColumnExprTagElementContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnExprTagElementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprTagElement(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprTemplateStringContext ------------------------------------------------------------------

TorQLParser::TemplateStringContext* TorQLParser::ColumnExprTemplateStringContext::templateString() {
  return getRuleContext<TorQLParser::TemplateStringContext>(0);
}

TorQLParser::ColumnExprTemplateStringContext::ColumnExprTemplateStringContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnExprTemplateStringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprTemplateString(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprTupleContext ------------------------------------------------------------------

tree::TerminalNode* TorQLParser::ColumnExprTupleContext::LPAREN() {
  return getToken(TorQLParser::LPAREN, 0);
}

TorQLParser::ColumnExprListContext* TorQLParser::ColumnExprTupleContext::columnExprList() {
  return getRuleContext<TorQLParser::ColumnExprListContext>(0);
}

tree::TerminalNode* TorQLParser::ColumnExprTupleContext::RPAREN() {
  return getToken(TorQLParser::RPAREN, 0);
}

TorQLParser::ColumnExprTupleContext::ColumnExprTupleContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnExprTupleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprTuple(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprCallContext ------------------------------------------------------------------

TorQLParser::ColumnExprContext* TorQLParser::ColumnExprCallContext::columnExpr() {
  return getRuleContext<TorQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* TorQLParser::ColumnExprCallContext::LPAREN() {
  return getToken(TorQLParser::LPAREN, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprCallContext::RPAREN() {
  return getToken(TorQLParser::RPAREN, 0);
}

TorQLParser::ColumnExprListContext* TorQLParser::ColumnExprCallContext::columnExprList() {
  return getRuleContext<TorQLParser::ColumnExprListContext>(0);
}

TorQLParser::ColumnExprCallContext::ColumnExprCallContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnExprCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprCall(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprArrayAccessContext ------------------------------------------------------------------

std::vector<TorQLParser::ColumnExprContext *> TorQLParser::ColumnExprArrayAccessContext::columnExpr() {
  return getRuleContexts<TorQLParser::ColumnExprContext>();
}

TorQLParser::ColumnExprContext* TorQLParser::ColumnExprArrayAccessContext::columnExpr(size_t i) {
  return getRuleContext<TorQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* TorQLParser::ColumnExprArrayAccessContext::LBRACKET() {
  return getToken(TorQLParser::LBRACKET, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprArrayAccessContext::RBRACKET() {
  return getToken(TorQLParser::RBRACKET, 0);
}

TorQLParser::ColumnExprArrayAccessContext::ColumnExprArrayAccessContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnExprArrayAccessContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprArrayAccess(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprBetweenContext ------------------------------------------------------------------

std::vector<TorQLParser::ColumnExprContext *> TorQLParser::ColumnExprBetweenContext::columnExpr() {
  return getRuleContexts<TorQLParser::ColumnExprContext>();
}

TorQLParser::ColumnExprContext* TorQLParser::ColumnExprBetweenContext::columnExpr(size_t i) {
  return getRuleContext<TorQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* TorQLParser::ColumnExprBetweenContext::BETWEEN() {
  return getToken(TorQLParser::BETWEEN, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprBetweenContext::AND() {
  return getToken(TorQLParser::AND, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprBetweenContext::NOT() {
  return getToken(TorQLParser::NOT, 0);
}

TorQLParser::ColumnExprBetweenContext::ColumnExprBetweenContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnExprBetweenContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprBetween(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprPropertyAccessContext ------------------------------------------------------------------

TorQLParser::ColumnExprContext* TorQLParser::ColumnExprPropertyAccessContext::columnExpr() {
  return getRuleContext<TorQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* TorQLParser::ColumnExprPropertyAccessContext::DOT() {
  return getToken(TorQLParser::DOT, 0);
}

TorQLParser::IdentifierContext* TorQLParser::ColumnExprPropertyAccessContext::identifier() {
  return getRuleContext<TorQLParser::IdentifierContext>(0);
}

TorQLParser::ColumnExprPropertyAccessContext::ColumnExprPropertyAccessContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnExprPropertyAccessContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprPropertyAccess(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprParensContext ------------------------------------------------------------------

tree::TerminalNode* TorQLParser::ColumnExprParensContext::LPAREN() {
  return getToken(TorQLParser::LPAREN, 0);
}

TorQLParser::ColumnExprContext* TorQLParser::ColumnExprParensContext::columnExpr() {
  return getRuleContext<TorQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* TorQLParser::ColumnExprParensContext::RPAREN() {
  return getToken(TorQLParser::RPAREN, 0);
}

TorQLParser::ColumnExprParensContext::ColumnExprParensContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnExprParensContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprParens(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprNullArrayAccessContext ------------------------------------------------------------------

std::vector<TorQLParser::ColumnExprContext *> TorQLParser::ColumnExprNullArrayAccessContext::columnExpr() {
  return getRuleContexts<TorQLParser::ColumnExprContext>();
}

TorQLParser::ColumnExprContext* TorQLParser::ColumnExprNullArrayAccessContext::columnExpr(size_t i) {
  return getRuleContext<TorQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* TorQLParser::ColumnExprNullArrayAccessContext::NULL_PROPERTY() {
  return getToken(TorQLParser::NULL_PROPERTY, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprNullArrayAccessContext::LBRACKET() {
  return getToken(TorQLParser::LBRACKET, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprNullArrayAccessContext::RBRACKET() {
  return getToken(TorQLParser::RBRACKET, 0);
}

TorQLParser::ColumnExprNullArrayAccessContext::ColumnExprNullArrayAccessContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnExprNullArrayAccessContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprNullArrayAccess(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprTimestampContext ------------------------------------------------------------------

tree::TerminalNode* TorQLParser::ColumnExprTimestampContext::TIMESTAMP() {
  return getToken(TorQLParser::TIMESTAMP, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprTimestampContext::STRING_LITERAL() {
  return getToken(TorQLParser::STRING_LITERAL, 0);
}

TorQLParser::ColumnExprTimestampContext::ColumnExprTimestampContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnExprTimestampContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprTimestamp(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprNullishContext ------------------------------------------------------------------

std::vector<TorQLParser::ColumnExprContext *> TorQLParser::ColumnExprNullishContext::columnExpr() {
  return getRuleContexts<TorQLParser::ColumnExprContext>();
}

TorQLParser::ColumnExprContext* TorQLParser::ColumnExprNullishContext::columnExpr(size_t i) {
  return getRuleContext<TorQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* TorQLParser::ColumnExprNullishContext::NULLISH() {
  return getToken(TorQLParser::NULLISH, 0);
}

TorQLParser::ColumnExprNullishContext::ColumnExprNullishContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnExprNullishContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprNullish(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprAndContext ------------------------------------------------------------------

std::vector<TorQLParser::ColumnExprContext *> TorQLParser::ColumnExprAndContext::columnExpr() {
  return getRuleContexts<TorQLParser::ColumnExprContext>();
}

TorQLParser::ColumnExprContext* TorQLParser::ColumnExprAndContext::columnExpr(size_t i) {
  return getRuleContext<TorQLParser::ColumnExprContext>(i);
}

tree::TerminalNode* TorQLParser::ColumnExprAndContext::AND() {
  return getToken(TorQLParser::AND, 0);
}

TorQLParser::ColumnExprAndContext::ColumnExprAndContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnExprAndContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprAnd(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprTupleAccessContext ------------------------------------------------------------------

TorQLParser::ColumnExprContext* TorQLParser::ColumnExprTupleAccessContext::columnExpr() {
  return getRuleContext<TorQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* TorQLParser::ColumnExprTupleAccessContext::DOT() {
  return getToken(TorQLParser::DOT, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprTupleAccessContext::DECIMAL_LITERAL() {
  return getToken(TorQLParser::DECIMAL_LITERAL, 0);
}

TorQLParser::ColumnExprTupleAccessContext::ColumnExprTupleAccessContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnExprTupleAccessContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprTupleAccess(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprCaseContext ------------------------------------------------------------------

tree::TerminalNode* TorQLParser::ColumnExprCaseContext::CASE() {
  return getToken(TorQLParser::CASE, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprCaseContext::END() {
  return getToken(TorQLParser::END, 0);
}

std::vector<tree::TerminalNode *> TorQLParser::ColumnExprCaseContext::WHEN() {
  return getTokens(TorQLParser::WHEN);
}

tree::TerminalNode* TorQLParser::ColumnExprCaseContext::WHEN(size_t i) {
  return getToken(TorQLParser::WHEN, i);
}

std::vector<tree::TerminalNode *> TorQLParser::ColumnExprCaseContext::THEN() {
  return getTokens(TorQLParser::THEN);
}

tree::TerminalNode* TorQLParser::ColumnExprCaseContext::THEN(size_t i) {
  return getToken(TorQLParser::THEN, i);
}

tree::TerminalNode* TorQLParser::ColumnExprCaseContext::ELSE() {
  return getToken(TorQLParser::ELSE, 0);
}

std::vector<TorQLParser::ColumnExprContext *> TorQLParser::ColumnExprCaseContext::columnExpr() {
  return getRuleContexts<TorQLParser::ColumnExprContext>();
}

TorQLParser::ColumnExprContext* TorQLParser::ColumnExprCaseContext::columnExpr(size_t i) {
  return getRuleContext<TorQLParser::ColumnExprContext>(i);
}

TorQLParser::ColumnExprCaseContext::ColumnExprCaseContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnExprCaseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprCase(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprDateContext ------------------------------------------------------------------

tree::TerminalNode* TorQLParser::ColumnExprDateContext::DATE() {
  return getToken(TorQLParser::DATE, 0);
}

tree::TerminalNode* TorQLParser::ColumnExprDateContext::STRING_LITERAL() {
  return getToken(TorQLParser::STRING_LITERAL, 0);
}

TorQLParser::ColumnExprDateContext::ColumnExprDateContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnExprDateContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprDate(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprNotContext ------------------------------------------------------------------

tree::TerminalNode* TorQLParser::ColumnExprNotContext::NOT() {
  return getToken(TorQLParser::NOT, 0);
}

TorQLParser::ColumnExprContext* TorQLParser::ColumnExprNotContext::columnExpr() {
  return getRuleContext<TorQLParser::ColumnExprContext>(0);
}

TorQLParser::ColumnExprNotContext::ColumnExprNotContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnExprNotContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprNot(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprWinFunctionContext ------------------------------------------------------------------

TorQLParser::IdentifierContext* TorQLParser::ColumnExprWinFunctionContext::identifier() {
  return getRuleContext<TorQLParser::IdentifierContext>(0);
}

tree::TerminalNode* TorQLParser::ColumnExprWinFunctionContext::OVER() {
  return getToken(TorQLParser::OVER, 0);
}

std::vector<tree::TerminalNode *> TorQLParser::ColumnExprWinFunctionContext::LPAREN() {
  return getTokens(TorQLParser::LPAREN);
}

tree::TerminalNode* TorQLParser::ColumnExprWinFunctionContext::LPAREN(size_t i) {
  return getToken(TorQLParser::LPAREN, i);
}

TorQLParser::WindowExprContext* TorQLParser::ColumnExprWinFunctionContext::windowExpr() {
  return getRuleContext<TorQLParser::WindowExprContext>(0);
}

std::vector<tree::TerminalNode *> TorQLParser::ColumnExprWinFunctionContext::RPAREN() {
  return getTokens(TorQLParser::RPAREN);
}

tree::TerminalNode* TorQLParser::ColumnExprWinFunctionContext::RPAREN(size_t i) {
  return getToken(TorQLParser::RPAREN, i);
}

std::vector<TorQLParser::ColumnExprListContext *> TorQLParser::ColumnExprWinFunctionContext::columnExprList() {
  return getRuleContexts<TorQLParser::ColumnExprListContext>();
}

TorQLParser::ColumnExprListContext* TorQLParser::ColumnExprWinFunctionContext::columnExprList(size_t i) {
  return getRuleContext<TorQLParser::ColumnExprListContext>(i);
}

tree::TerminalNode* TorQLParser::ColumnExprWinFunctionContext::DISTINCT() {
  return getToken(TorQLParser::DISTINCT, 0);
}

TorQLParser::ColumnExprWinFunctionContext::ColumnExprWinFunctionContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnExprWinFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprWinFunction(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprLambdaContext ------------------------------------------------------------------

TorQLParser::ColumnLambdaExprContext* TorQLParser::ColumnExprLambdaContext::columnLambdaExpr() {
  return getRuleContext<TorQLParser::ColumnLambdaExprContext>(0);
}

TorQLParser::ColumnExprLambdaContext::ColumnExprLambdaContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnExprLambdaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprLambda(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprIdentifierContext ------------------------------------------------------------------

TorQLParser::ColumnIdentifierContext* TorQLParser::ColumnExprIdentifierContext::columnIdentifier() {
  return getRuleContext<TorQLParser::ColumnIdentifierContext>(0);
}

TorQLParser::ColumnExprIdentifierContext::ColumnExprIdentifierContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnExprIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprIdentifier(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprFunctionContext ------------------------------------------------------------------

TorQLParser::IdentifierContext* TorQLParser::ColumnExprFunctionContext::identifier() {
  return getRuleContext<TorQLParser::IdentifierContext>(0);
}

std::vector<tree::TerminalNode *> TorQLParser::ColumnExprFunctionContext::LPAREN() {
  return getTokens(TorQLParser::LPAREN);
}

tree::TerminalNode* TorQLParser::ColumnExprFunctionContext::LPAREN(size_t i) {
  return getToken(TorQLParser::LPAREN, i);
}

std::vector<tree::TerminalNode *> TorQLParser::ColumnExprFunctionContext::RPAREN() {
  return getTokens(TorQLParser::RPAREN);
}

tree::TerminalNode* TorQLParser::ColumnExprFunctionContext::RPAREN(size_t i) {
  return getToken(TorQLParser::RPAREN, i);
}

tree::TerminalNode* TorQLParser::ColumnExprFunctionContext::DISTINCT() {
  return getToken(TorQLParser::DISTINCT, 0);
}

std::vector<TorQLParser::ColumnExprListContext *> TorQLParser::ColumnExprFunctionContext::columnExprList() {
  return getRuleContexts<TorQLParser::ColumnExprListContext>();
}

TorQLParser::ColumnExprListContext* TorQLParser::ColumnExprFunctionContext::columnExprList(size_t i) {
  return getRuleContext<TorQLParser::ColumnExprListContext>(i);
}

TorQLParser::ColumnExprFunctionContext::ColumnExprFunctionContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnExprFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprFunction(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnExprAsteriskContext ------------------------------------------------------------------

tree::TerminalNode* TorQLParser::ColumnExprAsteriskContext::ASTERISK() {
  return getToken(TorQLParser::ASTERISK, 0);
}

TorQLParser::TableIdentifierContext* TorQLParser::ColumnExprAsteriskContext::tableIdentifier() {
  return getRuleContext<TorQLParser::TableIdentifierContext>(0);
}

tree::TerminalNode* TorQLParser::ColumnExprAsteriskContext::DOT() {
  return getToken(TorQLParser::DOT, 0);
}

TorQLParser::ColumnExprAsteriskContext::ColumnExprAsteriskContext(ColumnExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::ColumnExprAsteriskContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnExprAsterisk(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::ColumnExprContext* TorQLParser::columnExpr() {
   return columnExpr(0);
}

TorQLParser::ColumnExprContext* TorQLParser::columnExpr(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  TorQLParser::ColumnExprContext *_localctx = _tracker.createInstance<ColumnExprContext>(_ctx, parentState);
  TorQLParser::ColumnExprContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 116;
  enterRecursionRule(_localctx, 116, TorQLParser::RuleColumnExpr, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(932);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 118, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<ColumnExprCaseContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(783);
      match(TorQLParser::CASE);
      setState(785);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 99, _ctx)) {
      case 1: {
        setState(784);
        antlrcpp::downCast<ColumnExprCaseContext *>(_localctx)->caseExpr = columnExpr(0);
        break;
      }

      default:
        break;
      }
      setState(792); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(787);
        match(TorQLParser::WHEN);
        setState(788);
        antlrcpp::downCast<ColumnExprCaseContext *>(_localctx)->whenExpr = columnExpr(0);
        setState(789);
        match(TorQLParser::THEN);
        setState(790);
        antlrcpp::downCast<ColumnExprCaseContext *>(_localctx)->thenExpr = columnExpr(0);
        setState(794); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == TorQLParser::WHEN);
      setState(798);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == TorQLParser::ELSE) {
        setState(796);
        match(TorQLParser::ELSE);
        setState(797);
        antlrcpp::downCast<ColumnExprCaseContext *>(_localctx)->elseExpr = columnExpr(0);
      }
      setState(800);
      match(TorQLParser::END);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<ColumnExprCastContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(802);
      match(TorQLParser::CAST);
      setState(803);
      match(TorQLParser::LPAREN);
      setState(804);
      columnExpr(0);
      setState(805);
      match(TorQLParser::AS);
      setState(806);
      columnTypeExpr();
      setState(807);
      match(TorQLParser::RPAREN);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<ColumnExprDateContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(809);
      match(TorQLParser::DATE);
      setState(810);
      match(TorQLParser::STRING_LITERAL);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<ColumnExprIntervalContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(811);
      match(TorQLParser::INTERVAL);
      setState(812);
      columnExpr(0);
      setState(813);
      interval();
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<ColumnExprSubstringContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(815);
      match(TorQLParser::SUBSTRING);
      setState(816);
      match(TorQLParser::LPAREN);
      setState(817);
      columnExpr(0);
      setState(818);
      match(TorQLParser::FROM);
      setState(819);
      columnExpr(0);
      setState(822);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == TorQLParser::FOR) {
        setState(820);
        match(TorQLParser::FOR);
        setState(821);
        columnExpr(0);
      }
      setState(824);
      match(TorQLParser::RPAREN);
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<ColumnExprTimestampContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(826);
      match(TorQLParser::TIMESTAMP);
      setState(827);
      match(TorQLParser::STRING_LITERAL);
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<ColumnExprTrimContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(828);
      match(TorQLParser::TRIM);
      setState(829);
      match(TorQLParser::LPAREN);
      setState(830);
      _la = _input->LA(1);
      if (!(_la == TorQLParser::BOTH

      || _la == TorQLParser::LEADING || _la == TorQLParser::TRAILING)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(831);
      string();
      setState(832);
      match(TorQLParser::FROM);
      setState(833);
      columnExpr(0);
      setState(834);
      match(TorQLParser::RPAREN);
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<ColumnExprWinFunctionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(836);
      identifier();

      setState(837);
      match(TorQLParser::LPAREN);
      setState(839);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -9007270658588674) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 180986072486903807) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & 18455) != 0)) {
        setState(838);
        antlrcpp::downCast<ColumnExprWinFunctionContext *>(_localctx)->columnExprs = columnExprList();
      }
      setState(841);
      match(TorQLParser::RPAREN);
      setState(851);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == TorQLParser::LPAREN) {
        setState(843);
        match(TorQLParser::LPAREN);
        setState(845);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 104, _ctx)) {
        case 1: {
          setState(844);
          match(TorQLParser::DISTINCT);
          break;
        }

        default:
          break;
        }
        setState(848);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -9007270658588674) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 180986072486903807) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 129)) & 18455) != 0)) {
          setState(847);
          antlrcpp::downCast<ColumnExprWinFunctionContext *>(_localctx)->columnArgList = columnExprList();
        }
        setState(850);
        match(TorQLParser::RPAREN);
      }
      setState(853);
      match(TorQLParser::OVER);
      setState(854);
      match(TorQLParser::LPAREN);
      setState(855);
      windowExpr();
      setState(856);
      match(TorQLParser::RPAREN);
      break;
    }

    case 9: {
      _localctx = _tracker.createInstance<ColumnExprWinFunctionTargetContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(858);
      identifier();

      setState(859);
      match(TorQLParser::LPAREN);
      setState(861);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -9007270658588674) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 180986072486903807) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & 18455) != 0)) {
        setState(860);
        antlrcpp::downCast<ColumnExprWinFunctionTargetContext *>(_localctx)->columnExprs = columnExprList();
      }
      setState(863);
      match(TorQLParser::RPAREN);
      setState(873);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == TorQLParser::LPAREN) {
        setState(865);
        match(TorQLParser::LPAREN);
        setState(867);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 108, _ctx)) {
        case 1: {
          setState(866);
          match(TorQLParser::DISTINCT);
          break;
        }

        default:
          break;
        }
        setState(870);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -9007270658588674) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 180986072486903807) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 129)) & 18455) != 0)) {
          setState(869);
          antlrcpp::downCast<ColumnExprWinFunctionTargetContext *>(_localctx)->columnArgList = columnExprList();
        }
        setState(872);
        match(TorQLParser::RPAREN);
      }
      setState(875);
      match(TorQLParser::OVER);
      setState(876);
      identifier();
      break;
    }

    case 10: {
      _localctx = _tracker.createInstance<ColumnExprFunctionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(878);
      identifier();
      setState(884);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 112, _ctx)) {
      case 1: {
        setState(879);
        match(TorQLParser::LPAREN);
        setState(881);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -9007270658588674) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 180986072486903807) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 129)) & 18455) != 0)) {
          setState(880);
          antlrcpp::downCast<ColumnExprFunctionContext *>(_localctx)->columnExprs = columnExprList();
        }
        setState(883);
        match(TorQLParser::RPAREN);
        break;
      }

      default:
        break;
      }
      setState(886);
      match(TorQLParser::LPAREN);
      setState(888);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 113, _ctx)) {
      case 1: {
        setState(887);
        match(TorQLParser::DISTINCT);
        break;
      }

      default:
        break;
      }
      setState(891);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -9007270658588674) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 180986072486903807) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & 18455) != 0)) {
        setState(890);
        antlrcpp::downCast<ColumnExprFunctionContext *>(_localctx)->columnArgList = columnExprList();
      }
      setState(893);
      match(TorQLParser::RPAREN);
      break;
    }

    case 11: {
      _localctx = _tracker.createInstance<ColumnExprTagElementContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(895);
      torqlxTagElement();
      break;
    }

    case 12: {
      _localctx = _tracker.createInstance<ColumnExprTemplateStringContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(896);
      templateString();
      break;
    }

    case 13: {
      _localctx = _tracker.createInstance<ColumnExprLiteralContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(897);
      literal();
      break;
    }

    case 14: {
      _localctx = _tracker.createInstance<ColumnExprNegateContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(898);
      match(TorQLParser::DASH);
      setState(899);
      columnExpr(20);
      break;
    }

    case 15: {
      _localctx = _tracker.createInstance<ColumnExprNotContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(900);
      match(TorQLParser::NOT);
      setState(901);
      columnExpr(14);
      break;
    }

    case 16: {
      _localctx = _tracker.createInstance<ColumnExprAsteriskContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(905);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -1450176743603191810) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 6458554974207) != 0)) {
        setState(902);
        tableIdentifier();
        setState(903);
        match(TorQLParser::DOT);
      }
      setState(907);
      match(TorQLParser::ASTERISK);
      break;
    }

    case 17: {
      _localctx = _tracker.createInstance<ColumnExprSubqueryContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(908);
      match(TorQLParser::LPAREN);
      setState(909);
      selectUnionStmt();
      setState(910);
      match(TorQLParser::RPAREN);
      break;
    }

    case 18: {
      _localctx = _tracker.createInstance<ColumnExprParensContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(912);
      match(TorQLParser::LPAREN);
      setState(913);
      columnExpr(0);
      setState(914);
      match(TorQLParser::RPAREN);
      break;
    }

    case 19: {
      _localctx = _tracker.createInstance<ColumnExprTupleContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(916);
      match(TorQLParser::LPAREN);
      setState(917);
      columnExprList();
      setState(918);
      match(TorQLParser::RPAREN);
      break;
    }

    case 20: {
      _localctx = _tracker.createInstance<ColumnExprArrayContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(920);
      match(TorQLParser::LBRACKET);
      setState(922);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -9007270658588674) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 180986072486903807) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & 18455) != 0)) {
        setState(921);
        columnExprList();
      }
      setState(924);
      match(TorQLParser::RBRACKET);
      break;
    }

    case 21: {
      _localctx = _tracker.createInstance<ColumnExprDictContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(925);
      match(TorQLParser::LBRACE);
      setState(927);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -9007270658588674) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 180986072486903807) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & 18455) != 0)) {
        setState(926);
        kvPairList();
      }
      setState(929);
      match(TorQLParser::RBRACE);
      break;
    }

    case 22: {
      _localctx = _tracker.createInstance<ColumnExprLambdaContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(930);
      columnLambdaExpr();
      break;
    }

    case 23: {
      _localctx = _tracker.createInstance<ColumnExprIdentifierContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(931);
      columnIdentifier();
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(1044);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 130, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(1042);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 129, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<ColumnExprPrecedence1Context>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(934);

          if (!(precpred(_ctx, 19))) throw FailedPredicateException(this, "precpred(_ctx, 19)");
          setState(938);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case TorQLParser::ASTERISK: {
              setState(935);
              antlrcpp::downCast<ColumnExprPrecedence1Context *>(_localctx)->operator_ = match(TorQLParser::ASTERISK);
              break;
            }

            case TorQLParser::SLASH: {
              setState(936);
              antlrcpp::downCast<ColumnExprPrecedence1Context *>(_localctx)->operator_ = match(TorQLParser::SLASH);
              break;
            }

            case TorQLParser::PERCENT: {
              setState(937);
              antlrcpp::downCast<ColumnExprPrecedence1Context *>(_localctx)->operator_ = match(TorQLParser::PERCENT);
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          setState(940);
          antlrcpp::downCast<ColumnExprPrecedence1Context *>(_localctx)->right = columnExpr(20);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<ColumnExprPrecedence2Context>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(941);

          if (!(precpred(_ctx, 18))) throw FailedPredicateException(this, "precpred(_ctx, 18)");
          setState(945);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case TorQLParser::PLUS: {
              setState(942);
              antlrcpp::downCast<ColumnExprPrecedence2Context *>(_localctx)->operator_ = match(TorQLParser::PLUS);
              break;
            }

            case TorQLParser::DASH: {
              setState(943);
              antlrcpp::downCast<ColumnExprPrecedence2Context *>(_localctx)->operator_ = match(TorQLParser::DASH);
              break;
            }

            case TorQLParser::CONCAT: {
              setState(944);
              antlrcpp::downCast<ColumnExprPrecedence2Context *>(_localctx)->operator_ = match(TorQLParser::CONCAT);
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          setState(947);
          antlrcpp::downCast<ColumnExprPrecedence2Context *>(_localctx)->right = columnExpr(19);
          break;
        }

        case 3: {
          auto newContext = _tracker.createInstance<ColumnExprPrecedence3Context>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(948);

          if (!(precpred(_ctx, 17))) throw FailedPredicateException(this, "precpred(_ctx, 17)");
          setState(973);
          _errHandler->sync(this);
          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 124, _ctx)) {
          case 1: {
            setState(949);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(TorQLParser::EQ_DOUBLE);
            break;
          }

          case 2: {
            setState(950);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(TorQLParser::EQ_SINGLE);
            break;
          }

          case 3: {
            setState(951);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(TorQLParser::NOT_EQ);
            break;
          }

          case 4: {
            setState(952);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(TorQLParser::LT_EQ);
            break;
          }

          case 5: {
            setState(953);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(TorQLParser::LT);
            break;
          }

          case 6: {
            setState(954);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(TorQLParser::GT_EQ);
            break;
          }

          case 7: {
            setState(955);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(TorQLParser::GT);
            break;
          }

          case 8: {
            setState(957);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == TorQLParser::NOT) {
              setState(956);
              antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(TorQLParser::NOT);
            }
            setState(959);
            match(TorQLParser::IN);
            setState(961);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 122, _ctx)) {
            case 1: {
              setState(960);
              match(TorQLParser::COHORT);
              break;
            }

            default:
              break;
            }
            break;
          }

          case 9: {
            setState(964);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == TorQLParser::NOT) {
              setState(963);
              antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(TorQLParser::NOT);
            }
            setState(966);
            _la = _input->LA(1);
            if (!(_la == TorQLParser::ILIKE

            || _la == TorQLParser::LIKE)) {
            _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
            break;
          }

          case 10: {
            setState(967);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(TorQLParser::REGEX_SINGLE);
            break;
          }

          case 11: {
            setState(968);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(TorQLParser::REGEX_DOUBLE);
            break;
          }

          case 12: {
            setState(969);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(TorQLParser::NOT_REGEX);
            break;
          }

          case 13: {
            setState(970);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(TorQLParser::IREGEX_SINGLE);
            break;
          }

          case 14: {
            setState(971);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(TorQLParser::IREGEX_DOUBLE);
            break;
          }

          case 15: {
            setState(972);
            antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->operator_ = match(TorQLParser::NOT_IREGEX);
            break;
          }

          default:
            break;
          }
          setState(975);
          antlrcpp::downCast<ColumnExprPrecedence3Context *>(_localctx)->right = columnExpr(18);
          break;
        }

        case 4: {
          auto newContext = _tracker.createInstance<ColumnExprNullishContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(976);

          if (!(precpred(_ctx, 15))) throw FailedPredicateException(this, "precpred(_ctx, 15)");
          setState(977);
          match(TorQLParser::NULLISH);
          setState(978);
          columnExpr(16);
          break;
        }

        case 5: {
          auto newContext = _tracker.createInstance<ColumnExprAndContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(979);

          if (!(precpred(_ctx, 13))) throw FailedPredicateException(this, "precpred(_ctx, 13)");
          setState(980);
          match(TorQLParser::AND);
          setState(981);
          columnExpr(14);
          break;
        }

        case 6: {
          auto newContext = _tracker.createInstance<ColumnExprOrContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(982);

          if (!(precpred(_ctx, 12))) throw FailedPredicateException(this, "precpred(_ctx, 12)");
          setState(983);
          match(TorQLParser::OR);
          setState(984);
          columnExpr(13);
          break;
        }

        case 7: {
          auto newContext = _tracker.createInstance<ColumnExprBetweenContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(985);

          if (!(precpred(_ctx, 11))) throw FailedPredicateException(this, "precpred(_ctx, 11)");
          setState(987);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == TorQLParser::NOT) {
            setState(986);
            match(TorQLParser::NOT);
          }
          setState(989);
          match(TorQLParser::BETWEEN);
          setState(990);
          columnExpr(0);
          setState(991);
          match(TorQLParser::AND);
          setState(992);
          columnExpr(12);
          break;
        }

        case 8: {
          auto newContext = _tracker.createInstance<ColumnExprTernaryOpContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(994);

          if (!(precpred(_ctx, 10))) throw FailedPredicateException(this, "precpred(_ctx, 10)");
          setState(995);
          match(TorQLParser::QUERY);
          setState(996);
          columnExpr(0);
          setState(997);
          match(TorQLParser::COLON);
          setState(998);
          columnExpr(10);
          break;
        }

        case 9: {
          auto newContext = _tracker.createInstance<ColumnExprCallContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(1000);

          if (!(precpred(_ctx, 30))) throw FailedPredicateException(this, "precpred(_ctx, 30)");
          setState(1001);
          match(TorQLParser::LPAREN);
          setState(1003);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & -9007270658588674) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 64)) & 180986072486903807) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 129)) & 18455) != 0)) {
            setState(1002);
            columnExprList();
          }
          setState(1005);
          match(TorQLParser::RPAREN);
          break;
        }

        case 10: {
          auto newContext = _tracker.createInstance<ColumnExprArrayAccessContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(1006);

          if (!(precpred(_ctx, 26))) throw FailedPredicateException(this, "precpred(_ctx, 26)");
          setState(1007);
          match(TorQLParser::LBRACKET);
          setState(1008);
          columnExpr(0);
          setState(1009);
          match(TorQLParser::RBRACKET);
          break;
        }

        case 11: {
          auto newContext = _tracker.createInstance<ColumnExprTupleAccessContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(1011);

          if (!(precpred(_ctx, 25))) throw FailedPredicateException(this, "precpred(_ctx, 25)");
          setState(1012);
          match(TorQLParser::DOT);
          setState(1013);
          match(TorQLParser::DECIMAL_LITERAL);
          break;
        }

        case 12: {
          auto newContext = _tracker.createInstance<ColumnExprPropertyAccessContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(1014);

          if (!(precpred(_ctx, 24))) throw FailedPredicateException(this, "precpred(_ctx, 24)");
          setState(1015);
          match(TorQLParser::DOT);
          setState(1016);
          identifier();
          break;
        }

        case 13: {
          auto newContext = _tracker.createInstance<ColumnExprNullArrayAccessContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(1017);

          if (!(precpred(_ctx, 23))) throw FailedPredicateException(this, "precpred(_ctx, 23)");
          setState(1018);
          match(TorQLParser::NULL_PROPERTY);
          setState(1019);
          match(TorQLParser::LBRACKET);
          setState(1020);
          columnExpr(0);
          setState(1021);
          match(TorQLParser::RBRACKET);
          break;
        }

        case 14: {
          auto newContext = _tracker.createInstance<ColumnExprNullTupleAccessContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(1023);

          if (!(precpred(_ctx, 22))) throw FailedPredicateException(this, "precpred(_ctx, 22)");
          setState(1024);
          match(TorQLParser::NULL_PROPERTY);
          setState(1025);
          match(TorQLParser::DECIMAL_LITERAL);
          break;
        }

        case 15: {
          auto newContext = _tracker.createInstance<ColumnExprNullPropertyAccessContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(1026);

          if (!(precpred(_ctx, 21))) throw FailedPredicateException(this, "precpred(_ctx, 21)");
          setState(1027);
          match(TorQLParser::NULL_PROPERTY);
          setState(1028);
          identifier();
          break;
        }

        case 16: {
          auto newContext = _tracker.createInstance<ColumnExprIsNullContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(1029);

          if (!(precpred(_ctx, 16))) throw FailedPredicateException(this, "precpred(_ctx, 16)");
          setState(1030);
          match(TorQLParser::IS);
          setState(1032);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == TorQLParser::NOT) {
            setState(1031);
            match(TorQLParser::NOT);
          }
          setState(1034);
          match(TorQLParser::NULL_SQL);
          break;
        }

        case 17: {
          auto newContext = _tracker.createInstance<ColumnExprAliasContext>(_tracker.createInstance<ColumnExprContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleColumnExpr);
          setState(1035);

          if (!(precpred(_ctx, 9))) throw FailedPredicateException(this, "precpred(_ctx, 9)");
          setState(1040);
          _errHandler->sync(this);
          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 128, _ctx)) {
          case 1: {
            setState(1036);
            match(TorQLParser::AS);
            setState(1037);
            identifier();
            break;
          }

          case 2: {
            setState(1038);
            match(TorQLParser::AS);
            setState(1039);
            match(TorQLParser::STRING_LITERAL);
            break;
          }

          default:
            break;
          }
          break;
        }

        default:
          break;
        } 
      }
      setState(1046);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 130, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ColumnLambdaExprContext ------------------------------------------------------------------

TorQLParser::ColumnLambdaExprContext::ColumnLambdaExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::ColumnLambdaExprContext::ARROW() {
  return getToken(TorQLParser::ARROW, 0);
}

tree::TerminalNode* TorQLParser::ColumnLambdaExprContext::LPAREN() {
  return getToken(TorQLParser::LPAREN, 0);
}

std::vector<TorQLParser::IdentifierContext *> TorQLParser::ColumnLambdaExprContext::identifier() {
  return getRuleContexts<TorQLParser::IdentifierContext>();
}

TorQLParser::IdentifierContext* TorQLParser::ColumnLambdaExprContext::identifier(size_t i) {
  return getRuleContext<TorQLParser::IdentifierContext>(i);
}

tree::TerminalNode* TorQLParser::ColumnLambdaExprContext::RPAREN() {
  return getToken(TorQLParser::RPAREN, 0);
}

TorQLParser::ColumnExprContext* TorQLParser::ColumnLambdaExprContext::columnExpr() {
  return getRuleContext<TorQLParser::ColumnExprContext>(0);
}

TorQLParser::BlockContext* TorQLParser::ColumnLambdaExprContext::block() {
  return getRuleContext<TorQLParser::BlockContext>(0);
}

std::vector<tree::TerminalNode *> TorQLParser::ColumnLambdaExprContext::COMMA() {
  return getTokens(TorQLParser::COMMA);
}

tree::TerminalNode* TorQLParser::ColumnLambdaExprContext::COMMA(size_t i) {
  return getToken(TorQLParser::COMMA, i);
}


size_t TorQLParser::ColumnLambdaExprContext::getRuleIndex() const {
  return TorQLParser::RuleColumnLambdaExpr;
}


std::any TorQLParser::ColumnLambdaExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnLambdaExpr(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::ColumnLambdaExprContext* TorQLParser::columnLambdaExpr() {
  ColumnLambdaExprContext *_localctx = _tracker.createInstance<ColumnLambdaExprContext>(_ctx, getState());
  enterRule(_localctx, 118, TorQLParser::RuleColumnLambdaExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1074);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 135, _ctx)) {
    case 1: {
      setState(1047);
      match(TorQLParser::LPAREN);
      setState(1048);
      identifier();
      setState(1053);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 131, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1049);
          match(TorQLParser::COMMA);
          setState(1050);
          identifier(); 
        }
        setState(1055);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 131, _ctx);
      }
      setState(1057);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == TorQLParser::COMMA) {
        setState(1056);
        match(TorQLParser::COMMA);
      }
      setState(1059);
      match(TorQLParser::RPAREN);
      break;
    }

    case 2: {
      setState(1061);
      identifier();
      setState(1066);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 133, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1062);
          match(TorQLParser::COMMA);
          setState(1063);
          identifier(); 
        }
        setState(1068);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 133, _ctx);
      }
      setState(1070);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == TorQLParser::COMMA) {
        setState(1069);
        match(TorQLParser::COMMA);
      }
      break;
    }

    case 3: {
      setState(1072);
      match(TorQLParser::LPAREN);
      setState(1073);
      match(TorQLParser::RPAREN);
      break;
    }

    default:
      break;
    }
    setState(1076);
    match(TorQLParser::ARROW);
    setState(1079);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 136, _ctx)) {
    case 1: {
      setState(1077);
      columnExpr(0);
      break;
    }

    case 2: {
      setState(1078);
      block();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TorqlxTagElementContext ------------------------------------------------------------------

TorQLParser::TorqlxTagElementContext::TorqlxTagElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t TorQLParser::TorqlxTagElementContext::getRuleIndex() const {
  return TorQLParser::RuleTorqlxTagElement;
}

void TorQLParser::TorqlxTagElementContext::copyFrom(TorqlxTagElementContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- TorqlxTagElementClosedContext ------------------------------------------------------------------

tree::TerminalNode* TorQLParser::TorqlxTagElementClosedContext::LT() {
  return getToken(TorQLParser::LT, 0);
}

TorQLParser::IdentifierContext* TorQLParser::TorqlxTagElementClosedContext::identifier() {
  return getRuleContext<TorQLParser::IdentifierContext>(0);
}

tree::TerminalNode* TorQLParser::TorqlxTagElementClosedContext::SLASH() {
  return getToken(TorQLParser::SLASH, 0);
}

tree::TerminalNode* TorQLParser::TorqlxTagElementClosedContext::GT() {
  return getToken(TorQLParser::GT, 0);
}

std::vector<TorQLParser::TorqlxTagAttributeContext *> TorQLParser::TorqlxTagElementClosedContext::torqlxTagAttribute() {
  return getRuleContexts<TorQLParser::TorqlxTagAttributeContext>();
}

TorQLParser::TorqlxTagAttributeContext* TorQLParser::TorqlxTagElementClosedContext::torqlxTagAttribute(size_t i) {
  return getRuleContext<TorQLParser::TorqlxTagAttributeContext>(i);
}

TorQLParser::TorqlxTagElementClosedContext::TorqlxTagElementClosedContext(TorqlxTagElementContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::TorqlxTagElementClosedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitTorqlxTagElementClosed(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TorqlxTagElementNestedContext ------------------------------------------------------------------

std::vector<tree::TerminalNode *> TorQLParser::TorqlxTagElementNestedContext::LT() {
  return getTokens(TorQLParser::LT);
}

tree::TerminalNode* TorQLParser::TorqlxTagElementNestedContext::LT(size_t i) {
  return getToken(TorQLParser::LT, i);
}

std::vector<TorQLParser::IdentifierContext *> TorQLParser::TorqlxTagElementNestedContext::identifier() {
  return getRuleContexts<TorQLParser::IdentifierContext>();
}

TorQLParser::IdentifierContext* TorQLParser::TorqlxTagElementNestedContext::identifier(size_t i) {
  return getRuleContext<TorQLParser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> TorQLParser::TorqlxTagElementNestedContext::GT() {
  return getTokens(TorQLParser::GT);
}

tree::TerminalNode* TorQLParser::TorqlxTagElementNestedContext::GT(size_t i) {
  return getToken(TorQLParser::GT, i);
}

tree::TerminalNode* TorQLParser::TorqlxTagElementNestedContext::SLASH() {
  return getToken(TorQLParser::SLASH, 0);
}

std::vector<TorQLParser::TorqlxTagAttributeContext *> TorQLParser::TorqlxTagElementNestedContext::torqlxTagAttribute() {
  return getRuleContexts<TorQLParser::TorqlxTagAttributeContext>();
}

TorQLParser::TorqlxTagAttributeContext* TorQLParser::TorqlxTagElementNestedContext::torqlxTagAttribute(size_t i) {
  return getRuleContext<TorQLParser::TorqlxTagAttributeContext>(i);
}

TorQLParser::TorqlxTagElementContext* TorQLParser::TorqlxTagElementNestedContext::torqlxTagElement() {
  return getRuleContext<TorQLParser::TorqlxTagElementContext>(0);
}

tree::TerminalNode* TorQLParser::TorqlxTagElementNestedContext::LBRACE() {
  return getToken(TorQLParser::LBRACE, 0);
}

TorQLParser::ColumnExprContext* TorQLParser::TorqlxTagElementNestedContext::columnExpr() {
  return getRuleContext<TorQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* TorQLParser::TorqlxTagElementNestedContext::RBRACE() {
  return getToken(TorQLParser::RBRACE, 0);
}

TorQLParser::TorqlxTagElementNestedContext::TorqlxTagElementNestedContext(TorqlxTagElementContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::TorqlxTagElementNestedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitTorqlxTagElementNested(this);
  else
    return visitor->visitChildren(this);
}
TorQLParser::TorqlxTagElementContext* TorQLParser::torqlxTagElement() {
  TorqlxTagElementContext *_localctx = _tracker.createInstance<TorqlxTagElementContext>(_ctx, getState());
  enterRule(_localctx, 120, TorQLParser::RuleTorqlxTagElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1113);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 140, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<TorQLParser::TorqlxTagElementClosedContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(1081);
      match(TorQLParser::LT);
      setState(1082);
      identifier();
      setState(1086);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -1450176743603191810) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 6458554974207) != 0)) {
        setState(1083);
        torqlxTagAttribute();
        setState(1088);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1089);
      match(TorQLParser::SLASH);
      setState(1090);
      match(TorQLParser::GT);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<TorQLParser::TorqlxTagElementNestedContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(1092);
      match(TorQLParser::LT);
      setState(1093);
      identifier();
      setState(1097);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -1450176743603191810) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 6458554974207) != 0)) {
        setState(1094);
        torqlxTagAttribute();
        setState(1099);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1100);
      match(TorQLParser::GT);
      setState(1106);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 139, _ctx)) {
      case 1: {
        setState(1101);
        torqlxTagElement();
        break;
      }

      case 2: {
        setState(1102);
        match(TorQLParser::LBRACE);
        setState(1103);
        columnExpr(0);
        setState(1104);
        match(TorQLParser::RBRACE);
        break;
      }

      default:
        break;
      }
      setState(1108);
      match(TorQLParser::LT);
      setState(1109);
      match(TorQLParser::SLASH);
      setState(1110);
      identifier();
      setState(1111);
      match(TorQLParser::GT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TorqlxTagAttributeContext ------------------------------------------------------------------

TorQLParser::TorqlxTagAttributeContext::TorqlxTagAttributeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

TorQLParser::IdentifierContext* TorQLParser::TorqlxTagAttributeContext::identifier() {
  return getRuleContext<TorQLParser::IdentifierContext>(0);
}

tree::TerminalNode* TorQLParser::TorqlxTagAttributeContext::EQ_SINGLE() {
  return getToken(TorQLParser::EQ_SINGLE, 0);
}

TorQLParser::StringContext* TorQLParser::TorqlxTagAttributeContext::string() {
  return getRuleContext<TorQLParser::StringContext>(0);
}

tree::TerminalNode* TorQLParser::TorqlxTagAttributeContext::LBRACE() {
  return getToken(TorQLParser::LBRACE, 0);
}

TorQLParser::ColumnExprContext* TorQLParser::TorqlxTagAttributeContext::columnExpr() {
  return getRuleContext<TorQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* TorQLParser::TorqlxTagAttributeContext::RBRACE() {
  return getToken(TorQLParser::RBRACE, 0);
}


size_t TorQLParser::TorqlxTagAttributeContext::getRuleIndex() const {
  return TorQLParser::RuleTorqlxTagAttribute;
}


std::any TorQLParser::TorqlxTagAttributeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitTorqlxTagAttribute(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::TorqlxTagAttributeContext* TorQLParser::torqlxTagAttribute() {
  TorqlxTagAttributeContext *_localctx = _tracker.createInstance<TorqlxTagAttributeContext>(_ctx, getState());
  enterRule(_localctx, 122, TorQLParser::RuleTorqlxTagAttribute);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1126);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 141, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1115);
      identifier();
      setState(1116);
      match(TorQLParser::EQ_SINGLE);
      setState(1117);
      string();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1119);
      identifier();
      setState(1120);
      match(TorQLParser::EQ_SINGLE);
      setState(1121);
      match(TorQLParser::LBRACE);
      setState(1122);
      columnExpr(0);
      setState(1123);
      match(TorQLParser::RBRACE);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1125);
      identifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WithExprListContext ------------------------------------------------------------------

TorQLParser::WithExprListContext::WithExprListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<TorQLParser::WithExprContext *> TorQLParser::WithExprListContext::withExpr() {
  return getRuleContexts<TorQLParser::WithExprContext>();
}

TorQLParser::WithExprContext* TorQLParser::WithExprListContext::withExpr(size_t i) {
  return getRuleContext<TorQLParser::WithExprContext>(i);
}

std::vector<tree::TerminalNode *> TorQLParser::WithExprListContext::COMMA() {
  return getTokens(TorQLParser::COMMA);
}

tree::TerminalNode* TorQLParser::WithExprListContext::COMMA(size_t i) {
  return getToken(TorQLParser::COMMA, i);
}


size_t TorQLParser::WithExprListContext::getRuleIndex() const {
  return TorQLParser::RuleWithExprList;
}


std::any TorQLParser::WithExprListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitWithExprList(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::WithExprListContext* TorQLParser::withExprList() {
  WithExprListContext *_localctx = _tracker.createInstance<WithExprListContext>(_ctx, getState());
  enterRule(_localctx, 124, TorQLParser::RuleWithExprList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1128);
    withExpr();
    setState(1133);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 142, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1129);
        match(TorQLParser::COMMA);
        setState(1130);
        withExpr(); 
      }
      setState(1135);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 142, _ctx);
    }
    setState(1137);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == TorQLParser::COMMA) {
      setState(1136);
      match(TorQLParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WithExprContext ------------------------------------------------------------------

TorQLParser::WithExprContext::WithExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t TorQLParser::WithExprContext::getRuleIndex() const {
  return TorQLParser::RuleWithExpr;
}

void TorQLParser::WithExprContext::copyFrom(WithExprContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- WithExprColumnContext ------------------------------------------------------------------

TorQLParser::ColumnExprContext* TorQLParser::WithExprColumnContext::columnExpr() {
  return getRuleContext<TorQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* TorQLParser::WithExprColumnContext::AS() {
  return getToken(TorQLParser::AS, 0);
}

TorQLParser::IdentifierContext* TorQLParser::WithExprColumnContext::identifier() {
  return getRuleContext<TorQLParser::IdentifierContext>(0);
}

TorQLParser::WithExprColumnContext::WithExprColumnContext(WithExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::WithExprColumnContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitWithExprColumn(this);
  else
    return visitor->visitChildren(this);
}
//----------------- WithExprSubqueryContext ------------------------------------------------------------------

TorQLParser::IdentifierContext* TorQLParser::WithExprSubqueryContext::identifier() {
  return getRuleContext<TorQLParser::IdentifierContext>(0);
}

tree::TerminalNode* TorQLParser::WithExprSubqueryContext::AS() {
  return getToken(TorQLParser::AS, 0);
}

tree::TerminalNode* TorQLParser::WithExprSubqueryContext::LPAREN() {
  return getToken(TorQLParser::LPAREN, 0);
}

TorQLParser::SelectUnionStmtContext* TorQLParser::WithExprSubqueryContext::selectUnionStmt() {
  return getRuleContext<TorQLParser::SelectUnionStmtContext>(0);
}

tree::TerminalNode* TorQLParser::WithExprSubqueryContext::RPAREN() {
  return getToken(TorQLParser::RPAREN, 0);
}

TorQLParser::WithExprSubqueryContext::WithExprSubqueryContext(WithExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::WithExprSubqueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitWithExprSubquery(this);
  else
    return visitor->visitChildren(this);
}
TorQLParser::WithExprContext* TorQLParser::withExpr() {
  WithExprContext *_localctx = _tracker.createInstance<WithExprContext>(_ctx, getState());
  enterRule(_localctx, 126, TorQLParser::RuleWithExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1149);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 144, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<TorQLParser::WithExprSubqueryContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(1139);
      identifier();
      setState(1140);
      match(TorQLParser::AS);
      setState(1141);
      match(TorQLParser::LPAREN);
      setState(1142);
      selectUnionStmt();
      setState(1143);
      match(TorQLParser::RPAREN);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<TorQLParser::WithExprColumnContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(1145);
      columnExpr(0);
      setState(1146);
      match(TorQLParser::AS);
      setState(1147);
      identifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ColumnIdentifierContext ------------------------------------------------------------------

TorQLParser::ColumnIdentifierContext::ColumnIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

TorQLParser::PlaceholderContext* TorQLParser::ColumnIdentifierContext::placeholder() {
  return getRuleContext<TorQLParser::PlaceholderContext>(0);
}

TorQLParser::NestedIdentifierContext* TorQLParser::ColumnIdentifierContext::nestedIdentifier() {
  return getRuleContext<TorQLParser::NestedIdentifierContext>(0);
}

TorQLParser::TableIdentifierContext* TorQLParser::ColumnIdentifierContext::tableIdentifier() {
  return getRuleContext<TorQLParser::TableIdentifierContext>(0);
}

tree::TerminalNode* TorQLParser::ColumnIdentifierContext::DOT() {
  return getToken(TorQLParser::DOT, 0);
}


size_t TorQLParser::ColumnIdentifierContext::getRuleIndex() const {
  return TorQLParser::RuleColumnIdentifier;
}


std::any TorQLParser::ColumnIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitColumnIdentifier(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::ColumnIdentifierContext* TorQLParser::columnIdentifier() {
  ColumnIdentifierContext *_localctx = _tracker.createInstance<ColumnIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 128, TorQLParser::RuleColumnIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1158);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case TorQLParser::LBRACE: {
        enterOuterAlt(_localctx, 1);
        setState(1151);
        placeholder();
        break;
      }

      case TorQLParser::ALL:
      case TorQLParser::AND:
      case TorQLParser::ANTI:
      case TorQLParser::ANY:
      case TorQLParser::ARRAY:
      case TorQLParser::AS:
      case TorQLParser::ASCENDING:
      case TorQLParser::ASOF:
      case TorQLParser::BETWEEN:
      case TorQLParser::BOTH:
      case TorQLParser::BY:
      case TorQLParser::CASE:
      case TorQLParser::CAST:
      case TorQLParser::COHORT:
      case TorQLParser::COLLATE:
      case TorQLParser::CROSS:
      case TorQLParser::CUBE:
      case TorQLParser::CURRENT:
      case TorQLParser::DATE:
      case TorQLParser::DAY:
      case TorQLParser::DESC:
      case TorQLParser::DESCENDING:
      case TorQLParser::DISTINCT:
      case TorQLParser::ELSE:
      case TorQLParser::END:
      case TorQLParser::EXTRACT:
      case TorQLParser::FINAL:
      case TorQLParser::FIRST:
      case TorQLParser::FOLLOWING:
      case TorQLParser::FOR:
      case TorQLParser::FROM:
      case TorQLParser::FULL:
      case TorQLParser::GROUP:
      case TorQLParser::HAVING:
      case TorQLParser::HOUR:
      case TorQLParser::ID:
      case TorQLParser::IF:
      case TorQLParser::ILIKE:
      case TorQLParser::IN:
      case TorQLParser::INNER:
      case TorQLParser::INTERVAL:
      case TorQLParser::IS:
      case TorQLParser::JOIN:
      case TorQLParser::KEY:
      case TorQLParser::LAST:
      case TorQLParser::LEADING:
      case TorQLParser::LEFT:
      case TorQLParser::LIKE:
      case TorQLParser::LIMIT:
      case TorQLParser::MINUTE:
      case TorQLParser::MONTH:
      case TorQLParser::NOT:
      case TorQLParser::NULLS:
      case TorQLParser::OFFSET:
      case TorQLParser::ON:
      case TorQLParser::OR:
      case TorQLParser::ORDER:
      case TorQLParser::OUTER:
      case TorQLParser::OVER:
      case TorQLParser::PARTITION:
      case TorQLParser::PRECEDING:
      case TorQLParser::PREWHERE:
      case TorQLParser::QUARTER:
      case TorQLParser::RANGE:
      case TorQLParser::RETURN:
      case TorQLParser::RIGHT:
      case TorQLParser::ROLLUP:
      case TorQLParser::ROW:
      case TorQLParser::ROWS:
      case TorQLParser::SAMPLE:
      case TorQLParser::SECOND:
      case TorQLParser::SELECT:
      case TorQLParser::SEMI:
      case TorQLParser::SETTINGS:
      case TorQLParser::SUBSTRING:
      case TorQLParser::THEN:
      case TorQLParser::TIES:
      case TorQLParser::TIMESTAMP:
      case TorQLParser::TO:
      case TorQLParser::TOP:
      case TorQLParser::TOTALS:
      case TorQLParser::TRAILING:
      case TorQLParser::TRIM:
      case TorQLParser::TRUNCATE:
      case TorQLParser::UNBOUNDED:
      case TorQLParser::UNION:
      case TorQLParser::USING:
      case TorQLParser::WEEK:
      case TorQLParser::WHEN:
      case TorQLParser::WHERE:
      case TorQLParser::WINDOW:
      case TorQLParser::WITH:
      case TorQLParser::YEAR:
      case TorQLParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 2);
        setState(1155);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 145, _ctx)) {
        case 1: {
          setState(1152);
          tableIdentifier();
          setState(1153);
          match(TorQLParser::DOT);
          break;
        }

        default:
          break;
        }
        setState(1157);
        nestedIdentifier();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NestedIdentifierContext ------------------------------------------------------------------

TorQLParser::NestedIdentifierContext::NestedIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<TorQLParser::IdentifierContext *> TorQLParser::NestedIdentifierContext::identifier() {
  return getRuleContexts<TorQLParser::IdentifierContext>();
}

TorQLParser::IdentifierContext* TorQLParser::NestedIdentifierContext::identifier(size_t i) {
  return getRuleContext<TorQLParser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> TorQLParser::NestedIdentifierContext::DOT() {
  return getTokens(TorQLParser::DOT);
}

tree::TerminalNode* TorQLParser::NestedIdentifierContext::DOT(size_t i) {
  return getToken(TorQLParser::DOT, i);
}


size_t TorQLParser::NestedIdentifierContext::getRuleIndex() const {
  return TorQLParser::RuleNestedIdentifier;
}


std::any TorQLParser::NestedIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitNestedIdentifier(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::NestedIdentifierContext* TorQLParser::nestedIdentifier() {
  NestedIdentifierContext *_localctx = _tracker.createInstance<NestedIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 130, TorQLParser::RuleNestedIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1160);
    identifier();
    setState(1165);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 147, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1161);
        match(TorQLParser::DOT);
        setState(1162);
        identifier(); 
      }
      setState(1167);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 147, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableExprContext ------------------------------------------------------------------

TorQLParser::TableExprContext::TableExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t TorQLParser::TableExprContext::getRuleIndex() const {
  return TorQLParser::RuleTableExpr;
}

void TorQLParser::TableExprContext::copyFrom(TableExprContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- TableExprTagContext ------------------------------------------------------------------

TorQLParser::TorqlxTagElementContext* TorQLParser::TableExprTagContext::torqlxTagElement() {
  return getRuleContext<TorQLParser::TorqlxTagElementContext>(0);
}

TorQLParser::TableExprTagContext::TableExprTagContext(TableExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::TableExprTagContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitTableExprTag(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableExprIdentifierContext ------------------------------------------------------------------

TorQLParser::TableIdentifierContext* TorQLParser::TableExprIdentifierContext::tableIdentifier() {
  return getRuleContext<TorQLParser::TableIdentifierContext>(0);
}

TorQLParser::TableExprIdentifierContext::TableExprIdentifierContext(TableExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::TableExprIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitTableExprIdentifier(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableExprPlaceholderContext ------------------------------------------------------------------

TorQLParser::PlaceholderContext* TorQLParser::TableExprPlaceholderContext::placeholder() {
  return getRuleContext<TorQLParser::PlaceholderContext>(0);
}

TorQLParser::TableExprPlaceholderContext::TableExprPlaceholderContext(TableExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::TableExprPlaceholderContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitTableExprPlaceholder(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableExprSubqueryContext ------------------------------------------------------------------

tree::TerminalNode* TorQLParser::TableExprSubqueryContext::LPAREN() {
  return getToken(TorQLParser::LPAREN, 0);
}

TorQLParser::SelectUnionStmtContext* TorQLParser::TableExprSubqueryContext::selectUnionStmt() {
  return getRuleContext<TorQLParser::SelectUnionStmtContext>(0);
}

tree::TerminalNode* TorQLParser::TableExprSubqueryContext::RPAREN() {
  return getToken(TorQLParser::RPAREN, 0);
}

TorQLParser::TableExprSubqueryContext::TableExprSubqueryContext(TableExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::TableExprSubqueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitTableExprSubquery(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableExprAliasContext ------------------------------------------------------------------

TorQLParser::TableExprContext* TorQLParser::TableExprAliasContext::tableExpr() {
  return getRuleContext<TorQLParser::TableExprContext>(0);
}

TorQLParser::AliasContext* TorQLParser::TableExprAliasContext::alias() {
  return getRuleContext<TorQLParser::AliasContext>(0);
}

tree::TerminalNode* TorQLParser::TableExprAliasContext::AS() {
  return getToken(TorQLParser::AS, 0);
}

TorQLParser::IdentifierContext* TorQLParser::TableExprAliasContext::identifier() {
  return getRuleContext<TorQLParser::IdentifierContext>(0);
}

TorQLParser::TableExprAliasContext::TableExprAliasContext(TableExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::TableExprAliasContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitTableExprAlias(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableExprFunctionContext ------------------------------------------------------------------

TorQLParser::TableFunctionExprContext* TorQLParser::TableExprFunctionContext::tableFunctionExpr() {
  return getRuleContext<TorQLParser::TableFunctionExprContext>(0);
}

TorQLParser::TableExprFunctionContext::TableExprFunctionContext(TableExprContext *ctx) { copyFrom(ctx); }


std::any TorQLParser::TableExprFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitTableExprFunction(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::TableExprContext* TorQLParser::tableExpr() {
   return tableExpr(0);
}

TorQLParser::TableExprContext* TorQLParser::tableExpr(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  TorQLParser::TableExprContext *_localctx = _tracker.createInstance<TableExprContext>(_ctx, parentState);
  TorQLParser::TableExprContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 132;
  enterRecursionRule(_localctx, 132, TorQLParser::RuleTableExpr, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1177);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 148, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<TableExprIdentifierContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(1169);
      tableIdentifier();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<TableExprFunctionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1170);
      tableFunctionExpr();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<TableExprSubqueryContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1171);
      match(TorQLParser::LPAREN);
      setState(1172);
      selectUnionStmt();
      setState(1173);
      match(TorQLParser::RPAREN);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<TableExprTagContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1175);
      torqlxTagElement();
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<TableExprPlaceholderContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1176);
      placeholder();
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(1187);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 150, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        auto newContext = _tracker.createInstance<TableExprAliasContext>(_tracker.createInstance<TableExprContext>(parentContext, parentState));
        _localctx = newContext;
        pushNewRecursionContext(newContext, startState, RuleTableExpr);
        setState(1179);

        if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
        setState(1183);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case TorQLParser::DATE:
          case TorQLParser::FIRST:
          case TorQLParser::ID:
          case TorQLParser::KEY:
          case TorQLParser::IDENTIFIER: {
            setState(1180);
            alias();
            break;
          }

          case TorQLParser::AS: {
            setState(1181);
            match(TorQLParser::AS);
            setState(1182);
            identifier();
            break;
          }

        default:
          throw NoViableAltException(this);
        } 
      }
      setState(1189);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 150, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- TableFunctionExprContext ------------------------------------------------------------------

TorQLParser::TableFunctionExprContext::TableFunctionExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

TorQLParser::IdentifierContext* TorQLParser::TableFunctionExprContext::identifier() {
  return getRuleContext<TorQLParser::IdentifierContext>(0);
}

tree::TerminalNode* TorQLParser::TableFunctionExprContext::LPAREN() {
  return getToken(TorQLParser::LPAREN, 0);
}

tree::TerminalNode* TorQLParser::TableFunctionExprContext::RPAREN() {
  return getToken(TorQLParser::RPAREN, 0);
}

TorQLParser::TableArgListContext* TorQLParser::TableFunctionExprContext::tableArgList() {
  return getRuleContext<TorQLParser::TableArgListContext>(0);
}


size_t TorQLParser::TableFunctionExprContext::getRuleIndex() const {
  return TorQLParser::RuleTableFunctionExpr;
}


std::any TorQLParser::TableFunctionExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitTableFunctionExpr(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::TableFunctionExprContext* TorQLParser::tableFunctionExpr() {
  TableFunctionExprContext *_localctx = _tracker.createInstance<TableFunctionExprContext>(_ctx, getState());
  enterRule(_localctx, 134, TorQLParser::RuleTableFunctionExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1190);
    identifier();
    setState(1191);
    match(TorQLParser::LPAREN);
    setState(1193);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -9007270658588674) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 180986072486903807) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 18455) != 0)) {
      setState(1192);
      tableArgList();
    }
    setState(1195);
    match(TorQLParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableIdentifierContext ------------------------------------------------------------------

TorQLParser::TableIdentifierContext::TableIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

TorQLParser::IdentifierContext* TorQLParser::TableIdentifierContext::identifier() {
  return getRuleContext<TorQLParser::IdentifierContext>(0);
}

TorQLParser::DatabaseIdentifierContext* TorQLParser::TableIdentifierContext::databaseIdentifier() {
  return getRuleContext<TorQLParser::DatabaseIdentifierContext>(0);
}

tree::TerminalNode* TorQLParser::TableIdentifierContext::DOT() {
  return getToken(TorQLParser::DOT, 0);
}


size_t TorQLParser::TableIdentifierContext::getRuleIndex() const {
  return TorQLParser::RuleTableIdentifier;
}


std::any TorQLParser::TableIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitTableIdentifier(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::TableIdentifierContext* TorQLParser::tableIdentifier() {
  TableIdentifierContext *_localctx = _tracker.createInstance<TableIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 136, TorQLParser::RuleTableIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1200);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 152, _ctx)) {
    case 1: {
      setState(1197);
      databaseIdentifier();
      setState(1198);
      match(TorQLParser::DOT);
      break;
    }

    default:
      break;
    }
    setState(1202);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableArgListContext ------------------------------------------------------------------

TorQLParser::TableArgListContext::TableArgListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<TorQLParser::ColumnExprContext *> TorQLParser::TableArgListContext::columnExpr() {
  return getRuleContexts<TorQLParser::ColumnExprContext>();
}

TorQLParser::ColumnExprContext* TorQLParser::TableArgListContext::columnExpr(size_t i) {
  return getRuleContext<TorQLParser::ColumnExprContext>(i);
}

std::vector<tree::TerminalNode *> TorQLParser::TableArgListContext::COMMA() {
  return getTokens(TorQLParser::COMMA);
}

tree::TerminalNode* TorQLParser::TableArgListContext::COMMA(size_t i) {
  return getToken(TorQLParser::COMMA, i);
}


size_t TorQLParser::TableArgListContext::getRuleIndex() const {
  return TorQLParser::RuleTableArgList;
}


std::any TorQLParser::TableArgListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitTableArgList(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::TableArgListContext* TorQLParser::tableArgList() {
  TableArgListContext *_localctx = _tracker.createInstance<TableArgListContext>(_ctx, getState());
  enterRule(_localctx, 138, TorQLParser::RuleTableArgList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1204);
    columnExpr(0);
    setState(1209);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 153, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1205);
        match(TorQLParser::COMMA);
        setState(1206);
        columnExpr(0); 
      }
      setState(1211);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 153, _ctx);
    }
    setState(1213);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == TorQLParser::COMMA) {
      setState(1212);
      match(TorQLParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DatabaseIdentifierContext ------------------------------------------------------------------

TorQLParser::DatabaseIdentifierContext::DatabaseIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

TorQLParser::IdentifierContext* TorQLParser::DatabaseIdentifierContext::identifier() {
  return getRuleContext<TorQLParser::IdentifierContext>(0);
}


size_t TorQLParser::DatabaseIdentifierContext::getRuleIndex() const {
  return TorQLParser::RuleDatabaseIdentifier;
}


std::any TorQLParser::DatabaseIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitDatabaseIdentifier(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::DatabaseIdentifierContext* TorQLParser::databaseIdentifier() {
  DatabaseIdentifierContext *_localctx = _tracker.createInstance<DatabaseIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 140, TorQLParser::RuleDatabaseIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1215);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FloatingLiteralContext ------------------------------------------------------------------

TorQLParser::FloatingLiteralContext::FloatingLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::FloatingLiteralContext::FLOATING_LITERAL() {
  return getToken(TorQLParser::FLOATING_LITERAL, 0);
}

tree::TerminalNode* TorQLParser::FloatingLiteralContext::DOT() {
  return getToken(TorQLParser::DOT, 0);
}

std::vector<tree::TerminalNode *> TorQLParser::FloatingLiteralContext::DECIMAL_LITERAL() {
  return getTokens(TorQLParser::DECIMAL_LITERAL);
}

tree::TerminalNode* TorQLParser::FloatingLiteralContext::DECIMAL_LITERAL(size_t i) {
  return getToken(TorQLParser::DECIMAL_LITERAL, i);
}

tree::TerminalNode* TorQLParser::FloatingLiteralContext::OCTAL_LITERAL() {
  return getToken(TorQLParser::OCTAL_LITERAL, 0);
}


size_t TorQLParser::FloatingLiteralContext::getRuleIndex() const {
  return TorQLParser::RuleFloatingLiteral;
}


std::any TorQLParser::FloatingLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitFloatingLiteral(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::FloatingLiteralContext* TorQLParser::floatingLiteral() {
  FloatingLiteralContext *_localctx = _tracker.createInstance<FloatingLiteralContext>(_ctx, getState());
  enterRule(_localctx, 142, TorQLParser::RuleFloatingLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1225);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case TorQLParser::FLOATING_LITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(1217);
        match(TorQLParser::FLOATING_LITERAL);
        break;
      }

      case TorQLParser::DOT: {
        enterOuterAlt(_localctx, 2);
        setState(1218);
        match(TorQLParser::DOT);
        setState(1219);
        _la = _input->LA(1);
        if (!(_la == TorQLParser::OCTAL_LITERAL

        || _la == TorQLParser::DECIMAL_LITERAL)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case TorQLParser::DECIMAL_LITERAL: {
        enterOuterAlt(_localctx, 3);
        setState(1220);
        match(TorQLParser::DECIMAL_LITERAL);
        setState(1221);
        match(TorQLParser::DOT);
        setState(1223);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 155, _ctx)) {
        case 1: {
          setState(1222);
          _la = _input->LA(1);
          if (!(_la == TorQLParser::OCTAL_LITERAL

          || _la == TorQLParser::DECIMAL_LITERAL)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumberLiteralContext ------------------------------------------------------------------

TorQLParser::NumberLiteralContext::NumberLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

TorQLParser::FloatingLiteralContext* TorQLParser::NumberLiteralContext::floatingLiteral() {
  return getRuleContext<TorQLParser::FloatingLiteralContext>(0);
}

tree::TerminalNode* TorQLParser::NumberLiteralContext::OCTAL_LITERAL() {
  return getToken(TorQLParser::OCTAL_LITERAL, 0);
}

tree::TerminalNode* TorQLParser::NumberLiteralContext::DECIMAL_LITERAL() {
  return getToken(TorQLParser::DECIMAL_LITERAL, 0);
}

tree::TerminalNode* TorQLParser::NumberLiteralContext::HEXADECIMAL_LITERAL() {
  return getToken(TorQLParser::HEXADECIMAL_LITERAL, 0);
}

tree::TerminalNode* TorQLParser::NumberLiteralContext::INF() {
  return getToken(TorQLParser::INF, 0);
}

tree::TerminalNode* TorQLParser::NumberLiteralContext::NAN_SQL() {
  return getToken(TorQLParser::NAN_SQL, 0);
}

tree::TerminalNode* TorQLParser::NumberLiteralContext::PLUS() {
  return getToken(TorQLParser::PLUS, 0);
}

tree::TerminalNode* TorQLParser::NumberLiteralContext::DASH() {
  return getToken(TorQLParser::DASH, 0);
}


size_t TorQLParser::NumberLiteralContext::getRuleIndex() const {
  return TorQLParser::RuleNumberLiteral;
}


std::any TorQLParser::NumberLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitNumberLiteral(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::NumberLiteralContext* TorQLParser::numberLiteral() {
  NumberLiteralContext *_localctx = _tracker.createInstance<NumberLiteralContext>(_ctx, getState());
  enterRule(_localctx, 144, TorQLParser::RuleNumberLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1228);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == TorQLParser::DASH

    || _la == TorQLParser::PLUS) {
      setState(1227);
      _la = _input->LA(1);
      if (!(_la == TorQLParser::DASH

      || _la == TorQLParser::PLUS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(1236);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 158, _ctx)) {
    case 1: {
      setState(1230);
      floatingLiteral();
      break;
    }

    case 2: {
      setState(1231);
      match(TorQLParser::OCTAL_LITERAL);
      break;
    }

    case 3: {
      setState(1232);
      match(TorQLParser::DECIMAL_LITERAL);
      break;
    }

    case 4: {
      setState(1233);
      match(TorQLParser::HEXADECIMAL_LITERAL);
      break;
    }

    case 5: {
      setState(1234);
      match(TorQLParser::INF);
      break;
    }

    case 6: {
      setState(1235);
      match(TorQLParser::NAN_SQL);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LiteralContext ------------------------------------------------------------------

TorQLParser::LiteralContext::LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

TorQLParser::NumberLiteralContext* TorQLParser::LiteralContext::numberLiteral() {
  return getRuleContext<TorQLParser::NumberLiteralContext>(0);
}

tree::TerminalNode* TorQLParser::LiteralContext::STRING_LITERAL() {
  return getToken(TorQLParser::STRING_LITERAL, 0);
}

tree::TerminalNode* TorQLParser::LiteralContext::NULL_SQL() {
  return getToken(TorQLParser::NULL_SQL, 0);
}


size_t TorQLParser::LiteralContext::getRuleIndex() const {
  return TorQLParser::RuleLiteral;
}


std::any TorQLParser::LiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitLiteral(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::LiteralContext* TorQLParser::literal() {
  LiteralContext *_localctx = _tracker.createInstance<LiteralContext>(_ctx, getState());
  enterRule(_localctx, 146, TorQLParser::RuleLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1241);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case TorQLParser::INF:
      case TorQLParser::NAN_SQL:
      case TorQLParser::FLOATING_LITERAL:
      case TorQLParser::OCTAL_LITERAL:
      case TorQLParser::DECIMAL_LITERAL:
      case TorQLParser::HEXADECIMAL_LITERAL:
      case TorQLParser::DASH:
      case TorQLParser::DOT:
      case TorQLParser::PLUS: {
        enterOuterAlt(_localctx, 1);
        setState(1238);
        numberLiteral();
        break;
      }

      case TorQLParser::STRING_LITERAL: {
        enterOuterAlt(_localctx, 2);
        setState(1239);
        match(TorQLParser::STRING_LITERAL);
        break;
      }

      case TorQLParser::NULL_SQL: {
        enterOuterAlt(_localctx, 3);
        setState(1240);
        match(TorQLParser::NULL_SQL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntervalContext ------------------------------------------------------------------

TorQLParser::IntervalContext::IntervalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::IntervalContext::SECOND() {
  return getToken(TorQLParser::SECOND, 0);
}

tree::TerminalNode* TorQLParser::IntervalContext::MINUTE() {
  return getToken(TorQLParser::MINUTE, 0);
}

tree::TerminalNode* TorQLParser::IntervalContext::HOUR() {
  return getToken(TorQLParser::HOUR, 0);
}

tree::TerminalNode* TorQLParser::IntervalContext::DAY() {
  return getToken(TorQLParser::DAY, 0);
}

tree::TerminalNode* TorQLParser::IntervalContext::WEEK() {
  return getToken(TorQLParser::WEEK, 0);
}

tree::TerminalNode* TorQLParser::IntervalContext::MONTH() {
  return getToken(TorQLParser::MONTH, 0);
}

tree::TerminalNode* TorQLParser::IntervalContext::QUARTER() {
  return getToken(TorQLParser::QUARTER, 0);
}

tree::TerminalNode* TorQLParser::IntervalContext::YEAR() {
  return getToken(TorQLParser::YEAR, 0);
}


size_t TorQLParser::IntervalContext::getRuleIndex() const {
  return TorQLParser::RuleInterval;
}


std::any TorQLParser::IntervalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitInterval(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::IntervalContext* TorQLParser::interval() {
  IntervalContext *_localctx = _tracker.createInstance<IntervalContext>(_ctx, getState());
  enterRule(_localctx, 148, TorQLParser::RuleInterval);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1243);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 216173331871694848) != 0) || ((((_la - 71) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 71)) & 8724152577) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KeywordContext ------------------------------------------------------------------

TorQLParser::KeywordContext::KeywordContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::KeywordContext::ALL() {
  return getToken(TorQLParser::ALL, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::AND() {
  return getToken(TorQLParser::AND, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::ANTI() {
  return getToken(TorQLParser::ANTI, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::ANY() {
  return getToken(TorQLParser::ANY, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::ARRAY() {
  return getToken(TorQLParser::ARRAY, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::AS() {
  return getToken(TorQLParser::AS, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::ASCENDING() {
  return getToken(TorQLParser::ASCENDING, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::ASOF() {
  return getToken(TorQLParser::ASOF, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::BETWEEN() {
  return getToken(TorQLParser::BETWEEN, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::BOTH() {
  return getToken(TorQLParser::BOTH, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::BY() {
  return getToken(TorQLParser::BY, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::CASE() {
  return getToken(TorQLParser::CASE, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::CAST() {
  return getToken(TorQLParser::CAST, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::COHORT() {
  return getToken(TorQLParser::COHORT, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::COLLATE() {
  return getToken(TorQLParser::COLLATE, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::CROSS() {
  return getToken(TorQLParser::CROSS, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::CUBE() {
  return getToken(TorQLParser::CUBE, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::CURRENT() {
  return getToken(TorQLParser::CURRENT, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::DATE() {
  return getToken(TorQLParser::DATE, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::DESC() {
  return getToken(TorQLParser::DESC, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::DESCENDING() {
  return getToken(TorQLParser::DESCENDING, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::DISTINCT() {
  return getToken(TorQLParser::DISTINCT, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::ELSE() {
  return getToken(TorQLParser::ELSE, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::END() {
  return getToken(TorQLParser::END, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::EXTRACT() {
  return getToken(TorQLParser::EXTRACT, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::FINAL() {
  return getToken(TorQLParser::FINAL, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::FIRST() {
  return getToken(TorQLParser::FIRST, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::FOR() {
  return getToken(TorQLParser::FOR, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::FOLLOWING() {
  return getToken(TorQLParser::FOLLOWING, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::FROM() {
  return getToken(TorQLParser::FROM, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::FULL() {
  return getToken(TorQLParser::FULL, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::GROUP() {
  return getToken(TorQLParser::GROUP, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::HAVING() {
  return getToken(TorQLParser::HAVING, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::ID() {
  return getToken(TorQLParser::ID, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::IS() {
  return getToken(TorQLParser::IS, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::IF() {
  return getToken(TorQLParser::IF, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::ILIKE() {
  return getToken(TorQLParser::ILIKE, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::IN() {
  return getToken(TorQLParser::IN, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::INNER() {
  return getToken(TorQLParser::INNER, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::INTERVAL() {
  return getToken(TorQLParser::INTERVAL, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::JOIN() {
  return getToken(TorQLParser::JOIN, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::KEY() {
  return getToken(TorQLParser::KEY, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::LAST() {
  return getToken(TorQLParser::LAST, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::LEADING() {
  return getToken(TorQLParser::LEADING, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::LEFT() {
  return getToken(TorQLParser::LEFT, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::LIKE() {
  return getToken(TorQLParser::LIKE, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::LIMIT() {
  return getToken(TorQLParser::LIMIT, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::NOT() {
  return getToken(TorQLParser::NOT, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::NULLS() {
  return getToken(TorQLParser::NULLS, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::OFFSET() {
  return getToken(TorQLParser::OFFSET, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::ON() {
  return getToken(TorQLParser::ON, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::OR() {
  return getToken(TorQLParser::OR, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::ORDER() {
  return getToken(TorQLParser::ORDER, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::OUTER() {
  return getToken(TorQLParser::OUTER, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::OVER() {
  return getToken(TorQLParser::OVER, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::PARTITION() {
  return getToken(TorQLParser::PARTITION, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::PRECEDING() {
  return getToken(TorQLParser::PRECEDING, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::PREWHERE() {
  return getToken(TorQLParser::PREWHERE, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::RANGE() {
  return getToken(TorQLParser::RANGE, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::RETURN() {
  return getToken(TorQLParser::RETURN, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::RIGHT() {
  return getToken(TorQLParser::RIGHT, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::ROLLUP() {
  return getToken(TorQLParser::ROLLUP, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::ROW() {
  return getToken(TorQLParser::ROW, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::ROWS() {
  return getToken(TorQLParser::ROWS, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::SAMPLE() {
  return getToken(TorQLParser::SAMPLE, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::SELECT() {
  return getToken(TorQLParser::SELECT, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::SEMI() {
  return getToken(TorQLParser::SEMI, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::SETTINGS() {
  return getToken(TorQLParser::SETTINGS, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::SUBSTRING() {
  return getToken(TorQLParser::SUBSTRING, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::THEN() {
  return getToken(TorQLParser::THEN, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::TIES() {
  return getToken(TorQLParser::TIES, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::TIMESTAMP() {
  return getToken(TorQLParser::TIMESTAMP, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::TOTALS() {
  return getToken(TorQLParser::TOTALS, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::TRAILING() {
  return getToken(TorQLParser::TRAILING, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::TRIM() {
  return getToken(TorQLParser::TRIM, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::TRUNCATE() {
  return getToken(TorQLParser::TRUNCATE, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::TO() {
  return getToken(TorQLParser::TO, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::TOP() {
  return getToken(TorQLParser::TOP, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::UNBOUNDED() {
  return getToken(TorQLParser::UNBOUNDED, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::UNION() {
  return getToken(TorQLParser::UNION, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::USING() {
  return getToken(TorQLParser::USING, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::WHEN() {
  return getToken(TorQLParser::WHEN, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::WHERE() {
  return getToken(TorQLParser::WHERE, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::WINDOW() {
  return getToken(TorQLParser::WINDOW, 0);
}

tree::TerminalNode* TorQLParser::KeywordContext::WITH() {
  return getToken(TorQLParser::WITH, 0);
}


size_t TorQLParser::KeywordContext::getRuleIndex() const {
  return TorQLParser::RuleKeyword;
}


std::any TorQLParser::KeywordContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitKeyword(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::KeywordContext* TorQLParser::keyword() {
  KeywordContext *_localctx = _tracker.createInstance<KeywordContext>(_ctx, getState());
  enterRule(_localctx, 150, TorQLParser::RuleKeyword);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1245);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -1666350075474886658) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 943816933247) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KeywordForAliasContext ------------------------------------------------------------------

TorQLParser::KeywordForAliasContext::KeywordForAliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::KeywordForAliasContext::DATE() {
  return getToken(TorQLParser::DATE, 0);
}

tree::TerminalNode* TorQLParser::KeywordForAliasContext::FIRST() {
  return getToken(TorQLParser::FIRST, 0);
}

tree::TerminalNode* TorQLParser::KeywordForAliasContext::ID() {
  return getToken(TorQLParser::ID, 0);
}

tree::TerminalNode* TorQLParser::KeywordForAliasContext::KEY() {
  return getToken(TorQLParser::KEY, 0);
}


size_t TorQLParser::KeywordForAliasContext::getRuleIndex() const {
  return TorQLParser::RuleKeywordForAlias;
}


std::any TorQLParser::KeywordForAliasContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitKeywordForAlias(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::KeywordForAliasContext* TorQLParser::keywordForAlias() {
  KeywordForAliasContext *_localctx = _tracker.createInstance<KeywordForAliasContext>(_ctx, getState());
  enterRule(_localctx, 152, TorQLParser::RuleKeywordForAlias);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1247);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 564050539839488) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AliasContext ------------------------------------------------------------------

TorQLParser::AliasContext::AliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::AliasContext::IDENTIFIER() {
  return getToken(TorQLParser::IDENTIFIER, 0);
}

TorQLParser::KeywordForAliasContext* TorQLParser::AliasContext::keywordForAlias() {
  return getRuleContext<TorQLParser::KeywordForAliasContext>(0);
}


size_t TorQLParser::AliasContext::getRuleIndex() const {
  return TorQLParser::RuleAlias;
}


std::any TorQLParser::AliasContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitAlias(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::AliasContext* TorQLParser::alias() {
  AliasContext *_localctx = _tracker.createInstance<AliasContext>(_ctx, getState());
  enterRule(_localctx, 154, TorQLParser::RuleAlias);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1251);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case TorQLParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1249);
        match(TorQLParser::IDENTIFIER);
        break;
      }

      case TorQLParser::DATE:
      case TorQLParser::FIRST:
      case TorQLParser::ID:
      case TorQLParser::KEY: {
        enterOuterAlt(_localctx, 2);
        setState(1250);
        keywordForAlias();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierContext ------------------------------------------------------------------

TorQLParser::IdentifierContext::IdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::IdentifierContext::IDENTIFIER() {
  return getToken(TorQLParser::IDENTIFIER, 0);
}

TorQLParser::IntervalContext* TorQLParser::IdentifierContext::interval() {
  return getRuleContext<TorQLParser::IntervalContext>(0);
}

TorQLParser::KeywordContext* TorQLParser::IdentifierContext::keyword() {
  return getRuleContext<TorQLParser::KeywordContext>(0);
}


size_t TorQLParser::IdentifierContext::getRuleIndex() const {
  return TorQLParser::RuleIdentifier;
}


std::any TorQLParser::IdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitIdentifier(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::IdentifierContext* TorQLParser::identifier() {
  IdentifierContext *_localctx = _tracker.createInstance<IdentifierContext>(_ctx, getState());
  enterRule(_localctx, 156, TorQLParser::RuleIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1256);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case TorQLParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1253);
        match(TorQLParser::IDENTIFIER);
        break;
      }

      case TorQLParser::DAY:
      case TorQLParser::HOUR:
      case TorQLParser::MINUTE:
      case TorQLParser::MONTH:
      case TorQLParser::QUARTER:
      case TorQLParser::SECOND:
      case TorQLParser::WEEK:
      case TorQLParser::YEAR: {
        enterOuterAlt(_localctx, 2);
        setState(1254);
        interval();
        break;
      }

      case TorQLParser::ALL:
      case TorQLParser::AND:
      case TorQLParser::ANTI:
      case TorQLParser::ANY:
      case TorQLParser::ARRAY:
      case TorQLParser::AS:
      case TorQLParser::ASCENDING:
      case TorQLParser::ASOF:
      case TorQLParser::BETWEEN:
      case TorQLParser::BOTH:
      case TorQLParser::BY:
      case TorQLParser::CASE:
      case TorQLParser::CAST:
      case TorQLParser::COHORT:
      case TorQLParser::COLLATE:
      case TorQLParser::CROSS:
      case TorQLParser::CUBE:
      case TorQLParser::CURRENT:
      case TorQLParser::DATE:
      case TorQLParser::DESC:
      case TorQLParser::DESCENDING:
      case TorQLParser::DISTINCT:
      case TorQLParser::ELSE:
      case TorQLParser::END:
      case TorQLParser::EXTRACT:
      case TorQLParser::FINAL:
      case TorQLParser::FIRST:
      case TorQLParser::FOLLOWING:
      case TorQLParser::FOR:
      case TorQLParser::FROM:
      case TorQLParser::FULL:
      case TorQLParser::GROUP:
      case TorQLParser::HAVING:
      case TorQLParser::ID:
      case TorQLParser::IF:
      case TorQLParser::ILIKE:
      case TorQLParser::IN:
      case TorQLParser::INNER:
      case TorQLParser::INTERVAL:
      case TorQLParser::IS:
      case TorQLParser::JOIN:
      case TorQLParser::KEY:
      case TorQLParser::LAST:
      case TorQLParser::LEADING:
      case TorQLParser::LEFT:
      case TorQLParser::LIKE:
      case TorQLParser::LIMIT:
      case TorQLParser::NOT:
      case TorQLParser::NULLS:
      case TorQLParser::OFFSET:
      case TorQLParser::ON:
      case TorQLParser::OR:
      case TorQLParser::ORDER:
      case TorQLParser::OUTER:
      case TorQLParser::OVER:
      case TorQLParser::PARTITION:
      case TorQLParser::PRECEDING:
      case TorQLParser::PREWHERE:
      case TorQLParser::RANGE:
      case TorQLParser::RETURN:
      case TorQLParser::RIGHT:
      case TorQLParser::ROLLUP:
      case TorQLParser::ROW:
      case TorQLParser::ROWS:
      case TorQLParser::SAMPLE:
      case TorQLParser::SELECT:
      case TorQLParser::SEMI:
      case TorQLParser::SETTINGS:
      case TorQLParser::SUBSTRING:
      case TorQLParser::THEN:
      case TorQLParser::TIES:
      case TorQLParser::TIMESTAMP:
      case TorQLParser::TO:
      case TorQLParser::TOP:
      case TorQLParser::TOTALS:
      case TorQLParser::TRAILING:
      case TorQLParser::TRIM:
      case TorQLParser::TRUNCATE:
      case TorQLParser::UNBOUNDED:
      case TorQLParser::UNION:
      case TorQLParser::USING:
      case TorQLParser::WHEN:
      case TorQLParser::WHERE:
      case TorQLParser::WINDOW:
      case TorQLParser::WITH: {
        enterOuterAlt(_localctx, 3);
        setState(1255);
        keyword();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumValueContext ------------------------------------------------------------------

TorQLParser::EnumValueContext::EnumValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

TorQLParser::StringContext* TorQLParser::EnumValueContext::string() {
  return getRuleContext<TorQLParser::StringContext>(0);
}

tree::TerminalNode* TorQLParser::EnumValueContext::EQ_SINGLE() {
  return getToken(TorQLParser::EQ_SINGLE, 0);
}

TorQLParser::NumberLiteralContext* TorQLParser::EnumValueContext::numberLiteral() {
  return getRuleContext<TorQLParser::NumberLiteralContext>(0);
}


size_t TorQLParser::EnumValueContext::getRuleIndex() const {
  return TorQLParser::RuleEnumValue;
}


std::any TorQLParser::EnumValueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitEnumValue(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::EnumValueContext* TorQLParser::enumValue() {
  EnumValueContext *_localctx = _tracker.createInstance<EnumValueContext>(_ctx, getState());
  enterRule(_localctx, 158, TorQLParser::RuleEnumValue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1258);
    string();
    setState(1259);
    match(TorQLParser::EQ_SINGLE);
    setState(1260);
    numberLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PlaceholderContext ------------------------------------------------------------------

TorQLParser::PlaceholderContext::PlaceholderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::PlaceholderContext::LBRACE() {
  return getToken(TorQLParser::LBRACE, 0);
}

TorQLParser::ColumnExprContext* TorQLParser::PlaceholderContext::columnExpr() {
  return getRuleContext<TorQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* TorQLParser::PlaceholderContext::RBRACE() {
  return getToken(TorQLParser::RBRACE, 0);
}


size_t TorQLParser::PlaceholderContext::getRuleIndex() const {
  return TorQLParser::RulePlaceholder;
}


std::any TorQLParser::PlaceholderContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitPlaceholder(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::PlaceholderContext* TorQLParser::placeholder() {
  PlaceholderContext *_localctx = _tracker.createInstance<PlaceholderContext>(_ctx, getState());
  enterRule(_localctx, 160, TorQLParser::RulePlaceholder);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1262);
    match(TorQLParser::LBRACE);
    setState(1263);
    columnExpr(0);
    setState(1264);
    match(TorQLParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringContext ------------------------------------------------------------------

TorQLParser::StringContext::StringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::StringContext::STRING_LITERAL() {
  return getToken(TorQLParser::STRING_LITERAL, 0);
}

TorQLParser::TemplateStringContext* TorQLParser::StringContext::templateString() {
  return getRuleContext<TorQLParser::TemplateStringContext>(0);
}


size_t TorQLParser::StringContext::getRuleIndex() const {
  return TorQLParser::RuleString;
}


std::any TorQLParser::StringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitString(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::StringContext* TorQLParser::string() {
  StringContext *_localctx = _tracker.createInstance<StringContext>(_ctx, getState());
  enterRule(_localctx, 162, TorQLParser::RuleString);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1268);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case TorQLParser::STRING_LITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(1266);
        match(TorQLParser::STRING_LITERAL);
        break;
      }

      case TorQLParser::QUOTE_SINGLE_TEMPLATE: {
        enterOuterAlt(_localctx, 2);
        setState(1267);
        templateString();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TemplateStringContext ------------------------------------------------------------------

TorQLParser::TemplateStringContext::TemplateStringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::TemplateStringContext::QUOTE_SINGLE_TEMPLATE() {
  return getToken(TorQLParser::QUOTE_SINGLE_TEMPLATE, 0);
}

tree::TerminalNode* TorQLParser::TemplateStringContext::QUOTE_SINGLE() {
  return getToken(TorQLParser::QUOTE_SINGLE, 0);
}

std::vector<TorQLParser::StringContentsContext *> TorQLParser::TemplateStringContext::stringContents() {
  return getRuleContexts<TorQLParser::StringContentsContext>();
}

TorQLParser::StringContentsContext* TorQLParser::TemplateStringContext::stringContents(size_t i) {
  return getRuleContext<TorQLParser::StringContentsContext>(i);
}


size_t TorQLParser::TemplateStringContext::getRuleIndex() const {
  return TorQLParser::RuleTemplateString;
}


std::any TorQLParser::TemplateStringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitTemplateString(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::TemplateStringContext* TorQLParser::templateString() {
  TemplateStringContext *_localctx = _tracker.createInstance<TemplateStringContext>(_ctx, getState());
  enterRule(_localctx, 164, TorQLParser::RuleTemplateString);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1270);
    match(TorQLParser::QUOTE_SINGLE_TEMPLATE);
    setState(1274);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == TorQLParser::STRING_TEXT

    || _la == TorQLParser::STRING_ESCAPE_TRIGGER) {
      setState(1271);
      stringContents();
      setState(1276);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1277);
    match(TorQLParser::QUOTE_SINGLE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringContentsContext ------------------------------------------------------------------

TorQLParser::StringContentsContext::StringContentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::StringContentsContext::STRING_ESCAPE_TRIGGER() {
  return getToken(TorQLParser::STRING_ESCAPE_TRIGGER, 0);
}

TorQLParser::ColumnExprContext* TorQLParser::StringContentsContext::columnExpr() {
  return getRuleContext<TorQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* TorQLParser::StringContentsContext::RBRACE() {
  return getToken(TorQLParser::RBRACE, 0);
}

tree::TerminalNode* TorQLParser::StringContentsContext::STRING_TEXT() {
  return getToken(TorQLParser::STRING_TEXT, 0);
}


size_t TorQLParser::StringContentsContext::getRuleIndex() const {
  return TorQLParser::RuleStringContents;
}


std::any TorQLParser::StringContentsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitStringContents(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::StringContentsContext* TorQLParser::stringContents() {
  StringContentsContext *_localctx = _tracker.createInstance<StringContentsContext>(_ctx, getState());
  enterRule(_localctx, 166, TorQLParser::RuleStringContents);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1284);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case TorQLParser::STRING_ESCAPE_TRIGGER: {
        enterOuterAlt(_localctx, 1);
        setState(1279);
        match(TorQLParser::STRING_ESCAPE_TRIGGER);
        setState(1280);
        columnExpr(0);
        setState(1281);
        match(TorQLParser::RBRACE);
        break;
      }

      case TorQLParser::STRING_TEXT: {
        enterOuterAlt(_localctx, 2);
        setState(1283);
        match(TorQLParser::STRING_TEXT);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FullTemplateStringContext ------------------------------------------------------------------

TorQLParser::FullTemplateStringContext::FullTemplateStringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::FullTemplateStringContext::QUOTE_SINGLE_TEMPLATE_FULL() {
  return getToken(TorQLParser::QUOTE_SINGLE_TEMPLATE_FULL, 0);
}

tree::TerminalNode* TorQLParser::FullTemplateStringContext::EOF() {
  return getToken(TorQLParser::EOF, 0);
}

std::vector<TorQLParser::StringContentsFullContext *> TorQLParser::FullTemplateStringContext::stringContentsFull() {
  return getRuleContexts<TorQLParser::StringContentsFullContext>();
}

TorQLParser::StringContentsFullContext* TorQLParser::FullTemplateStringContext::stringContentsFull(size_t i) {
  return getRuleContext<TorQLParser::StringContentsFullContext>(i);
}


size_t TorQLParser::FullTemplateStringContext::getRuleIndex() const {
  return TorQLParser::RuleFullTemplateString;
}


std::any TorQLParser::FullTemplateStringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitFullTemplateString(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::FullTemplateStringContext* TorQLParser::fullTemplateString() {
  FullTemplateStringContext *_localctx = _tracker.createInstance<FullTemplateStringContext>(_ctx, getState());
  enterRule(_localctx, 168, TorQLParser::RuleFullTemplateString);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1286);
    match(TorQLParser::QUOTE_SINGLE_TEMPLATE_FULL);
    setState(1290);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == TorQLParser::FULL_STRING_TEXT

    || _la == TorQLParser::FULL_STRING_ESCAPE_TRIGGER) {
      setState(1287);
      stringContentsFull();
      setState(1292);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1293);
    match(TorQLParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringContentsFullContext ------------------------------------------------------------------

TorQLParser::StringContentsFullContext::StringContentsFullContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* TorQLParser::StringContentsFullContext::FULL_STRING_ESCAPE_TRIGGER() {
  return getToken(TorQLParser::FULL_STRING_ESCAPE_TRIGGER, 0);
}

TorQLParser::ColumnExprContext* TorQLParser::StringContentsFullContext::columnExpr() {
  return getRuleContext<TorQLParser::ColumnExprContext>(0);
}

tree::TerminalNode* TorQLParser::StringContentsFullContext::RBRACE() {
  return getToken(TorQLParser::RBRACE, 0);
}

tree::TerminalNode* TorQLParser::StringContentsFullContext::FULL_STRING_TEXT() {
  return getToken(TorQLParser::FULL_STRING_TEXT, 0);
}


size_t TorQLParser::StringContentsFullContext::getRuleIndex() const {
  return TorQLParser::RuleStringContentsFull;
}


std::any TorQLParser::StringContentsFullContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<TorQLParserVisitor*>(visitor))
    return parserVisitor->visitStringContentsFull(this);
  else
    return visitor->visitChildren(this);
}

TorQLParser::StringContentsFullContext* TorQLParser::stringContentsFull() {
  StringContentsFullContext *_localctx = _tracker.createInstance<StringContentsFullContext>(_ctx, getState());
  enterRule(_localctx, 170, TorQLParser::RuleStringContentsFull);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1300);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case TorQLParser::FULL_STRING_ESCAPE_TRIGGER: {
        enterOuterAlt(_localctx, 1);
        setState(1295);
        match(TorQLParser::FULL_STRING_ESCAPE_TRIGGER);
        setState(1296);
        columnExpr(0);
        setState(1297);
        match(TorQLParser::RBRACE);
        break;
      }

      case TorQLParser::FULL_STRING_TEXT: {
        enterOuterAlt(_localctx, 2);
        setState(1299);
        match(TorQLParser::FULL_STRING_TEXT);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool TorQLParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 39: return joinExprSempred(antlrcpp::downCast<JoinExprContext *>(context), predicateIndex);
    case 58: return columnExprSempred(antlrcpp::downCast<ColumnExprContext *>(context), predicateIndex);
    case 66: return tableExprSempred(antlrcpp::downCast<TableExprContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool TorQLParser::joinExprSempred(JoinExprContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 3);
    case 1: return precpred(_ctx, 4);

  default:
    break;
  }
  return true;
}

bool TorQLParser::columnExprSempred(ColumnExprContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 2: return precpred(_ctx, 19);
    case 3: return precpred(_ctx, 18);
    case 4: return precpred(_ctx, 17);
    case 5: return precpred(_ctx, 15);
    case 6: return precpred(_ctx, 13);
    case 7: return precpred(_ctx, 12);
    case 8: return precpred(_ctx, 11);
    case 9: return precpred(_ctx, 10);
    case 10: return precpred(_ctx, 30);
    case 11: return precpred(_ctx, 26);
    case 12: return precpred(_ctx, 25);
    case 13: return precpred(_ctx, 24);
    case 14: return precpred(_ctx, 23);
    case 15: return precpred(_ctx, 22);
    case 16: return precpred(_ctx, 21);
    case 17: return precpred(_ctx, 16);
    case 18: return precpred(_ctx, 9);

  default:
    break;
  }
  return true;
}

bool TorQLParser::tableExprSempred(TableExprContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 19: return precpred(_ctx, 3);

  default:
    break;
  }
  return true;
}

void TorQLParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  torqlparserParserInitialize();
#else
  ::antlr4::internal::call_once(torqlparserParserOnceFlag, torqlparserParserInitialize);
#endif
}
